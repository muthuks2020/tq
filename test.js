function siberiaFilter(n, t, i, r, u, f) {
    function h() {
        var n = {}, t;
        y.forEach(function(t) {
            t(n)
        });
        for (t in s)
            w(t, n);
        return n
    }
    function w(n, t) {
        var r = b(n), u, i;
        if (r)
            for (u in r)
                i = r[u],
                i !== null && i !== undefined && (t[u] = i)
    }
    function b(n) {
        var t = s[n], i;
        return !n || !t ? {} : (i = k(t.$element),
        !t.addBlockData) ? i : (t.addBlockData(i),
        i)
    }
    function k(n) {
        if (!n)
            return {};
        var t = {};
        return n.find('[data-simple-mapping="true"]').each(function() {
            var n = $(this), r = n.data("mapping-field"), u, i;
            r && (u = n.attr("type"),
            i = u === "checkbox" ? n.is(":checked") : n.val(),
            i && (t[r] = i))
        }),
        t
    }
    function d(n, t) {
        $.ajax({
            type: "POST",
            url: n,
            data: JSON.stringify(t),
            contentType: "application/json",
            success: function(n) {
                if (n.Errors)
                    siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors));
                else {
                    var i = $(".js-export-to-excel-form");
                    $("#filterSerialized", i).val(JSON.stringify(t));
                    i[0].submit()
                }
            },
            error: function() {
                siberia.notification.showErrorPopup(text.global.status.networkError)
            }
        })
    }
    function g() {
        for (var t, n = 0; n < e.length; n++) {
            if (e[n].blockOptions = e[n].blockOptions || {},
            e[n].blockOptions.$element = $('div[data-block-name="' + e[n].blockName + '"]'),
            !e[n].blockOptions.$element.length) {
                t = e[n].blockOptions.addDefaultValueIfBlockNotExists;
                t && y.push(e[n].blockOptions.addDefaultValueIfBlockNotExists);
                continue
            }
            s[e[n].blockName] = e[n].blockOptions
        }
    }
    function nt() {
        var n = $.map(e, function(n) {
            return n.blockName
        });
        n = ["root"].concat(n);
        $(".js-expand").ccExpand({
            saveStateInLocalStorage: !0,
            defaultState: {
                opened: [],
                closed: n
            }
        })
    }
    function p() {
        var i = o.find(".cc-advanced-search__col");
        c = c || o.find(".cc-advanced-search__item");
        var r = c.filter(function(n, t) {
            return $(t).css("display") !== "none"
        }).sort(function(n, t) {
            var i = $(n).data("order")
              , r = $(t).data("order");
            return i - r
        })
          , n = function(n) {
            var t = 0;
            r.each(function() {
                $(this).appendTo(i.eq(t));
                t++;
                t > n - 1 && (t = 0)
            })
        }
          , t = function() {
            $(window).width() > 1600 ? n(3) : n(2)
        };
        $(window).on("resize", t);
        t()
    }
    function tt() {
        o.find("input").each(function() {
            var n = $(this);
            n.ccBadgesGenerator({
                label: n.closest(".cc-input__group").find(".cc-input__label").text(),
                template: $(".cc-badge__template"),
                templateClassName: "cc-badge__template",
                targetPlace: n.closest(".cc-expand__wrapper").find(".cc-badges")
            })
        })
    }
    function it() {
        g();
        nt();
        p();
        tt();
        o.ccValidator({
            validCallback: function() {
                l && l(h())
            },
            searchInputNotSelectedWarningValidaion: $(u),
            mustUseWithOtherInputsValidation: [f],
            fromToDateValidation: [{
                fromField: f.dateFrom,
                toField: f.dateTo
            }]
        });
        $(".js-close-expands").on("click", function(n) {
            n.preventDefault();
            a && a();
            $(".js-expand").ccExpand.setDefaultState()
        });
        $(".js-clear-search-results").on("click", function(n) {
            n.preventDefault();
            v && v();
            o.submit()
        });
        $(".js-export-to-excel").click(function(n) {
            var t = $(n.currentTarget).attr("data-action-url")
              , i = h();
            d(t, i)
        })
    }
    var l = t, a = i, v = r, e = n, s = {}, y = [], o = $(".js-advanced-search"), c;
    return it(),
    {
        getQueryData: h,
        recalculateLayout: p
    }
}
function claimingFilter(n) {
    function et(n, i) {
        var u = t.data("salutations"), f = new RegExp(u.map(function(n) {
            return n.Text
        }).join("|"),"gmi"), r;
        n.ccAutocomplete({
            dataSourceUrl: n.attr("data-datasource-url"),
            filteringFields: ["FirstName", "LastName", "InvoiceNumber"],
            customTemplate: "#= DisplayText #",
            dataTextField: "Text",
            highlightFirst: !0,
            removeStandardCss: i,
            noDataMessage: n.attr("data-no-items-found-message"),
            fixServerFilter: !0,
            forceServerFilteringCondition: function(n, t) {
                return t && t.replace(/^0+/, "").length > 0 && n && n.lastFilter && n.lastFilter.length < 4
            },
            extraCheckFilter: function(n) {
                return n.toLowerCase().match(/^(\d{3})/)
            },
            extraFilterPrefix: "inv-",
            onClose: function() {
                var r = n.data("field-value"), i, t;
                r || (i = n.data("kendoAutoComplete"),
                t = i && i.dataSource && i.dataSource.data(),
                t && t.length === 1 && (n.data("field-value", t[0]),
                n.data("ccAutocomplete").setValue(t[0] && t[0].Text),
                rt()))
            },
            onFiltering: function(t) {
                var r = n.data("ccAutocomplete").getValue(), i, u;
                if (!r) {
                    t.preventDefault();
                    return
                }
                i = r.trim();
                u = i && ni(i.charAt(0));
                u && i.length < 2 && t.preventDefault()
            },
            setQueryPostParams: function() {
                var t = n.data("ccAutocomplete").getValue().replace(f, "").trim().split(" ");
                return {
                    FirstTextPart: t[0],
                    SecondTextPart: t.length > 1 ? t[1] : null,
                    IsAutoclaimableInvoices: !0,
                    IsMedicare: d
                }
            },
            getRelatedPostParams: function() {},
            onSelect: function(i) {
                n.data("field-value", i);
                n.data("ccAutocomplete").setValue(i.Text);
                rt();
                t.submit()
            }
        });
        r = n.data("ccAutocomplete");
        n.change(function() {
            var t = n.data("field-value"), i;
            t && (i = r.getValue(),
            t.Text !== i && (n.data("field-value", ""),
            b(!0)))
        })
    }
    function ot() {
        et(u);
        u.ccClearInputBtn().focus();
        r.on("submit", function(n) {
            n.preventDefault();
            t.submit()
        });
        r.trigger("submit")
    }
    function st() {
        y = $("#simplestatus option[in-progress-status-list]").clone();
        g = $("#simplestatus option[finalised-eclipse-claim-status]").clone();
        nt = $("#simplestatus option[exception-claim-status]").clone();
        $("#simplestatus option").remove();
        p = r.find(".js-simple-search-dropdown").ccDropdown({
            onChange: function() {},
            saveStateInLocalStorage: !0
        });
        s(y);
        w()
    }
    function w() {
        r.find("select.js-simple-search-dropdown").data("ccDropdown").setValue(v)
    }
    function s(n) {
        var t = r.find("select.js-simple-search-dropdown").data("ccDropdown").getKendoControl();
        t.dataSource.data([]);
        n.map(function() {
            var n = $(this)
              , r = n.text()
              , i = n.val();
            n.attr("data-default") && (v = i);
            t.dataSource.add({
                text: r,
                value: i
            })
        });
        w()
    }
    function ht() {
        var t = r.find("#simplestatus").data("ccDropdown")
          , n = p.parent();
        switch (f) {
        case i[0]:
            s(y);
            h(n, !1);
            break;
        case i[1]:
            s(nt);
            h(n, !1);
            break;
        case i[2]:
            s(g);
            d ? h(n, !0) : h(n, !1)
        }
        t.setValue(v)
    }
    function h(n, t) {
        t ? n.hide() : n.show()
    }
    function ct() {
        var n = $('div[data-expand="date"] .cc-expand__outer').find(".cc-advanced-search__title");
        switch (f) {
        case i[0]:
            n.text(text.advancedSearch.claim.dateCreated);
            break;
        case i[1]:
            n.text(text.advancedSearch.claim.dateSubmitted);
            break;
        case i[2]:
            n.text(text.advancedSearch.claim.dateFinalised)
        }
    }
    function lt() {
        switch (f) {
        case i[0]:
            o.closest(".js-filter-input-group").hide();
            break;
        case i[1]:
            o.closest(".js-filter-input-group").hide();
            break;
        case i[2]:
            o.closest(".js-filter-input-group").show()
        }
    }
    function at(n) {
        n.PatientNamePart = $("#patient-filter").val() || null
    }
    function vt(n) {
        n.LocationId = $("#location-filter").val() || null
    }
    function yt(n) {
        var r = $("#advanced-date-from").val()
          , u = $("#advanced-date-to").val()
          , t = r || u ? {
            From: r,
            To: u
        } : null;
        switch (f) {
        case i[0]:
            n.InvoiceDateCreatedLocalRange = t;
            break;
        case i[1]:
            n.ClaimDateSubmittedRange = t;
            break;
        case i[2]:
            n.ClaimDateFinalizedRange = t
        }
    }
    function pt(n) {
        n.ClaimType = $('input[name="advanced-claim-type"]:checked').val() || null
    }
    function wt(t) {
        t.ClaimType = n ? k.all : k.eclipse
    }
    function bt(n) {
        n.HealthFundId = $("#health-fund-filter").val() || null
    }
    function kt(n) {
        n.PaymentRunNumber = o.val() || null
    }
    function dt() {
        var t = {}
          , n = u.data("field-value");
        if (n)
            switch (n.ItemType) {
            case c.invoiceNumber:
                t.InvoiceId = n.Id;
                break;
            case c.doctor:
                t.DoctorId = n.Id;
                break;
            default:
                throw n.Type;
            }
        return t
    }
    function gt(n) {
        n.ClaimStatus = p.data("ccDropdown").getValue()
    }
    function ni(n) {
        return n ? /^\d+$/.test(n) : !1
    }
    function tt() {
        t.find('input[type="radio"][data-checked-by-default="true"]').prop("checked", !0).attr("checked", "checked").trigger("change").trigger("blur")
    }
    function l() {
        u.data("ccAutocomplete").setValue("");
        u.data("field-value", "");
        it(!0)
    }
    function it(n) {
        w();
        t.get(0).reset();
        t.find('input[type="submit"], input[type="radio"]').removeAttr("checked").end().find().find("input").trigger("change").trigger("blur");
        r.find("input").trigger("change").trigger("blur");
        u.data("kendoAutoComplete").close();
        t.find("[data-cc-badge-remove]").click();
        tt();
        ut();
        b(n);
        t.data("ccPokaYoka") && t.data("ccPokaYoka").checkForm()
    }
    function ti() {
        $(".js-deselectable-radio").on("click", 'input[type="radio"]', function() {
            var n = $(this);
            this.getAttribute("checked") ? (n.removeAttr("checked"),
            n.siblings('input[type="radio"]').attr("checked", !1)) : (n.attr("checked", !0),
            n.siblings('input[type="radio"]').removeAttr("checked"));
            n.trigger("input")
        })
    }
    function ii() {
        ut();
        t.trigger("claiming-applied-filter")
    }
    function rt() {
        ri() ? it(!1) : b(!0)
    }
    function ri() {
        var n = u.data("field-value");
        return n && n.ItemType === c.invoiceNumber
    }
    function b(n) {
        r.find(".js-simple-search-dropdown").toggleClass("cc-disabled", !n);
        t.find("div.js-expand").toggleClass("cc-disabled", !n)
    }
    function ui() {
        var n;
        $("#advanced-date-from, #advanced-date-to").ccDatepicker({
            mask: "00/00/0000"
        });
        var u = [{
            blockName: "patient",
            blockOptions: {
                addBlockData: at
            }
        }, {
            blockName: "location",
            blockOptions: {
                addBlockData: vt
            }
        }, {
            blockName: "date",
            blockOptions: {
                addBlockData: yt
            }
        }, {
            blockName: "invoice-type",
            blockOptions: {
                addBlockData: pt,
                addDefaultValueIfBlockNotExists: wt
            }
        }, {
            blockName: "health-fund",
            blockOptions: {
                addBlockData: bt
            }
        }, {
            blockName: "payment-run-number",
            blockOptions: {
                addBlockData: kt
            }
        }, ]
          , e = r.find("input.js-search-autocomplete").add(t.find("input.js-search-autocomplete"))
          , o = {
            dateFrom: $("#advanced-date-from"),
            dateTo: $("#advanced-date-to"),
            validatedFieldSelector: "#advanced-date-from, #advanced-date-to",
            dependOnFieldSelectors: ["#patient-filter", "#doctor-and-invoice-number-search-form input.js-search-autocomplete"],
            needToValidateConditionFunc: function() {
                return !ft && f === i[0]
            }
        };
        a = siberiaFilter(u, ii, l, l, e, o);
        n = $("#claiming-tabs").data("kendoTabStrip");
        f = n.select().attr("name");
        ti();
        st();
        tt();
        ot();
        l();
        r.addClass("cc-search_loaded");
        t.ccPokaYoka({
            buttonsSelector: '[type="submit"], .js-clear-search-results'
        })
    }
    function ut() {
        e = a.getQueryData();
        e = Object.assign(dt(), e);
        gt(e)
    }
    var c;
    siberia.ensureObject("siberia.claimFilter");
    var a, k = {
        all: 1,
        bulkBill: 2,
        dva: 3,
        eclipse: 4
    }, d = n, r = $("#doctor-and-invoice-number-search-form"), t = $(".js-advanced-search"), u = r.find("input.js-search-autocomplete"), o = $("#advanced-payment-run-number"), v, y, g, nt, p, f, ft = siberia.common.toBoolean(t.data("is-only-in-doctor-role")), e = null, i = ["js-in-progress-claims-tab", "js-exception-claims-tab", "js-finalized-claims-tab", ];
    c = {
        doctor: 1,
        invoiceNumber: 2
    };
    siberia.claimFilter.addOnFilteringCallback = function(n) {
        t.on("claiming-applied-filter", n)
    }
    ;
    siberia.claimFilter.changeTabCallback = function(n) {
        f = n;
        ht();
        ct();
        lt();
        a.recalculateLayout();
        l()
    }
    ;
    siberia.claimFilter.getFilterData = function() {
        return e
    }
    ;
    $(document).ready(function() {
        ui()
    })
}
function patientList() {
    function l() {
        var t = n.find(".js-patient-autocomplete"), i = t.ccAutocomplete({
            dataSourceUrl: t.attr("data-datasource-url"),
            filteringFields: ["FirstName", "Surname", "PatientNumber"],
            customTemplate: "#= FullName #, <span>#= PatientNumber #<\/span>",
            dataTextField: "FullName",
            noDataMessage: t.attr("data-no-patiens-found-message"),
            fixServerFilter: !0,
            forceServerFilteringCondition: function(n, t) {
                return n.lastFilter.trim() === "" && t.trim() !== ""
            },
            setQueryPostParams: function() {
                var n = (i.data("ccAutocomplete").getValue() || "").trim();
                return n.indexOf(" ") + 1 ? {
                    FirstTextPart: n.slice(0, n.indexOf(" ")),
                    SecondTextPart: n.slice(n.lastIndexOf(" ") + 1, n.length)
                } : {
                    FirstTextPart: n
                }
            },
            getRelatedPostParams: function() {
                return {
                    SearchType: f.data("ccDropdown").getValue()
                }
            },
            onSelect: function(n) {
                r = {
                    PatientId: n.PatientId
                };
                o()
            }
        }), f;
        t.ccClearInputBtn().focus();
        s = n.find(".js-patient-status-dropdown option[data-default]").attr("value");
        f = n.find(".js-patient-status-dropdown").ccDropdown({
            onChange: function() {
                i.data("ccAutocomplete").updateFilterState()
            },
            saveStateInLocalStorage: !0
        });
        n.on("submit", function(n) {
            n.preventDefault();
            u = !1;
            r = i.data("ccAutocomplete").getPostParams();
            o()
        });
        n.trigger("submit")
    }
    function o() {
        var n = i.data("kendoGrid").dataSource;
        n.page(1)
    }
    function a(n) {
        $(".js-global-spinner-container").spinner(!0);
        h(n)
    }
    function h() {
        $(this).closest("form").submit()
    }
    function v() {
        var n = $(this).data("patient-id")
          , t = $(this).data("type-id");
        t === 1 ? siberia.documentPopup.create({
            patientId: n
        }) : siberia.documentPopupDevExpress.create({
            patientId: n,
            isRtf: !0
        })
    }
    function y(n, t) {
        $.ajax({
            type: "POST",
            url: n,
            data: JSON.stringify(t),
            contentType: "application/json",
            success: function(n) {
                if (n.Errors)
                    siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors));
                else {
                    var i = $(".js-export-to-excel-form");
                    $("#filterSerialized", i).val(JSON.stringify(t));
                    i[0].submit()
                }
            },
            error: function() {
                siberia.notification.showErrorPopup(text.global.status.networkError)
            }
        })
    }
    function p(n) {
        r = n;
        u = !1;
        r.isAdvanced = !0;
        o()
    }
    function c() {
        t.get(0).reset();
        t.find('input[type="submit"], input[type="radio"]').removeAttr("checked").end().find().find("input").trigger("change").trigger("blur");
        t.find("[data-cc-badge-remove]").click();
        f.data("ccAlert").setState("hidden")
    }
    function w() {
        e = !0;
        n.find("#simple-search-patient").data("ccAutocomplete").setValue("");
        n.find("#simplestatus").data("ccDropdown").setValue(s);
        c();
        n.data("ccPokaYoka").forgetAboutTouchedDropdowns().submit()
    }
    function b() {
        if (i.length) {
            l();
            $(".js-expand").ccExpand({
                saveStateInLocalStorage: !0,
                defaultState: {
                    opened: ["name"],
                    closed: ["root", "location", "age", "contact", "appointment", "card"]
                }
            });
            $(".js-close-expands").on("click", function(n) {
                n.preventDefault();
                c();
                $(".js-expand").ccExpand.setDefaultState()
            });
            $(".js-clear-search-results").on("click", w);
            i.ccTooltip();
            i.on("click", ".js-edit-patient", h);
            i.on("click", ".js-edit-patient-withspinner", a);
            i.on("click", ".js-create-document", v);
            i.on("click", ".k-grid-pager, .k-grid-header", function() {
                u = !0
            });
            var r = new AdvancedSearchController({
                applyFilter: p
            });
            $(".js-export-to-excel").click(function(n) {
                var t = $(n.currentTarget).attr("data-action-url")
                  , i = r.getQueryData();
                y(t, i)
            });
            t.ccPokaYoka({
                buttonsSelector: '[type="submit"], .js-clear-search-results, .js-export-to-excel'
            });
            n.ccPokaYoka({
                selectNeedsToBeTouched: !0
            });
            n.addClass("cc-search_loaded")
        }
    }
    siberia.ensureObject("siberia.patientlist");
    var i = $("#patient-list-grid"), n = $(".js-simple-search-form"), t = $(".js-advanced-search"), f = $(".js-alert").ccAlert(), r = {}, s, e = !1, u = !1;
    siberia.patientlist.getPatientListFilterState = function() {
        return r
    }
    ;
    siberia.patientlist.getSuburbsFilterState = function() {
        return {
            SelectedCountryId: 1,
            Text: $("#suburb-filter").data("kendoMultiSelect")._prev
        }
    }
    ;
    siberia.patientlist.onGridRequestFail = function() {
        siberia.validation.showGridNetworkError(!0)
    }
    ;
    siberia.patientlist.onGridRequestEnd = function(i) {
        var r, o;
        if (n.data("ccPokaYoka") && n.data("ccPokaYoka").checkForm(),
        t.data("ccPokaYoka") && t.data("ccPokaYoka").checkForm(),
        i && i.response && i.response.AdditionalData) {
            for (r in i.response.AdditionalData)
                o = "#" + r.toLowerCase() + "PatientsCounter",
                $.animateNumber ? $(o).animateNumber({
                    number: i.response.AdditionalData[r],
                    numberStep: $.animateNumber.numberStepFactories.separator(",")
                }) : $(o).text(i.response.AdditionalData[r]);
            !siberia.patientlist.onGridRequestEnd.isFirstRequestComplete || e || u || (i.response.Total > 0 ? f.data("ccAlert").setState("success", text.global.patientList.alert.success.title, text.global.patientList.alert.success.text) : f.data("ccAlert").setState("info", text.global.patientList.alert.info.title, text.global.patientList.alert.info.text));
            e = !1;
            u = !1;
            siberia.patientlist.onGridRequestEnd.isFirstRequestComplete = !0
        }
    }
    ;
    siberia.patientlist.onGridRequestStart = function() {
        n.data("ccPokaYoka") && n.data("ccPokaYoka").disableForm();
        t.data("ccPokaYoka") && t.data("ccPokaYoka").disableForm()
    }
    ;
    $(document).ready(function() {
        b()
    })
}
function AdvancedSearchController(n) {
    function r(n, t) {
        (t = t || {},
        t.$element = $('div[data-block-name="' + n + '"]'),
        t.$element.length) && (u[n] = t)
    }
    function h(n) {
        if (!n)
            return {};
        var t = {};
        return n.find('[data-simple-mapping="true"]').each(function() {
            var n = $(this), r = n.data("mapping-field"), u, i;
            r && (u = n.attr("type"),
            i = u === "checkbox" ? n.is(":checked") : n.val(),
            i && (t[r] = i))
        }),
        t
    }
    function t(n, t, i, r) {
        return !r && i && (n = n || {},
        n[t] = i),
        r && i !== null && i !== undefined && (n = n || {},
        n[t] = i),
        n
    }
    function c(n) {
        var e = s.find("#simple-search-patient")
          , i = e.data("ccAutocomplete").getPostParams()
          , r = i.FirstTextPart
          , u = i.SecondTextPart
          , f = i.SearchType;
        r && t(n, "FirstTextPart", r);
        u && t(n, "SecondTextPart", u);
        f && t(n, "SearchType", f)
    }
    function l(n) {
        var i = $("#suburb-filter").val();
        i = i ? i[0] : null;
        t(n, "SuburbId", i);
        t(n, "StateId", $("#state-filter").val())
    }
    function a(n) {
        var u = {
            selectedRanges: null,
            specificAge: null
        }
          , r = n.split("-")
          , t = parseInt(r[0])
          , i = r.length > 1 ? parseInt(r[1]) : t;
        return i < t && (t = i,
        i = r[0]),
        t === i ? u.specificAge = t : u.selectedRanges = [{
            From: t,
            To: i
        }],
        u
    }
    function v() {
        var t = $("#advanced-specific-age").val(), n, i;
        return t && /^1?\d{1,2}($|(-1?\d{1,2})$)/.test(t) ? a(t) : (n = {
            selectedRanges: [],
            specificAge: null
        },
        i = $(".js-age-range-checkbox"),
        i.each(function() {
            var t = $(this)
              , i = t.data("from")
              , r = t.data("to");
            this.checked && n.selectedRanges.push({
                From: i,
                To: r
            })
        }),
        n.selectedRanges = n.selectedRanges.length ? n.selectedRanges : null,
        n)
    }
    function y(n) {
        var i = $('input[name="advanced-sex"]:checked').val(), r;
        i = i === "male" ? !0 : i === "female" ? !1 : null;
        r = v();
        t(n, "Sex", i, !0);
        t(n, "SelectedAgeRanges", r.selectedRanges);
        t(n, "SpecificAge", r.specificAge, !0)
    }
    function p(n) {
        var i = $("#advanced-appointment-from").val()
          , r = $("#advanced-appointment-to").val()
          , f = i || r ? {
            From: i,
            To: r
        } : null
          , u = $('input[name="advanced-appointment"]:checked').val();
        t(n, "AppointmentsDateLocalRange", f);
        t(n, "IsFirstAppointment", u === "first");
        t(n, "IsLastAppointment", u === "last")
    }
    function w(n) {
        var i = null, r;
        i = t(i, "HasMedicare", $("#advanced-card-medicare").is(":checked"));
        i = t(i, "HasHealthFunds", $("#advanced-card-health-fund").is(":checked"));
        i = t(i, "HasPension", $("#advanced-card-pension").is(":checked"));
        i = t(i, "HasHealthCare", $("#advanced-card-health-care").is(":checked"));
        r = null;
        r = t(r, "Gold", $("#advanced-dva-gold").is(":checked"));
        r = t(r, "Orange", $("#advanced-dva-orange").is(":checked"));
        r = t(r, "White", $("#advanced-dva-white").is(":checked"));
        t(n, "SelectedCardTypes", i);
        t(n, "SelectedDvaTypes", r);
        t(n, "HealthFundId", $("#health-fund-filter").val())
    }
    function b() {
        r("simpleSearch", {
            addBlockData: c
        });
        r("name");
        r("location", {
            addBlockData: l
        });
        r("age", {
            addBlockData: y
        });
        r("contact");
        r("appointment", {
            addBlockData: p
        });
        r("card", {
            addBlockData: w
        })
    }
    function k() {
        var n = o();
        f.applyFilter && f.applyFilter(n)
    }
    function e(n) {
        var t = u[n], i;
        return !n || !t ? {} : (i = h(t.$element),
        !t.addBlockData) ? i : (t.addBlockData(i),
        i)
    }
    function d(n, t) {
        var r = e(n), u, i;
        if (r)
            for (u in r)
                i = r[u],
                i !== null && i !== undefined && (t[u] = i)
    }
    function o() {
        var n = {};
        for (var t in u)
            d(t, n);
        return n
    }
    function g() {
        $(".js-deselectable-radio").on("click", 'input[type="radio"]', function() {
            var n = $(this);
            this.getAttribute("checked") ? (n.removeAttr("checked"),
            n.siblings('input[type="radio"]').attr("checked", !1)) : (n.attr("checked", !0),
            n.siblings('input[type="radio"]').removeAttr("checked"));
            n.trigger("input")
        })
    }
    function nt() {
        var n = $(".js-unique-age-field")
          , t = function(t) {
            var i = t.closest(".js-unique-age-field")
              , r = n.filter(function() {
                return !$(this).is(i)
            });
            r.find("input").each(function() {
                var n = $(this);
                n.attr("type") === "checkbox" ? n.prop("checked", !1) : n.val("");
                n.trigger("blur")
            })
        };
        n.on("input", "input", function() {
            t($(this))
        });
        n.on("click", 'input[type="checkbox"]', function() {
            t($(this))
        });
        n.find(".cc-input__date.k-input").data("kendoDatePicker").bind("change", function() {
            t($(this.element))
        })
    }
    function tt() {
        i.find("input").each(function() {
            var n = $(this);
            n.ccBadgesGenerator({
                label: n.closest(".cc-input__group").find(".cc-input__label").text(),
                template: $(".cc-badge__template"),
                templateClassName: "cc-badge__template",
                targetPlace: n.closest(".cc-expand__wrapper").find(".cc-badges")
            })
        })
    }
    function it() {
        var n = i.find(".cc-advanced-search__col")
          , t = i.find(".cc-advanced-search__items .cc-advanced-search__item")
          , u = function() {
            t.each(function(i) {
                i <= t.length / 3 - 1 ? $(this).appendTo(n.eq(0)) : i <= t.length * 2 / 3 - 1 ? $(this).appendTo(n.eq(1)) : $(this).appendTo(n.eq(2))
            })
        }
          , f = function() {
            t.each(function(i) {
                i <= t.length / 2 - 1 ? $(this).appendTo(n.eq(0)) : $(this).appendTo(n.eq(1))
            })
        }
          , r = function() {
            $(window).width() > 1600 ? u() : f()
        };
        $(window).on("resize", r);
        r()
    }
    function rt() {
        $("#advanced-date-of-birth, #advanced-appointment-from, #advanced-appointment-to").kendoDatePicker();
        $("#advanced-home, #advanced-work").kendoMaskedTextBox({
            mask: "(00) 0000 - 0000"
        });
        i.ccValidator({
            validCallback: k,
            twoDashedSeparatedNumbersValidation: i.find(".js-two-dashed-separated-numbers-validation"),
            fromToDateValidation: [{
                fromField: i.find("input.js-advnaced-search-appointments-from"),
                toField: i.find("input.js-advnaced-search-appointments-to")
            }]
        });
        b();
        g();
        nt();
        tt();
        it();
        i.find(".cc-clear-input__wrap input").ccClearInputBtn()
    }
    var f = n || {}
      , u = {}
      , i = $(".js-advanced-search")
      , s = $(".js-simple-search-form");
    return rt(),
    {
        getQueryData: o,
        getBlockData: e
    }
}
function referralSection(n) {
    function t() {
        $(".js-referral").each(function() {
            function nt() {
                g.data("ccDatepicker").clearAll();
                c.data("ccDropdown").clearAll();
                u.data("ccMultiselect").clearAll();
                v.val("");
                n.data("ccPokaYoka").checkForm()
            }
            function p(n, t, i) {
                c.filter(function() {
                    return $(this).hasClass("js-input__salutation")
                }).data("ccDropdown").getKendoControl().dataSource.data().forEach(function(i) {
                    parseInt(i.value) === t.SalutationId && n.find(".js-referral-salutaiton").text(i.text).attr("data-salutation-id", i.value)
                });
                n.find(".js-referral-first-name").text(t.FirstName).end().find(".js-referral-last-name").text(t.LastName).end().find(".js-referral-provider-number").text(t.ProviderNo).end().find(".js-referral-initials").text((t.FirstName[0] + t.LastName[0]).toUpperCase()).end().attr("data-referral-person-id", t.ReferralPersonId).attr("data-speciality-id", t.SpecialtyId);
                i || n.find(".js-referral-start-date").text(t.DateOfReferralString).end().find(".js-expired-hint").toggleClass("cc-referral__date_error", !t.IsValid).end().find(".js-referral-end-date").text(t.ExpirationDateString ? t.ExpirationDateString : text.invoices.referral.indefinite).end().attr("data-expiration-months", t.ExpirationMonths).attr("data-referral-id", t.ReferralId)
            }
            function tt() {
                var n = t.find(".js-carousel").ccCarousel({
                    onChange: function(n, t) {
                        var i = function() {
                            return s.text(n.find(".js-referral-name").text())
                        };
                        s.text() === "" || n.find(".js-referral-name").text() === t.find(".js-referral-name").text() ? i() : s.parent().fadeOut(250, function() {
                            i().parent().fadeIn(250)
                        })
                    },
                    fillTemplate: function(n, t) {
                        p(n, t, !1)
                    }
                })
                  , i = n.data("referrals")
                  , r = 0;
                return n.removeAttr("data-referrals"),
                i.forEach(function(t, i) {
                    n.data("ccCarousel").appendItem(t);
                    t.ReferralId === parseInt(n.attr("data-selected-referral-id")) && (r = i)
                }),
                n.toggle(!!i.length),
                $(".js-no-referrer-selected-title").toggle(!i.length),
                $(".js-selected-referrer-title").toggle(!!i.length),
                $(".cc-referral__tick").css("opacity", i.length ? 1 : 0),
                n.data("ccCarousel").setState(r, !1),
                n
            }
            function w() {
                u.closest(".cc-inputs").slideToggle({
                    easing: f.is(":visible") ? "easeOutBack" : "easeInBack"
                });
                f.slideToggle({
                    easing: f.is(":visible") ? "easeInBack" : "easeOutBack",
                    complete: function() {
                        f.is(":visible") ? (u.data("ccMultiselect").clear(),
                        o.addClass("visible")) : (c.filter(function() {
                            return $(this).attr("id") !== "ExpirationMonths"
                        }).each(function() {
                            $(this).data("ccDropdown").clear()
                        }),
                        o.removeClass("visible"),
                        v.val(""));
                        n.data("ccPokaYoka").checkForm()
                    }
                })
            }
            function it(n) {
                n.preventDefault();
                var t = $(n.target).closest(".js-referral-person").find(".js-referral-name").text();
                d.data("ccAlert").setState("fail", text.invoices.referral.expired.title, text.invoices.referral.expired.subtitle(t))
            }
            function rt() {
                n.removeClass("cc-referral_edit-mode").find("[data-cc-floated-tooltip-mode]").hide().filter(function() {
                    return $(this).attr("data-cc-floated-tooltip-mode").toLowerCase() === "add"
                }).show();
                $(".js-expired-alert-message").hide();
                u.closest(".cc-inputs").show();
                f.hide();
                o.removeClass("visible");
                r.ReferralId = 0;
                r.ReferralPersonId = 0;
                n.data("ccPokaYoka").checkForm()
            }
            function ut() {
                n.addClass("cc-referral_edit-mode").find("[data-cc-floated-tooltip-mode]").hide().filter(function() {
                    return $(this).attr("data-cc-floated-tooltip-mode").toLowerCase() === "update"
                }).show();
                $(".js-expired-alert-message").hide();
                var t = e.data("ccCarousel").getCurrentItem();
                r.ReferralId = t.attr("data-referral-id");
                r.ReferralPersonId = t.attr("data-referral-person-id");
                n.data("ccPokaYoka").checkForm();
                ft(t);
                k()
            }
            function ft(t) {
                n.find("#DateOfReferral").data("ccDatepicker").setValue(t.find(".js-referral-start-date").text());
                n.find("#ExpirationMonths").data("ccDropdown").setValue(t.attr("data-expiration-months"));
                n.find("#SalutationId").data("ccDropdown").setValue(t.find(".js-referral-salutaiton").attr("data-salutation-id"));
                n.find("#FirstName").val(t.find(".js-referral-first-name").text());
                n.find("#LastName").val(t.find(".js-referral-last-name").text());
                n.find("#ProviderNo").val(t.find(".js-referral-provider-number").text());
                n.find("#SpecialtyId").data("ccDropdown").setValue(t.attr("data-speciality-id"))
            }
            function et() {
                var s = t.attr("data-patient-id"), h = $("#DateOfReferral").data("ccDatepicker").getValue(), c = $("#ExpirationMonths").data("ccDropdown").getValue(), l = $("#SalutationId").data("ccDropdown").getValue(), v = $("#FirstName").val(), w = $("#LastName").val(), b = $("#ProviderNo").val(), k = $("#SpecialtyId").data("ccDropdown").getValue(), d = $("#DoctorId").val(), i = {}, o, f;
                s ? i.PatientId = s : null;
                h ? i.DateOfReferral = h : null;
                c ? i.ExpirationMonths = c : null;
                d ? i.DoctorId = d : null;
                i.ReferralId = r.ReferralId;
                u.closest(".cc-input__group").is(":visible") ? (f = !1,
                o = u.data("ccMultiselect").getValue()[0] || 0,
                o ? i.ReferralPersonId = o : null) : (f = !0,
                i.ReferralPersonId = r.ReferralPersonId,
                l ? i.SalutationId = l : null,
                v ? i.FirstName = v : null,
                w ? i.LastName = w : null,
                b ? i.ProviderNo = b : null,
                k ? i.SpecialtyId = k : null);
                i.SaveContact = f;
                $.ajax(t.find(".js-referral-tooltip-form").attr("data-save-referral-url"), {
                    method: "POST",
                    data: i,
                    beforeSend: function() {
                        y.stop().fadeIn();
                        n.data("ccPokaYoka").disableForm()
                    },
                    complete: function() {
                        y.stop().fadeOut();
                        n.data("ccPokaYoka").checkForm()
                    },
                    success: function(i) {
                        if (i.Referral)
                            e.slideDown({
                                easing: "easeInBack",
                                complete: function() {
                                    $(".js-no-referrer-selected-title").fadeOut("300", function() {
                                        $(".js-selected-referrer-title").fadeIn();
                                        $(".cc-referral__tick").css("opacity", 1)
                                    });
                                    n.data("ccFloatedTooltip").hideTooltip();
                                    i.Referral.IsUpdated ? e.data("ccCarousel").items.each(function() {
                                        var n = $(this);
                                        parseInt(n.attr("data-referral-person-id")) === i.Referral.ReferralPersonId && p(n, i.Referral, parseInt(n.attr("data-referral-id")) !== i.Referral.ReferralId)
                                    }) : (e.data("ccCarousel").prependItem(i.Referral),
                                    e.data("ccCarousel").setState(0))
                                }
                            });
                        else if (i.Errors)
                            for (field in i.Errors)
                                (function(n, i) {
                                    if (n === "")
                                        a.data("ccAlert").setState("fail", text.global.status.errorOccurred, i);
                                    else {
                                        var r = t.find("#" + n);
                                        r.one("focus", function() {
                                            r.closest(".cc-input__group").removeClass("cc-input__group_invalid").find(".js-validation-message").slideUp()
                                        }).closest(".cc-input__group").addClass("cc-input__group_invalid").find(".js-validation-message").text(i).slideDown()
                                    }
                                }
                                )(field, i.Errors[field].errors[0])
                    },
                    error: function() {
                        a.data("ccAlert").setState("fail", text.global.status.errorOccurred, text.global.status.networkError)
                    }
                })
            }
            function ot() {
                n.find(".js-show-edit-inputs, .js-referral-edit-inputs-toggler").on("click", function(n) {
                    n.preventDefault();
                    w()
                });
                t.on("click", function(n) {
                    $(n.target).closest(".cc-referral__date_error").length && it(n)
                });
                o.on("click", w);
                n.on("click", ".js-send-referral-data", et)
            }
            function b() {
                n.find(".cc-input__group_invalid").each(function() {
                    $(this).removeClass("cc-input__group_invalid").find(".js-validation-message").hide()
                })
            }
            function k() {
                var t = $(".js-expired-alert-message"), f = n.find("#DateOfReferral"), r = new Date(f.data("kendoDatePicker").value()), u = parseInt(n.find("#ExpirationMonths").data("ccDropdown").getValue()), e, i;
                if (f.val()) {
                    if (u === -1 || isNaN(r.getTime()) || !u) {
                        t.stop().slideUp();
                        return
                    }
                    e = new Date(r.setMonth(r.getMonth() + u));
                    i = new Date;
                    i.setDate(i.getDate() - 1);
                    +e < +i ? t.stop().slideDown() : t.stop().slideUp()
                } else
                    t.stop().slideUp()
            }
            var t = $(this), i = t.find("select.js-referral-status-dropdown"), l;
            if (!i.data("ccDropdown")) {
                var r = {
                    ReferralId: 0,
                    ReferralPersonId: 0
                }
                  , s = t.find(".js-selected-referrer")
                  , n = $(".js-referral-tooltip")
                  , f = n.find(".js-referral-edit-inputs")
                  , h = t.find(".js-referral-provided")
                  , o = t.find(".cc-floated-tooltip__close-wrapper");
                i.ccDropdown({
                    kendo: {
                        optionLabel: "Provided",
                        value: null
                    },
                    onChange: function(n) {
                        n ? h.stop().slideUp({
                            easing: "easeInBack"
                        }) : h.stop().slideDown({
                            easing: "easeOutBack"
                        })
                    }
                });
                l = i.data("has-referral") ? null : i.data("selected-value") || i.data("default-value");
                i.data("ccDropdown").setValue(l);
                h.toggle(!i.data("ccDropdown").getValue());
                var d = t.find(".js-peson-alert-wrap .js-alert").ccAlert()
                  , a = n.find(".js-alert").ccAlert()
                  , v = n.find(".cc-input")
                  , c = n.find(".js-input__dropdown").ccDropdown()
                  , u = n.find(".js-multiselect").ccMultiselect({
                    maxItems: 1
                })
                  , g = n.find(".js-input-date").ccDatepicker()
                  , e = tt()
                  , y = n.find(".js-spinner");
                n.ccFloatedTooltip({
                    buttons: [{
                        buttonSelector: ".js-add-new-referrer",
                        direction: "right",
                        anchorSelector: ".js-add-new-referrer",
                        callback: function() {
                            b();
                            rt()
                        }
                    }, {
                        buttonSelector: ".js-referral-name",
                        direction: "left",
                        anchorSelector: ".cc-referrral__carousel-left-anchor",
                        callback: function() {
                            b();
                            ut()
                        }
                    }],
                    onHide: nt,
                    closeButton: $(".js-close-floated-tooltip")
                });
                n.ccTooltip();
                n.ccPokaYoka({
                    buttonsSelector: ".js-send-referral-data",
                    checkRequiredFields: !0,
                    onInputCallback: function() {
                        setTimeout(k, 0)
                    }
                });
                ot()
            }
        })
    }
    n ? t() : $(document).ready(function() {
        t()
    })
}
function itemsAutosuggest(n, t) {
    function f(n, t) {
        var o = i.from === siberia.constants.clinicalMessageToReceptionist, f, e, u, r;
        if (o)
            return f = $("#invoice-items-automplete"),
            f.val(""),
            f.blur(),
            n.dataSource.add(t),
            {
                item: t,
                cancel: function() {
                    n.dataSource.remove(t)
                }
            };
        for (n.addRow(),
        e = n.dataSource.data(),
        u = 0; u < e.length; u++)
            if (r = e[u],
            r.Id === 0)
                return r.Id = -1,
                r.Refund = !0,
                r.IsLspnDependent = t.IsLspnDependent,
                {
                    item: r,
                    cancel: function() {
                        n.dataSource.remove(r)
                    }
                }
    }
    function e(n, t) {
        return function(i) {
            var r, f, u, e;
            if (i.IsSelectedForPayment = !0,
            r = n.wrapper.find(".js-mpr-rule"),
            i.ItemNumber && r.length > 0 && (f = r.is(":checked"),
            !f && i.CanApplyMpr && (u = kendo.parseDate(i.DateOfService, siberia.config.formats.dateTimeFormat),
            e = n.dataSource.data().filter(function(n) {
                if (n.CanApplyMpr && n.DateOfService) {
                    var t = kendo.parseDate(n.DateOfService, siberia.config.formats.dateTimeFormat);
                    return t.getFullYear() === u.getFullYear() && t.getMonth() === u.getMonth() && t.getDate() === u.getDate()
                }
                return n.CanApplyMpr
            }),
            e.length === 2))) {
                siberia.confirmationPopup.open("#mpr-confirmation-popup", function() {
                    r.trigger("click")
                }, function() {
                    t()
                });
                return
            }
            t()
        }
    }
    function r(n) {
        setTimeout(function() {
            var t = $("#" + n.sender.element.attr("id") + "-list")
              , u = t.find(".cc-nodata__message")
              , r = t.find("li")
              , i = 0;
            r.length ? r.each(function(n) {
                n < 4 && (i += $(this).outerHeight())
            }) : i = u.outerHeight();
            t.css("height", i)
        }, 0)
    }
    function u() {
        $(".js-billing-items").each(function() {
            var t = $(this), n = t.find("input.js-items-autocomplete"), h;
            if (!n.data("ccAutocomplete")) {
                var c = t.find(".js-submit")
                  , v = function() {
                    n.data("ccAutocomplete").getDataSource().get() ? t.data("ccPokaYoka").checkForm() : t.data("ccPokaYoka").disableForm()
                }
                  , o = function(n) {
                    var t = n.parent();
                    return t.length === 0 ? $(null) : t.data("kendoGrid") ? t : o(t)
                }
                  , l = function(n) {
                    var t = n.closest("form")
                      , i = t.parents("#message-to-receptionist-popup");
                    return i.length > 0 ? !0 : !1
                }
                  , a = function() {
                    i.refreshAction(function() {
                        $(".js-billing-items input.js-items-autocomplete").focus()
                    })
                }
                  , u = function(t, i) {
                    var r, u;
                    if (t && (i || n.val() === t.ItemNumber) && (r = o(n),
                    u = r.data("kendoGrid"),
                    u)) {
                        var s = f(u, t)
                          , h = r.data("item-popup-content-url")
                          , c = r.attr("data-find-item-url")
                          , l = r.attr("data-item-total-url")
                          , v = r.attr("data-mbs-item-data-url");
                        siberia.itemFee.initFeePopup(s, u, h, c, l, v, e(u, a), t.ItemNumber, t.ItemNumberType, t.ExtrasCoverItemPrivateFeeId)
                    }
                }
                  , s = n.ccAutocomplete({
                    dataSourceUrl: n.attr("data-datasource-url"),
                    filteringFields: ["ItemNumber"],
                    customTemplate: $(".js-invoice-item-suggest-template").html(),
                    dataTextField: "ItemNumber",
                    highlightFirst: !0,
                    setQueryPostParams: i.setQueryPostParams || function() {
                        var r = s.data("ccAutocomplete").getValue()
                          , t = {
                            text: r
                        }
                          , n = $("#LocationId")
                          , i = n && n.length && n.val();
                        return i && (t.LocationId = i),
                        t
                    }
                    ,
                    onSelect: i.onSelect || function(n) {
                        u(n, !0)
                    }
                    ,
                    dataSourceSchema: {
                        data: function(n) {
                            return n.Items
                        }
                    },
                    onEnterPressed: function(i) {
                        if (t.data("ccPokaYoka").getIsEnabledStatus()) {
                            if (l(i))
                                return;
                            u(n.data("ccAutocomplete").getDataSource().get(), !1)
                        } else
                            n.data("ccAutocomplete").getAutocomplete().search(n.val())
                    },
                    onOpen: r,
                    onDataBound: function(i) {
                        var u = n.data("ccAutocomplete").getDataSource().get()
                          , f = n.data("ccAutocomplete").getDataSource().data();
                        u && f.length === 1 && u.ItemNumber && u.ItemNumber === n.val() ? t.data("ccPokaYoka").checkForm() : t.data("ccPokaYoka").disableForm();
                        r(i)
                    },
                    onDataSourceError: function() {
                        siberia.notification.showErrorPopup(text.global.status.messageToReceptionistAutosuggestError)
                    }
                });
                c.on("click", function(n) {
                    n.preventDefault();
                    u(s.data("ccAutocomplete").getDataSource().get(), !1)
                });
                n.ccClearInputBtn();
                t.find(".js-cc-tooltip").ccTooltip();
                t.ccPokaYoka({
                    buttonsSelector: ".js-submit",
                    checkingOnTheFly: !1
                });
                h = t.parent().find(".js-search-billable-item");
                h.on("click", function(n) {
                    var t = $(n.target);
                    n.preventDefault();
                    var i = t.attr("data-health-fund-id")
                      , r = t.attr("data-nomenclature-search-type")
                      , f = t.attr("data-in-patient");
                    siberia.functions.searchItems({
                        healthFundId: i,
                        billingAccountTypeId: r,
                        inPatient: f
                    }).then(function(n) {
                        u({
                            ItemNumber: n.ItemNumber,
                            ItemNumberType: n.ItemType,
                            ExtrasCoverItemPrivateFeeId: n.ExtrasCoverItemPrivateFeeId
                        }, !0)
                    })
                })
            }
        })
    }
    siberia.ensureObject("siberia.constants");
    var i = t || {};
    n ? u() : $(document).ready(function() {
        u()
    })
}
(function(n) {
    function u(n) {
        return r.indexOf(n) != -1
    }
    function t(t, i) {
        var u = n(t), r, f;
        if (u.data("role") == "datepicker") {
            if ((r = kendo.parseDate(i, siberia.config.formats.dateFormat),
            r) || (f = u.data("kendoDatePicker"),
            r = kendo.parseDate(i, f.options.format),
            f.options.start == "year"))
                return r
        } else if (u.data("role") == "datetimepicker")
            return kendo.parseDate(i, siberia.config.formats.dateTimeFormat);
        return null
    }
    function i(n) {
        var t = siberia.config.restrictions.minSupportedDateTime;
        return n.valueOf() >= t.valueOf()
    }
    function f(n) {
        var t = siberia.config.restrictions.maxSupportedDateTime;
        return n.valueOf() < t.valueOf()
    }
    var r = siberia.config.countriesWithStatesAndSuburbs.split(",");
    n.validator.addMethod("digitsinstring", function(n, t, i) {
        var r = ("" + n).replace(/[^\d]/g, "");
        return n == "" || r.length == i
    });
    n.validator.unobtrusive.adapters.add("digitsinstring", ["count"], function(n) {
        n.rules.digitsinstring = n.params.count * 1;
        n.messages.digitsinstring = n.message
    });
    n.validator.addMethod("countryphonenumber", function(t, i, r) {
        var f = n(i.form).find('[name$="' + r.countryField + '"]').val()
          , e = ("" + t).replace(/[^\d]/g, "");
        return t == "" || !u(f) || e.length == r.count
    });
    n.validator.unobtrusive.adapters.add("countryphonenumber", ["count", "countryfield"], function(n) {
        n.rules.countryphonenumber = {
            count: n.params.count * 1,
            countryField: n.params.countryfield
        };
        n.messages.countryphonenumber = n.message
    });
    n.validator.addMethod("requiredif", function(t, i, r) {
        var u = r.dependentproperties
          , f = r.satisfytogether
          , e = siberia.requiredIf.containsTurnedOnDependentProperties(u, n(i.form), f);
        return !e || !!t
    });
    n.validator.unobtrusive.adapters.add("requiredif", ["dependentproperties", "satisfytogether"], function(n) {
        n.rules.requiredif = {
            dependentproperties: JSON.parse(n.params.dependentproperties),
            satisfytogether: JSON.parse(n.params.satisfytogether.toLowerCase())
        };
        n.messages.requiredif = n.message
    });
    n.validator.addMethod("groupasvalue", function(t, i) {
        var f = n(i).data("val-groupasvalue-groupname")
          , e = "[data-val-groupasvalue-groupname=" + f + "]"
          , r = n(e, i.form)
          , u = r.filter(function() {
            return n(this).val()
        });
        return u.length == 0 || u.length == r.length
    });
    n.validator.addMethod("medicarecardnumbercheck", function(t) {
        var i = ("" + t).replace(/[^\d]/g, ""), u, r, f;
        if (i)
            if (i.length === 10 && i[0] >= 2 && i[0] <= 6) {
                if (u = [1, 3, 7, 9, 1, 3, 7, 9],
                r = 0,
                n.each(i.slice(0, 8).split(""), function(n, t) {
                    r += t * u[n]
                }),
                f = r % 10 == i[8],
                !f)
                    return !1
            } else
                return !1;
        return !0
    });
    n.validator.addMethod("clientmaxdatecheck", function(t, i) {
        var r, u, f;
        return this.optional(i) && !t ? !0 : (r = n(i).data("kendoDatePicker"),
        !r) ? !0 : (u = r.max(),
        f = kendo.parseDate(t, r.options.format),
        !f || !u || f <= u) ? !0 : !1
    });
    n.validator.addMethod("minsupporteddatecheck", function(n, r) {
        if (this.optional(r) && !n)
            return !0;
        var u = t(r, n);
        return u ? i(u) : !1
    });
    n.validator.addMethod("maxsupporteddatecheck", function(n, i) {
        if (this.optional(i) && !n)
            return !0;
        var r = t(i, n);
        return r ? f(r) : !1
    });
    n.validator.addMethod("dateofbirth", function(n, r) {
        if (this.optional(r) && !n)
            return !0;
        var u = t(r, n);
        return u ? i(u) && u < Date.now() : !1
    });
    n.validator.addMethod("siberiadynamicrange", function(t, i, r) {
        var s = n(i), u = parseFloat(s.data("range-min")), f = parseFloat(s.data("range-max")), e = parseFloat(t), o;
        return isNaN(u) && isNaN(f) ? !0 : (o = r.displayName,
        !isNaN(u) && !isNaN(f) && (isNaN(e) || e < u || e > f)) ? (n.validator.messages.siberiadynamicrange = text.global.validation.minMaxValue(o, u, f),
        !1) : !isNaN(u) && (isNaN(e) || e < u) ? (n.validator.messages.siberiadynamicrange = text.global.validation.minValue(o, u),
        !1) : !isNaN(f) && (isNaN(e) || e > f) ? (n.validator.messages.siberiadynamicrange = text.global.validation.maxValue(o, f),
        !1) : !0
    });
    n.validator.addMethod("veterancardnumbercheck", function(n) {
        var t = new RegExp("^[NVQSWT]{1}\\s?[A-Z]{0,3}\\d{4,6}[A-Z]{0,1}$");
        return n.length == 0 || t.test(n)
    });
    n.validator.addMethod("rawemail", function(n) {
        var t = new RegExp("^\\s*[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*\\s*$");
        return n.length == 0 || t.test(n)
    });
    n.validator.unobtrusive.adapters.add("clientmaxdatecheck", {}, function(t) {
        t.rules.clientmaxdatecheck = !0;
        var i = n(t.element).data("kendoDatePicker");
        i && i.max() && (t.messages.clientmaxdatecheck = kendo.format(t.message, kendo.toString(i.max(), i.options.format)))
    });
    n.validator.unobtrusive.adapters.add("siberiadynamicrange", ["displayname"], function(n) {
        n.rules.siberiadynamicrange = {
            displayName: n.params.displayname
        }
    });
    n.validator.unobtrusive.adapters.addBool("groupasvalue");
    n.validator.unobtrusive.adapters.addBool("medicarecardnumbercheck");
    n.validator.unobtrusive.adapters.addBool("veterancardnumbercheck");
    n.validator.unobtrusive.adapters.addBool("minsupporteddatecheck");
    n.validator.unobtrusive.adapters.addBool("maxsupporteddatecheck");
    n.validator.unobtrusive.adapters.addBool("dateofbirth");
    n.validator.unobtrusive.adapters.addBool("rawemail")
}
)(jQuery),
function() {
    "use strict";
    function n(n) {
        function s(s, h) {
            var rt, ut, p = s == window, l = h && h.message !== undefined ? h.message : undefined, g, k, d, tt, nt, w, b, it, ft, et, at;
            if (h = n.extend({}, n.blockUI.defaults, h || {}),
            !h.ignoreIfBlocked || !n(s).data("blockUI.isBlocked")) {
                if (h.overlayCSS = n.extend({}, n.blockUI.defaults.overlayCSS, h.overlayCSS || {}),
                rt = n.extend({}, n.blockUI.defaults.css, h.css || {}),
                h.onOverlayClick && (h.overlayCSS.cursor = "pointer"),
                ut = n.extend({}, n.blockUI.defaults.themedCSS, h.themedCSS || {}),
                l = l === undefined ? h.message : l,
                p && t && e(window, {
                    fadeOut: 0
                }),
                l && typeof l != "string" && (l.parentNode || l.jquery) && (g = l.jquery ? l[0] : l,
                k = {},
                n(s).data("blockUI.history", k),
                k.el = g,
                k.parent = g.parentNode,
                k.display = g.style.display,
                k.position = g.style.position,
                k.parent && k.parent.removeChild(g)),
                n(s).data("blockUI.onUnblock", h.onUnblock),
                d = h.baseZ,
                tt = f || h.forceIframe ? n('<iframe class="blockUI" style="z-index:' + d++ + ';display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0" src="' + h.iframeSrc + '"><\/iframe>') : n('<div class="blockUI" style="display:none"><\/div>'),
                nt = h.theme ? n('<div class="blockUI blockOverlay ui-widget-overlay" style="z-index:' + d++ + ';display:none"><\/div>') : n('<div class="blockUI blockOverlay" style="z-index:' + d++ + ';display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0"><\/div>'),
                h.theme && p ? (b = '<div class="blockUI ' + h.blockMsgClass + ' blockPage ui-dialog ui-widget ui-corner-all" style="z-index:' + (d + 10) + ';display:none;position:fixed">',
                h.title && (b += '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">' + (h.title || "&nbsp;") + "<\/div>"),
                b += '<div class="ui-widget-content ui-dialog-content"><\/div>',
                b += "<\/div>") : h.theme ? (b = '<div class="blockUI ' + h.blockMsgClass + ' blockElement ui-dialog ui-widget ui-corner-all" style="z-index:' + (d + 10) + ';display:none;position:absolute">',
                h.title && (b += '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">' + (h.title || "&nbsp;") + "<\/div>"),
                b += '<div class="ui-widget-content ui-dialog-content"><\/div>',
                b += "<\/div>") : b = p ? '<div class="blockUI ' + h.blockMsgClass + ' blockPage" style="z-index:' + (d + 10) + ';display:none;position:fixed"><\/div>' : '<div class="blockUI ' + h.blockMsgClass + ' blockElement" style="z-index:' + (d + 10) + ';display:none;position:absolute"><\/div>',
                w = n(b),
                l && (h.theme ? (w.css(ut),
                w.addClass("ui-widget-content")) : w.css(rt)),
                h.theme || nt.css(h.overlayCSS),
                nt.css("position", p ? "fixed" : "absolute"),
                (f || h.forceIframe) && tt.css("opacity", 0),
                it = [tt, nt, w],
                ft = p ? n("body") : n(s),
                n.each(it, function() {
                    this.appendTo(ft)
                }),
                h.theme && h.draggable && n.fn.draggable && w.draggable({
                    handle: ".ui-dialog-titlebar",
                    cancel: "li"
                }),
                et = v && (!n.support.boxModel || n("object,embed", p ? null : s).length > 0),
                o || et) {
                    if (p && h.allowBodyStretch && n.support.boxModel && n("html,body").css("height", "100%"),
                    (o || !n.support.boxModel) && !p)
                        var ot = r(s, "borderTopWidth")
                          , st = r(s, "borderLeftWidth")
                          , ht = ot ? "(0 - " + ot + ")" : 0
                          , ct = st ? "(0 - " + st + ")" : 0;
                    n.each(it, function(n, t) {
                        var i = t[0].style, r, u;
                        i.position = "absolute";
                        n < 2 ? (p ? i.setExpression("height", "Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.support.boxModel?0:" + h.quirksmodeOffsetHack + ') + "px"') : i.setExpression("height", 'this.parentNode.offsetHeight + "px"'),
                        p ? i.setExpression("width", 'jQuery.support.boxModel && document.documentElement.clientWidth || document.body.clientWidth + "px"') : i.setExpression("width", 'this.parentNode.offsetWidth + "px"'),
                        ct && i.setExpression("left", ct),
                        ht && i.setExpression("top", ht)) : h.centerY ? (p && i.setExpression("top", '(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"'),
                        i.marginTop = 0) : !h.centerY && p && (r = h.css && h.css.top ? parseInt(h.css.top, 10) : 0,
                        u = "((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + " + r + ') + "px"',
                        i.setExpression("top", u))
                    })
                }
                if (l && (h.theme ? w.find(".ui-widget-content").append(l) : w.append(l),
                (l.jquery || l.nodeType) && n(l).show()),
                (f || h.forceIframe) && h.showOverlay && tt.show(),
                h.fadeIn) {
                    var lt = h.onBlock ? h.onBlock : u
                      , vt = h.showOverlay && !l ? lt : u
                      , yt = l ? lt : u;
                    h.showOverlay && nt._fadeIn(h.fadeIn, vt);
                    l && w._fadeIn(h.fadeIn, yt)
                } else
                    h.showOverlay && nt.show(),
                    l && w.show(),
                    h.onBlock && h.onBlock();
                c(1, s, h);
                p ? (t = w[0],
                i = n(h.focusableElements, t),
                h.focusInput && setTimeout(a, 20)) : y(w[0], h.centerX, h.centerY);
                h.timeout && (at = setTimeout(function() {
                    p ? n.unblockUI(h) : n(s).unblock(h)
                }, h.timeout),
                n(s).data("blockUI.timeout", at))
            }
        }
        function e(r, u) {
            var o, s = r == window, e = n(r), l = e.data("blockUI.history"), a = e.data("blockUI.timeout"), f;
            a && (clearTimeout(a),
            e.removeData("blockUI.timeout"));
            u = n.extend({}, n.blockUI.defaults, u || {});
            c(0, r, u);
            u.onUnblock === null && (u.onUnblock = e.data("blockUI.onUnblock"),
            e.removeData("blockUI.onUnblock"));
            f = s ? n("body").children().filter(".blockUI").add("body > .blockUI") : e.find(">.blockUI");
            u.cursorReset && (f.length > 1 && (f[1].style.cursor = u.cursorReset),
            f.length > 2 && (f[2].style.cursor = u.cursorReset));
            s && (t = i = null);
            u.fadeOut ? (o = f.length,
            f.stop().fadeOut(u.fadeOut, function() {
                --o == 0 && h(f, l, u, r)
            })) : h(f, l, u, r)
        }
        function h(t, i, r, u) {
            var f = n(u);
            if (!f.data("blockUI.isBlocked")) {
                if (t.each(function() {
                    this.parentNode && this.parentNode.removeChild(this)
                }),
                i && i.el && (i.el.style.display = i.display,
                i.el.style.position = i.position,
                i.parent && i.parent.appendChild(i.el),
                f.removeData("blockUI.history")),
                f.data("blockUI.static") && f.css("position", "static"),
                typeof r.onUnblock == "function")
                    r.onUnblock(u, r);
                var e = n(document.body)
                  , o = e.width()
                  , s = e[0].style.width;
                e.width(o - 1).width(o);
                e[0].style.width = s
            }
        }
        function c(i, r, u) {
            var f = r == window, o = n(r), e;
            (i || (!f || t) && (f || o.data("blockUI.isBlocked"))) && (o.data("blockUI.isBlocked", i),
            f && u.bindEvents && (!i || u.showOverlay)) && (e = "mousedown mouseup keydown keypress keyup touchstart touchend touchmove",
            i ? n(document).bind(e, u, l) : n(document).unbind(e, l))
        }
        function l(r) {
            var u, f;
            if (r.type === "keydown" && r.keyCode && r.keyCode == 9 && t && r.data.constrainTabKey) {
                var e = i
                  , s = !r.shiftKey && r.target === e[e.length - 1]
                  , o = r.shiftKey && r.target === e[0];
                if (s || o)
                    return setTimeout(function() {
                        a(o)
                    }, 10),
                    !1
            }
            if (u = r.data,
            f = n(r.target),
            f.hasClass("blockOverlay") && u.onOverlayClick)
                u.onOverlayClick(r);
            return f.parents("div." + u.blockMsgClass).length > 0 ? !0 : f.parents().children().filter("div.blockUI").length === 0
        }
        function a(n) {
            if (i) {
                var t = i[n === !0 ? i.length - 1 : 0];
                t && t.focus()
            }
        }
        function y(n, t, i) {
            var u = n.parentNode
              , f = n.style
              , e = (u.offsetWidth - n.offsetWidth) / 2 - r(u, "borderLeftWidth")
              , o = (u.offsetHeight - n.offsetHeight) / 2 - r(u, "borderTopWidth");
            t && (f.left = e > 0 ? e + "px" : "0");
            i && (f.top = o > 0 ? o + "px" : "0")
        }
        function r(t, i) {
            return parseInt(n.css(t, i), 10) || 0
        }
        var t, i;
        n.fn._fadeIn = n.fn.fadeIn;
        var u = n.noop || function() {}
          , f = /MSIE/.test(navigator.userAgent)
          , o = /MSIE 6.0/.test(navigator.userAgent) && !/MSIE 8.0/.test(navigator.userAgent)
          , p = document.documentMode || 0
          , v = n.isFunction(document.createElement("div").style.setExpression);
        n.blockUI = function(n) {
            s(window, n)
        }
        ;
        n.unblockUI = function(n) {
            e(window, n)
        }
        ;
        n.growlUI = function(t, i, r, u) {
            var f = n('<div class="growlUI"><\/div>'), e, o;
            t && f.append("<h1>" + t + "<\/h1>");
            i && f.append("<h2>" + i + "<\/h2>");
            r === undefined && (r = 3e3);
            e = function(t) {
                t = t || {};
                n.blockUI({
                    message: f,
                    fadeIn: typeof t.fadeIn != "undefined" ? t.fadeIn : 700,
                    fadeOut: typeof t.fadeOut != "undefined" ? t.fadeOut : 1e3,
                    timeout: typeof t.timeout != "undefined" ? t.timeout : r,
                    centerY: !1,
                    showOverlay: !1,
                    onUnblock: u,
                    css: n.blockUI.defaults.growlCSS
                })
            }
            ;
            e();
            o = f.css("opacity");
            f.mouseover(function() {
                e({
                    fadeIn: 0,
                    timeout: 3e4
                });
                var t = n(".blockMsg");
                t.stop();
                t.fadeTo(300, 1)
            }).mouseout(function() {
                n(".blockMsg").fadeOut(1e3)
            })
        }
        ;
        n.fn.block = function(t) {
            if (this[0] === window)
                return n.blockUI(t),
                this;
            var i = n.extend({}, n.blockUI.defaults, t || {});
            return this.each(function() {
                var t = n(this);
                i.ignoreIfBlocked && t.data("blockUI.isBlocked") || t.unblock({
                    fadeOut: 0
                })
            }),
            this.each(function() {
                n.css(this, "position") == "static" && (this.style.position = "relative",
                n(this).data("blockUI.static", !0));
                this.style.zoom = 1;
                s(this, t)
            })
        }
        ;
        n.fn.unblock = function(t) {
            return this[0] === window ? (n.unblockUI(t),
            this) : this.each(function() {
                e(this, t)
            })
        }
        ;
        n.blockUI.version = 2.66;
        n.blockUI.defaults = {
            message: "<h1>Please wait...<\/h1>",
            title: null,
            draggable: !0,
            theme: !1,
            css: {
                padding: 0,
                margin: 0,
                width: "30%",
                top: "40%",
                left: "35%",
                textAlign: "center",
                color: "#000",
                border: "3px solid #aaa",
                backgroundColor: "#fff",
                cursor: "wait"
            },
            themedCSS: {
                width: "30%",
                top: "40%",
                left: "35%"
            },
            overlayCSS: {
                backgroundColor: "#000",
                opacity: .6,
                cursor: "wait"
            },
            cursorReset: "default",
            growlCSS: {
                width: "350px",
                top: "10px",
                left: "",
                right: "10px",
                border: "none",
                padding: "5px",
                opacity: .6,
                cursor: "default",
                color: "#fff",
                backgroundColor: "#000",
                "-webkit-border-radius": "10px",
                "-moz-border-radius": "10px",
                "border-radius": "10px"
            },
            iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank",
            forceIframe: !1,
            baseZ: 1e3,
            centerX: !0,
            centerY: !0,
            allowBodyStretch: !0,
            bindEvents: !0,
            constrainTabKey: !0,
            fadeIn: 200,
            fadeOut: 400,
            timeout: 0,
            showOverlay: !0,
            focusInput: !0,
            focusableElements: ":input:enabled:visible",
            onBlock: null,
            onUnblock: null,
            onOverlayClick: null,
            quirksmodeOffsetHack: 4,
            blockMsgClass: "blockMsg",
            ignoreIfBlocked: !1
        };
        t = null;
        i = []
    }
    typeof define == "function" && define.amd && define.amd.jQuery ? define(["jquery"], n) : n(jQuery)
}();
!function(n) {
    "use strict";
    "function" == typeof define && define.amd ? define(["jquery"], n) : n("undefined" != typeof jQuery ? jQuery : window.Zepto)
}(function(n) {
    "use strict";
    function r(t) {
        var i = t.data;
        t.isDefaultPrevented() || (t.preventDefault(),
        n(t.target).ajaxSubmit(i))
    }
    function u(t) {
        var r = t.target, u = n(r), f, i, e;
        if (!u.is("[type=submit],[type=image]")) {
            if (f = u.closest("[type=submit]"),
            0 === f.length)
                return;
            r = f[0]
        }
        i = this;
        (i.clk = r,
        "image" == r.type) && (void 0 !== t.offsetX ? (i.clk_x = t.offsetX,
        i.clk_y = t.offsetY) : "function" == typeof n.fn.offset ? (e = u.offset(),
        i.clk_x = t.pageX - e.left,
        i.clk_y = t.pageY - e.top) : (i.clk_x = t.pageX - r.offsetLeft,
        i.clk_y = t.pageY - r.offsetTop));
        setTimeout(function() {
            i.clk = i.clk_x = i.clk_y = null
        }, 100)
    }
    function t() {
        if (n.fn.ajaxSubmit.debug) {
            var t = "[jquery.form] " + Array.prototype.join.call(arguments, "");
            window.console && window.console.log ? window.console.log(t) : window.opera && window.opera.postError && window.opera.postError(t)
        }
    }
    var i = {}, f;
    i.fileapi = void 0 !== n("<input type='file'/>").get(0).files;
    i.formdata = void 0 !== window.FormData;
    f = !!n.fn.prop;
    n.fn.attr2 = function() {
        if (!f)
            return this.attr.apply(this, arguments);
        var n = this.prop.apply(this, arguments);
        return n && n.jquery || "string" == typeof n ? n : this.attr.apply(this, arguments)
    }
    ;
    n.fn.ajaxSubmit = function(r) {
        function et(t) {
            for (var f, u = n.param(t, r.traditional).split("&"), o = u.length, e = [], i = 0; o > i; i++)
                u[i] = u[i].replace(/\+/g, " "),
                f = u[i].split("="),
                e.push([decodeURIComponent(f[0]), decodeURIComponent(f[1])]);
            return e
        }
        function ot(t) {
            for (var f, u, s, o = new FormData, i = 0; i < t.length; i++)
                o.append(t[i].name, t[i].value);
            if (r.extraData)
                for (f = et(r.extraData),
                i = 0; i < f.length; i++)
                    f[i] && o.append(f[i][0], f[i][1]);
            return r.data = null,
            u = n.extend(!0, {}, n.ajaxSettings, r, {
                contentType: !1,
                processData: !1,
                cache: !1,
                type: e || "POST"
            }),
            r.uploadProgress && (u.xhr = function() {
                var t = n.ajaxSettings.xhr();
                return t.upload && t.upload.addEventListener("progress", function(n) {
                    var t = 0
                      , i = n.loaded || n.position
                      , u = n.total;
                    n.lengthComputable && (t = Math.ceil(i / u * 100));
                    r.uploadProgress(n, i, u, t)
                }, !1),
                t
            }
            ),
            u.data = null,
            s = u.beforeSend,
            u.beforeSend = function(n, t) {
                t.data = r.formData ? r.formData : o;
                s && s.call(this, n, t)
            }
            ,
            n.ajax(u)
        }
        function d(i) {
            function ut(n) {
                var i = null;
                try {
                    n.contentWindow && (i = n.contentWindow.document)
                } catch (r) {
                    t("cannot get iframe.contentWindow document: " + r)
                }
                if (i)
                    return i;
                try {
                    i = n.contentDocument ? n.contentDocument : n.document
                } catch (r) {
                    t("cannot get iframe.contentDocument: " + r);
                    i = n.document
                }
                return i
            }
            function ft() {
                function f() {
                    try {
                        var n = ut(a).readyState;
                        t("state = " + n);
                        n && "uninitialized" == n.toLowerCase() && setTimeout(f, 50)
                    } catch (i) {
                        t("Server abort: ", i, " (", i.name, ")");
                        b(rt);
                        g && clearTimeout(g);
                        g = void 0
                    }
                }
                var s = u.attr2("target"), h = u.attr2("action"), y = u.attr("enctype") || u.attr("encoding") || "multipart/form-data", r, i, c;
                l.setAttribute("target", d);
                (!e || /post/i.test(e)) && l.setAttribute("method", "POST");
                h != o.url && l.setAttribute("action", o.url);
                o.skipEncodingOverride || e && !/post/i.test(e) || u.attr({
                    encoding: "multipart/form-data",
                    enctype: "multipart/form-data"
                });
                o.timeout && (g = setTimeout(function() {
                    it = !0;
                    b(et)
                }, o.timeout));
                r = [];
                try {
                    if (o.extraData)
                        for (i in o.extraData)
                            o.extraData.hasOwnProperty(i) && (n.isPlainObject(o.extraData[i]) && o.extraData[i].hasOwnProperty("name") && o.extraData[i].hasOwnProperty("value") ? r.push(n('<input type="hidden" name="' + o.extraData[i].name + '">').val(o.extraData[i].value).appendTo(l)[0]) : r.push(n('<input type="hidden" name="' + i + '">').val(o.extraData[i]).appendTo(l)[0]));
                    o.iframeTarget || v.appendTo("body");
                    a.attachEvent ? a.attachEvent("onload", b) : a.addEventListener("load", b, !1);
                    setTimeout(f, 15);
                    try {
                        l.submit()
                    } catch (p) {
                        c = document.createElement("form").submit;
                        c.apply(l)
                    }
                } finally {
                    l.setAttribute("action", h);
                    l.setAttribute("enctype", y);
                    s ? l.setAttribute("target", s) : u.removeAttr("target");
                    n(r).remove()
                }
            }
            function b(i) {
                var u, r, w, f, k, d, e, c, l;
                if (!s.aborted && !ct) {
                    if (h = ut(a),
                    h || (t("cannot access response document"),
                    i = rt),
                    i === et && s)
                        return s.abort("timeout"),
                        y.reject(s, "timeout"),
                        void 0;
                    if (i == rt && s)
                        return s.abort("server abort"),
                        y.reject(s, "error", "server abort"),
                        void 0;
                    if (h && h.location.href != o.iframeSrc || it) {
                        a.detachEvent ? a.detachEvent("onload", b) : a.removeEventListener("load", b, !1);
                        r = "success";
                        try {
                            if (it)
                                throw "timeout";
                            if (w = "xml" == o.dataType || h.XMLDocument || n.isXMLDoc(h),
                            t("isXml=" + w),
                            !w && window.opera && (null === h.body || !h.body.innerHTML) && --lt)
                                return t("requeing onLoad callback, DOM not available"),
                                setTimeout(b, 250),
                                void 0;
                            f = h.body ? h.body : h.documentElement;
                            s.responseText = f ? f.innerHTML : null;
                            s.responseXML = h.XMLDocument ? h.XMLDocument : h;
                            w && (o.dataType = "xml");
                            s.getResponseHeader = function(n) {
                                var t = {
                                    "content-type": o.dataType
                                };
                                return t[n.toLowerCase()]
                            }
                            ;
                            f && (s.status = Number(f.getAttribute("status")) || s.status,
                            s.statusText = f.getAttribute("statusText") || s.statusText);
                            k = (o.dataType || "").toLowerCase();
                            d = /(json|script|text)/.test(k);
                            d || o.textarea ? (e = h.getElementsByTagName("textarea")[0],
                            e ? (s.responseText = e.value,
                            s.status = Number(e.getAttribute("status")) || s.status,
                            s.statusText = e.getAttribute("statusText") || s.statusText) : d && (c = h.getElementsByTagName("pre")[0],
                            l = h.getElementsByTagName("body")[0],
                            c ? s.responseText = c.textContent ? c.textContent : c.innerText : l && (s.responseText = l.textContent ? l.textContent : l.innerText))) : "xml" == k && !s.responseXML && s.responseText && (s.responseXML = at(s.responseText));
                            try {
                                ht = yt(s, k, o)
                            } catch (nt) {
                                r = "parsererror";
                                s.error = u = nt || r
                            }
                        } catch (nt) {
                            t("error caught: ", nt);
                            r = "error";
                            s.error = u = nt || r
                        }
                        s.aborted && (t("upload aborted"),
                        r = null);
                        s.status && (r = s.status >= 200 && s.status < 300 || 304 === s.status ? "success" : "error");
                        "success" === r ? (o.success && o.success.call(o.context, ht, "success", s),
                        y.resolve(s.responseText, "success", s),
                        p && n.event.trigger("ajaxSuccess", [s, o])) : r && (void 0 === u && (u = s.statusText),
                        o.error && o.error.call(o.context, s, r, u),
                        y.reject(s, "error", u),
                        p && n.event.trigger("ajaxError", [s, o, u]));
                        p && n.event.trigger("ajaxComplete", [s, o]);
                        p && !--n.active && n.event.trigger("ajaxStop");
                        o.complete && o.complete.call(o.context, s, r);
                        ct = !0;
                        o.timeout && clearTimeout(g);
                        setTimeout(function() {
                            o.iframeTarget ? v.attr("src", o.iframeSrc) : v.remove();
                            s.responseXML = null
                        }, 100)
                    }
                }
            }
            var tt, nt, o, p, d, v, a, s, k, w, it, g, l = u[0], y = n.Deferred();
            if (y.abort = function(n) {
                s.abort(n)
            }
            ,
            i)
                for (nt = 0; nt < c.length; nt++)
                    tt = n(c[nt]),
                    f ? tt.prop("disabled", !1) : tt.removeAttr("disabled");
            if (o = n.extend(!0, {}, n.ajaxSettings, r),
            o.context = o.context || o,
            d = "jqFormIO" + (new Date).getTime(),
            o.iframeTarget ? (v = n(o.iframeTarget),
            w = v.attr2("name"),
            w ? d = w : v.attr2("name", d)) : (v = n('<iframe name="' + d + '" src="' + o.iframeSrc + '" />'),
            v.css({
                position: "absolute",
                top: "-1000px",
                left: "-1000px"
            })),
            a = v[0],
            s = {
                aborted: 0,
                responseText: null,
                responseXML: null,
                status: 0,
                statusText: "n/a",
                getAllResponseHeaders: function() {},
                getResponseHeader: function() {},
                setRequestHeader: function() {},
                abort: function(i) {
                    var r = "timeout" === i ? "timeout" : "aborted";
                    t("aborting upload... " + r);
                    this.aborted = 1;
                    try {
                        a.contentWindow.document.execCommand && a.contentWindow.document.execCommand("Stop")
                    } catch (u) {}
                    v.attr("src", o.iframeSrc);
                    s.error = r;
                    o.error && o.error.call(o.context, s, r, i);
                    p && n.event.trigger("ajaxError", [s, o, r]);
                    o.complete && o.complete.call(o.context, s, r)
                }
            },
            p = o.global,
            p && 0 == n.active++ && n.event.trigger("ajaxStart"),
            p && n.event.trigger("ajaxSend", [s, o]),
            o.beforeSend && o.beforeSend.call(o.context, s, o) === !1)
                return o.global && n.active--,
                y.reject(),
                y;
            if (s.aborted)
                return y.reject(),
                y;
            k = l.clk;
            k && (w = k.name,
            w && !k.disabled && (o.extraData = o.extraData || {},
            o.extraData[w] = k.value,
            "image" == k.type && (o.extraData[w + ".x"] = l.clk_x,
            o.extraData[w + ".y"] = l.clk_y)));
            var et = 1
              , rt = 2
              , ot = n("meta[name=csrf-token]").attr("content")
              , st = n("meta[name=csrf-param]").attr("content");
            st && ot && (o.extraData = o.extraData || {},
            o.extraData[st] = ot);
            o.forceSync ? ft() : setTimeout(ft, 10);
            var ht, h, ct, lt = 50, at = n.parseXML || function(n, t) {
                return window.ActiveXObject ? (t = new ActiveXObject("Microsoft.XMLDOM"),
                t.async = "false",
                t.loadXML(n)) : t = (new DOMParser).parseFromString(n, "text/xml"),
                t && t.documentElement && "parsererror" != t.documentElement.nodeName ? t : null
            }
            , vt = n.parseJSON || function(a) {
                return window.eval("(" + a + ")")
            }
            , yt = function(t, i, r) {
                var f = t.getResponseHeader("content-type") || ""
                  , e = "xml" === i || !i && f.indexOf("xml") >= 0
                  , u = e ? t.responseXML : t.responseText;
                return e && "parsererror" === u.documentElement.nodeName && n.error && n.error("parsererror"),
                r && r.dataFilter && (u = r.dataFilter(u, i)),
                "string" == typeof u && ("json" === i || !i && f.indexOf("json") >= 0 ? u = vt(u) : ("script" === i || !i && f.indexOf("javascript") >= 0) && n.globalEval(u)),
                u
            };
            return y
        }
        var e, b, o, u, a, v, y, c, s, l, h, g, nt, tt, p, ft, w;
        if (!this.length)
            return t("ajaxSubmit: skipping submit process - no element selected"),
            this;
        if (u = this,
        "function" == typeof r ? r = {
            success: r
        } : void 0 === r && (r = {}),
        e = r.type || this.attr2("method"),
        b = r.url || this.attr2("action"),
        o = "string" == typeof b ? n.trim(b) : "",
        o = o || window.location.href || "",
        o && (o = (o.match(/^([^#]+)/) || [])[1]),
        r = n.extend(!0, {
            url: o,
            success: n.ajaxSettings.success,
            type: e || n.ajaxSettings.type,
            iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank"
        }, r),
        a = {},
        this.trigger("form-pre-serialize", [this, r, a]),
        a.veto)
            return t("ajaxSubmit: submit vetoed via form-pre-serialize trigger"),
            this;
        if (r.beforeSerialize && r.beforeSerialize(this, r) === !1)
            return t("ajaxSubmit: submit aborted via beforeSerialize callback"),
            this;
        if (v = r.traditional,
        void 0 === v && (v = n.ajaxSettings.traditional),
        c = [],
        s = this.formToArray(r.semantic, c),
        r.data && (r.extraData = r.data,
        y = n.param(r.data, v)),
        r.beforeSubmit && r.beforeSubmit(s, this, r) === !1)
            return t("ajaxSubmit: submit aborted via beforeSubmit callback"),
            this;
        if (this.trigger("form-submit-validate", [s, this, r, a]),
        a.veto)
            return t("ajaxSubmit: submit vetoed via form-submit-validate trigger"),
            this;
        l = n.param(s, v);
        y && (l = l ? l + "&" + y : y);
        "GET" == r.type.toUpperCase() ? (r.url += (r.url.indexOf("?") >= 0 ? "&" : "?") + l,
        r.data = null) : r.data = l;
        h = [];
        (r.resetForm && h.push(function() {
            u.resetForm()
        }),
        r.clearForm && h.push(function() {
            u.clearForm(r.includeHidden)
        }),
        !r.dataType && r.target) ? (g = r.success || function() {}
        ,
        h.push(function(t) {
            var i = r.replaceTarget ? "replaceWith" : "html";
            n(r.target)[i](t).each(g, arguments)
        })) : r.success && h.push(r.success);
        (r.success = function(n, t, i) {
            for (var e = r.context || this, f = 0, o = h.length; o > f; f++)
                h[f].apply(e, [n, t, i || u, u])
        }
        ,
        r.error) && (nt = r.error,
        r.error = function(n, t, i) {
            var f = r.context || this;
            nt.apply(f, [n, t, i, u])
        }
        );
        r.complete && (tt = r.complete,
        r.complete = function(n, t) {
            var i = r.context || this;
            tt.apply(i, [n, t, u])
        }
        );
        var st = n("input[type=file]:enabled", this).filter(function() {
            return "" !== n(this).val()
        })
          , it = st.length > 0
          , rt = "multipart/form-data"
          , ut = u.attr("enctype") == rt || u.attr("encoding") == rt
          , k = i.fileapi && i.formdata;
        for (t("fileAPI :" + k),
        ft = (it || ut) && !k,
        r.iframe !== !1 && (r.iframe || ft) ? r.closeKeepAlive ? n.get(r.closeKeepAlive, function() {
            p = d(s)
        }) : p = d(s) : p = (it || ut) && k ? ot(s) : n.ajax(r),
        u.removeData("jqxhr").data("jqxhr", p),
        w = 0; w < c.length; w++)
            c[w] = null;
        return this.trigger("form-submit-notify", [this, r]),
        this
    }
    ;
    n.fn.ajaxForm = function(i) {
        if (i = i || {},
        i.delegation = i.delegation && n.isFunction(n.fn.on),
        !i.delegation && 0 === this.length) {
            var f = {
                s: this.selector,
                c: this.context
            };
            return !n.isReady && f.s ? (t("DOM not ready, queuing ajaxForm"),
            n(function() {
                n(f.s, f.c).ajaxForm(i)
            }),
            this) : (t("terminating; zero elements found by selector" + (n.isReady ? "" : " (DOM not ready)")),
            this)
        }
        return i.delegation ? (n(document).off("submit.form-plugin", this.selector, r).off("click.form-plugin", this.selector, u).on("submit.form-plugin", this.selector, i, r).on("click.form-plugin", this.selector, i, u),
        this) : this.ajaxFormUnbind().bind("submit.form-plugin", i, r).bind("click.form-plugin", i, u)
    }
    ;
    n.fn.ajaxFormUnbind = function() {
        return this.unbind("submit.form-plugin click.form-plugin")
    }
    ;
    n.fn.formToArray = function(t, r) {
        var e = [], l, h, f, c, u, b, k, a, p, v;
        if (0 === this.length)
            return e;
        var y, o = this[0], w = this.attr("id"), s = t ? o.getElementsByTagName("*") : o.elements;
        if (s && !/MSIE 8/.test(navigator.userAgent) && (s = n(s).get()),
        w && (y = n(":input[form=" + w + "]").get(),
        y.length && (s = (s || []).concat(y))),
        !s || !s.length)
            return e;
        for (l = 0,
        b = s.length; b > l; l++)
            if (u = s[l],
            f = u.name,
            f && !u.disabled)
                if (t && o.clk && "image" == u.type)
                    o.clk == u && (e.push({
                        name: f,
                        value: n(u).val(),
                        type: u.type
                    }),
                    e.push({
                        name: f + ".x",
                        value: o.clk_x
                    }, {
                        name: f + ".y",
                        value: o.clk_y
                    }));
                else if (c = n.fieldValue(u, !0),
                c && c.constructor == Array)
                    for (r && r.push(u),
                    h = 0,
                    k = c.length; k > h; h++)
                        e.push({
                            name: f,
                            value: c[h]
                        });
                else if (i.fileapi && "file" == u.type)
                    if (r && r.push(u),
                    a = u.files,
                    a.length)
                        for (h = 0; h < a.length; h++)
                            e.push({
                                name: f,
                                value: a[h],
                                type: u.type
                            });
                    else
                        e.push({
                            name: f,
                            value: "",
                            type: u.type
                        });
                else
                    null !== c && "undefined" != typeof c && (r && r.push(u),
                    e.push({
                        name: f,
                        value: c,
                        type: u.type,
                        required: u.required
                    }));
        return !t && o.clk && (p = n(o.clk),
        v = p[0],
        f = v.name,
        f && !v.disabled && "image" == v.type && (e.push({
            name: f,
            value: p.val()
        }),
        e.push({
            name: f + ".x",
            value: o.clk_x
        }, {
            name: f + ".y",
            value: o.clk_y
        }))),
        e
    }
    ;
    n.fn.formSerialize = function(t) {
        return n.param(this.formToArray(t))
    }
    ;
    n.fn.fieldSerialize = function(t) {
        var i = [];
        return this.each(function() {
            var f = this.name, r, u, e;
            if (f)
                if (r = n.fieldValue(this, t),
                r && r.constructor == Array)
                    for (u = 0,
                    e = r.length; e > u; u++)
                        i.push({
                            name: f,
                            value: r[u]
                        });
                else
                    null !== r && "undefined" != typeof r && i.push({
                        name: this.name,
                        value: r
                    })
        }),
        n.param(i)
    }
    ;
    n.fn.fieldValue = function(t) {
        for (var f, i, r = [], u = 0, e = this.length; e > u; u++)
            f = this[u],
            i = n.fieldValue(f, t),
            null !== i && "undefined" != typeof i && (i.constructor != Array || i.length) && (i.constructor == Array ? n.merge(r, i) : r.push(i));
        return r
    }
    ;
    n.fieldValue = function(t, i) {
        var a = t.name, u = t.type, h = t.tagName.toLowerCase(), e, r, f;
        if (void 0 === i && (i = !0),
        i && (!a || t.disabled || "reset" == u || "button" == u || ("checkbox" == u || "radio" == u) && !t.checked || ("submit" == u || "image" == u) && t.form && t.form.clk != t || "select" == h && -1 == t.selectedIndex))
            return null;
        if ("select" == h) {
            if (e = t.selectedIndex,
            0 > e)
                return null;
            for (var c = [], l = t.options, o = "select-one" == u, v = o ? e + 1 : l.length, s = o ? e : 0; v > s; s++)
                if (r = l[s],
                r.selected) {
                    if (f = r.value,
                    f || (f = r.attributes && r.attributes.value && !r.attributes.value.specified ? r.text : r.value),
                    o)
                        return f;
                    c.push(f)
                }
            return c
        }
        return n(t).val()
    }
    ;
    n.fn.clearForm = function(t) {
        return this.each(function() {
            n("input,select,textarea", this).clearFields(t)
        })
    }
    ;
    n.fn.clearFields = n.fn.clearInputs = function(t) {
        var i = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
        return this.each(function() {
            var r = this.type
              , u = this.tagName.toLowerCase();
            i.test(r) || "textarea" == u ? this.value = "" : "checkbox" == r || "radio" == r ? this.checked = !1 : "select" == u ? this.selectedIndex = -1 : "file" == r ? /MSIE/.test(navigator.userAgent) ? n(this).replaceWith(n(this).clone(!0)) : n(this).val("") : t && (t === !0 && /hidden/.test(r) || "string" == typeof t && n(this).is(t)) && (this.value = "")
        })
    }
    ;
    n.fn.resetForm = function() {
        return this.each(function() {
            "function" != typeof this.reset && ("object" != typeof this.reset || this.reset.nodeType) || this.reset()
        })
    }
    ;
    n.fn.enable = function(n) {
        return void 0 === n && (n = !0),
        this.each(function() {
            this.disabled = !n
        })
    }
    ;
    n.fn.selected = function(t) {
        return void 0 === t && (t = !0),
        this.each(function() {
            var r = this.type, i;
            "checkbox" == r || "radio" == r ? this.checked = t : "option" == this.tagName.toLowerCase() && (i = n(this).parent("select"),
            t && i[0] && "select-one" == i[0].type && i.find("option").selected(!1),
            this.selected = t)
        })
    }
    ;
    n.fn.ajaxSubmit.debug = !1
}),
function(n, t, i) {
    function y(n) {
        var t = {}
          , r = /^jQuery\d+$/;
        return i.each(n.attributes, function(n, i) {
            i.specified && !r.test(i.name) && (t[i.name] = i.value)
        }),
        t
    }
    function e(n, t) {
        var u = this
          , r = i(u);
        if (u.value == r.attr("placeholder") && r.hasClass("placeholder"))
            if (r.data("placeholder-password")) {
                if (r = r.hide().next().show().attr("id", r.removeAttr("id").data("placeholder-id")),
                n === !0)
                    return r[0].value = t;
                r.focus()
            } else
                u.value = "",
                r.removeClass("placeholder"),
                u == v() && u.select()
    }
    function s() {
        var t, r = this, n = i(r), u = this.id;
        if (r.value == "") {
            if (r.type == "password") {
                if (!n.data("placeholder-textinput")) {
                    try {
                        t = n.clone().attr({
                            type: "text"
                        })
                    } catch (f) {
                        t = i("<input>").attr(i.extend(y(this), {
                            type: "text"
                        }))
                    }
                    t.removeAttr("name").data({
                        "placeholder-password": n,
                        "placeholder-id": u
                    }).bind("focus.placeholder", e);
                    n.data({
                        "placeholder-textinput": t,
                        "placeholder-id": u
                    }).before(t)
                }
                n = n.removeAttr("id").hide().prev().attr("id", u).show()
            }
            n.addClass("placeholder");
            n[0].value = n.attr("placeholder")
        } else
            n.removeClass("placeholder")
    }
    function v() {
        try {
            return t.activeElement
        } catch (n) {}
    }
    var h = Object.prototype.toString.call(n.operamini) == "[object OperaMini]", f = "placeholder"in t.createElement("input") && !h, o = "placeholder"in t.createElement("textarea") && !h, c = i.fn, l = i.valHooks, a = i.propHooks, u, r;
    f && o ? (r = c.placeholder = function() {
        return this
    }
    ,
    r.input = r.textarea = !0) : (r = c.placeholder = function() {
        var n = this;
        return n.filter((f ? "textarea" : ":input") + "[placeholder]").not(".placeholder").bind({
            "focus.placeholder": e,
            "blur.placeholder": s
        }).data("placeholder-enabled", !0).trigger("blur.placeholder"),
        n
    }
    ,
    r.input = f,
    r.textarea = o,
    u = {
        get: function(n) {
            var t = i(n)
              , r = t.data("placeholder-password");
            return r ? r[0].value : t.data("placeholder-enabled") && t.hasClass("placeholder") ? "" : n.value
        },
        set: function(n, t) {
            var r = i(n)
              , u = r.data("placeholder-password");
            return u ? u[0].value = t : r.data("placeholder-enabled") ? (t == "" ? (n.value = t,
            n != v() && s.call(n)) : r.hasClass("placeholder") ? e.call(n, !0, t) || (n.value = t) : n.value = t,
            r) : n.value = t
        }
    },
    f || (l.input = u,
    a.value = u),
    o || (l.textarea = u,
    a.value = u),
    i(function() {
        i(t).delegate("form", "submit.placeholder", function() {
            var n = i(".placeholder", this).each(e);
            setTimeout(function() {
                n.each(s)
            }, 10)
        })
    }),
    i(n).bind("beforeunload.placeholder", function() {
        i(".placeholder").each(function() {
            this.value = ""
        })
    }))
}(this, document, jQuery),
function(n) {
    if (typeof define == "function" && define.amd)
        define(["jquery"], n);
    else if (typeof module == "object" && module.exports) {
        var t = require("jquery");
        module.exports = n(t)
    } else
        n(jQuery)
}(function(n) {
    if (typeof n == "undefined")
        throw new Error("jQuery.textcomplete requires jQuery");
    return +function(n) {
        "use strict";
        var t = function(n) {
            console.warn && console.warn(n)
        }
          , i = 1;
        n.fn.textcomplete = function(r, u) {
            var f = Array.prototype.slice.call(arguments);
            return this.each(function() {
                var s = this
                  , o = n(this)
                  , e = o.data("textComplete");
                if (e || (u || (u = {}),
                u._oid = i++,
                e = new n.fn.textcomplete.Completer(this,u),
                o.data("textComplete", e)),
                typeof r == "string") {
                    if (!e)
                        return;
                    f.shift();
                    e[r].apply(e, f);
                    r === "destroy" && o.removeData("textComplete")
                } else
                    n.each(r, function(i) {
                        n.each(["header", "footer", "placement", "maxCount"], function(n) {
                            i[n] && (e.option[n] = i[n],
                            t(n + "as a strategy param is deprecated. Use option."),
                            delete i[n])
                        })
                    }),
                    e.register(n.fn.textcomplete.Strategy.parse(r, {
                        el: s,
                        $el: o
                    }))
            })
        }
    }(n),
    +function(n) {
        "use strict";
        function t(i, r) {
            if (this.$el = n(i),
            this.id = "textcomplete" + f++,
            this.strategies = [],
            this.views = [],
            this.option = n.extend({}, t._getDefaults(), r),
            !this.$el.is("input[type=text]") && !this.$el.is("input[type=search]") && !this.$el.is("textarea") && !i.isContentEditable && i.contentEditable != "true")
                throw new Error("textcomplete must be called on a Textarea or a ContentEditable.");
            if (i === document.activeElement)
                this.initialize();
            else {
                var u = this;
                this.$el.one("focus." + this.id, function() {
                    u.initialize()
                })
            }
        }
        var i = function(n) {
            var i, t;
            return function() {
                var r = Array.prototype.slice.call(arguments), u;
                if (i) {
                    t = r;
                    return
                }
                i = !0;
                u = this;
                r.unshift(function f() {
                    if (t) {
                        var r = t;
                        t = undefined;
                        r.unshift(f);
                        n.apply(u, r)
                    } else
                        i = !1
                });
                n.apply(this, r)
            }
        }
          , r = function(n) {
            return Object.prototype.toString.call(n) === "[object String]"
        }
          , u = function(n) {
            return Object.prototype.toString.call(n) === "[object Function]"
        }
          , f = 0;
        t._getDefaults = function() {
            return t.DEFAULTS || (t.DEFAULTS = {
                appendTo: n("body"),
                zIndex: "100"
            }),
            t.DEFAULTS
        }
        ;
        n.extend(t.prototype, {
            id: null,
            option: null,
            strategies: null,
            adapter: null,
            dropdown: null,
            $el: null,
            initialize: function() {
                var t = this.$el.get(0), i, r;
                this.dropdown = new n.fn.textcomplete.Dropdown(t,this,this.option);
                this.option.adapter ? i = this.option.adapter : (r = this.$el.is("textarea") || this.$el.is("input[type=text]") || this.$el.is("input[type=search]") ? typeof t.selectionEnd == "number" ? "Textarea" : "IETextarea" : "ContentEditable",
                i = n.fn.textcomplete[r]);
                this.adapter = new i(t,this,this.option)
            },
            destroy: function() {
                this.$el.off("." + this.id);
                this.adapter && this.adapter.destroy();
                this.dropdown && this.dropdown.destroy();
                this.$el = this.adapter = this.dropdown = null
            },
            deactivate: function() {
                this.dropdown && this.dropdown.deactivate()
            },
            trigger: function(n, t) {
                var i, r;
                if (this.dropdown || this.initialize(),
                n != null || (n = this.adapter.getTextFromHeadToCaret()),
                i = this._extractSearchQuery(n),
                i.length) {
                    if (r = i[1],
                    t && this._term === r && r !== "")
                        return;
                    this._term = r;
                    this._search.apply(this, i)
                } else
                    this._term = null,
                    this.dropdown.deactivate()
            },
            fire: function(n) {
                var t = Array.prototype.slice.call(arguments, 1);
                return this.$el.trigger(n, t),
                this
            },
            register: function(n) {
                Array.prototype.push.apply(this.strategies, n)
            },
            select: function(n, t, i) {
                this._term = null;
                this.adapter.select(n, t, i);
                this.fire("change").fire("textComplete:select", n, t);
                this.adapter.focus()
            },
            _clearAtNext: !0,
            _term: null,
            _extractSearchQuery: function(n) {
                for (var t, i, o, e, f = 0; f < this.strategies.length; f++)
                    if (t = this.strategies[f],
                    i = t.context(n),
                    (i || i === "") && (o = u(t.match) ? t.match(n) : t.match,
                    r(i) && (n = i),
                    e = n.match(o),
                    e))
                        return [t, e[t.index], e];
                return []
            },
            _search: i(function(n, t, i, r) {
                var u = this;
                t.search(i, function(r, f) {
                    u.dropdown.shown || u.dropdown.activate();
                    u._clearAtNext && (u.dropdown.clear(),
                    u._clearAtNext = !1);
                    u.dropdown.setPosition(u.adapter.getCaretPosition());
                    u.dropdown.render(u._zip(r, t, i));
                    f || (n(),
                    u._clearAtNext = !0)
                }, r)
            }),
            _zip: function(t, i, r) {
                return n.map(t, function(n) {
                    return {
                        value: n,
                        strategy: i,
                        term: r
                    }
                })
            }
        });
        n.fn.textcomplete.Completer = t
    }(n),
    +function(n) {
        "use strict";
        function r(t, i, f) {
            this.$el = r.createElement(f);
            this.completer = i;
            this.id = i.id + "dropdown";
            this._data = [];
            this.$inputEl = n(t);
            this.option = f;
            f.listPosition && (this.setPosition = f.listPosition);
            f.height && this.$el.height(f.height);
            var e = this;
            n.each(["maxCount", "placement", "footer", "header", "noResultsMessage", "className"], function(n, t) {
                f[t] != null && (e[t] = f[t])
            });
            this._bindEvents(t);
            u[this.id] = this
        }
        var i = n(window), f = function(n, t) {
            for (var r, u = t.strategy.idProperty, i = 0; i < n.length; i++)
                if (r = n[i],
                r.strategy === t.strategy)
                    if (u) {
                        if (r.value[u] === t.value[u])
                            return !0
                    } else if (r.value === t.value)
                        return !0;
            return !1
        }, u = {}, t;
        n(document).on("click", function(t) {
            var i = t.originalEvent && t.originalEvent.keepTextCompleteDropdown;
            n.each(u, function(n, t) {
                n !== i && t.deactivate()
            })
        });
        t = {
            SKIP_DEFAULT: 0,
            KEY_UP: 1,
            KEY_DOWN: 2,
            KEY_ENTER: 3,
            KEY_PAGEUP: 4,
            KEY_PAGEDOWN: 5,
            KEY_ESCAPE: 6
        };
        n.extend(r, {
            createElement: function(t) {
                var i = t.appendTo;
                return i instanceof n || (i = n(i)),
                n("<ul><\/ul>").addClass("dropdown-menu textcomplete-dropdown").attr("id", "textcomplete-dropdown-" + t._oid).css({
                    display: "none",
                    left: 0,
                    position: "absolute",
                    zIndex: t.zIndex
                }).appendTo(i)
            }
        });
        n.extend(r.prototype, {
            $el: null,
            $inputEl: null,
            completer: null,
            footer: null,
            header: null,
            id: null,
            maxCount: 10,
            placement: "",
            shown: !1,
            data: [],
            className: "",
            destroy: function() {
                this.deactivate();
                this.$el.off("." + this.id);
                this.$inputEl.off("." + this.id);
                this.clear();
                this.$el.remove();
                this.$el = this.$inputEl = this.completer = null;
                delete u[this.id]
            },
            render: function(t) {
                var u = this._buildContents(t), i = n.map(this.data, function(n) {
                    return n.value
                }), r;
                this.data.length ? (r = t[0].strategy,
                r.id ? this.$el.attr("data-strategy", r.id) : this.$el.removeAttr("data-strategy"),
                this._renderHeader(i),
                this._renderFooter(i),
                u && (this._renderContents(u),
                this._fitToBottom(),
                this._fitToRight(),
                this._activateIndexedItem()),
                this._setScroll()) : this.noResultsMessage ? this._renderNoResultsMessage(i) : this.shown && this.deactivate()
            },
            setPosition: function(t) {
                var r = "absolute";
                return this.$inputEl.add(this.$inputEl.parents()).each(function() {
                    return n(this).css("position") === "absolute" ? !1 : n(this).css("position") === "fixed" ? (t.top -= i.scrollTop(),
                    t.left -= i.scrollLeft(),
                    r = "fixed",
                    !1) : void 0
                }),
                this.$el.css(this._applyPlacement(t)),
                this.$el.css({
                    position: r
                }),
                this
            },
            clear: function() {
                this.$el.html("");
                this.data = [];
                this._index = 0;
                this._$header = this._$footer = this._$noResultsMessage = null
            },
            activate: function() {
                return this.shown || (this.clear(),
                this.$el.show(),
                this.className && this.$el.addClass(this.className),
                this.completer.fire("textComplete:show"),
                this.shown = !0),
                this
            },
            deactivate: function() {
                return this.shown && (this.$el.hide(),
                this.className && this.$el.removeClass(this.className),
                this.completer.fire("textComplete:hide"),
                this.shown = !1),
                this
            },
            isUp: function(n) {
                return n.keyCode === 38 || n.ctrlKey && n.keyCode === 80
            },
            isDown: function(n) {
                return n.keyCode === 40 || n.ctrlKey && n.keyCode === 78
            },
            isEnter: function(n) {
                var t = n.ctrlKey || n.altKey || n.metaKey || n.shiftKey;
                return !t && (n.keyCode === 13 || n.keyCode === 9 || this.option.completeOnSpace === !0 && n.keyCode === 32)
            },
            isPageup: function(n) {
                return n.keyCode === 33
            },
            isPagedown: function(n) {
                return n.keyCode === 34
            },
            isEscape: function(n) {
                return n.keyCode === 27
            },
            _data: null,
            _index: null,
            _$header: null,
            _$noResultsMessage: null,
            _$footer: null,
            _bindEvents: function() {
                this.$el.on("mousedown." + this.id, ".textcomplete-item", n.proxy(this._onClick, this));
                this.$el.on("touchstart." + this.id, ".textcomplete-item", n.proxy(this._onClick, this));
                this.$el.on("mouseover." + this.id, ".textcomplete-item", n.proxy(this._onMouseover, this));
                this.$inputEl.on("keydown." + this.id, n.proxy(this._onKeydown, this))
            },
            _onClick: function(t) {
                var i = n(t.target), r, u;
                t.preventDefault();
                t.originalEvent.keepTextCompleteDropdown = this.id;
                i.hasClass("textcomplete-item") || (i = i.closest(".textcomplete-item"));
                r = this.data[parseInt(i.data("index"), 10)];
                this.completer.select(r.value, r.strategy, t);
                u = this;
                setTimeout(function() {
                    u.deactivate();
                    t.type === "touchstart" && u.$inputEl.focus()
                }, 0)
            },
            _onMouseover: function(t) {
                var i = n(t.target);
                t.preventDefault();
                i.hasClass("textcomplete-item") || (i = i.closest(".textcomplete-item"));
                this._index = parseInt(i.data("index"), 10);
                this._activateIndexedItem()
            },
            _onKeydown: function(i) {
                if (this.shown) {
                    var r;
                    n.isFunction(this.option.onKeydown) && (r = this.option.onKeydown(i, t));
                    r == null && (r = this._defaultKeydown(i));
                    switch (r) {
                    case t.KEY_UP:
                        i.preventDefault();
                        this._up();
                        break;
                    case t.KEY_DOWN:
                        i.preventDefault();
                        this._down();
                        break;
                    case t.KEY_ENTER:
                        i.preventDefault();
                        this._enter(i);
                        break;
                    case t.KEY_PAGEUP:
                        i.preventDefault();
                        this._pageup();
                        break;
                    case t.KEY_PAGEDOWN:
                        i.preventDefault();
                        this._pagedown();
                        break;
                    case t.KEY_ESCAPE:
                        i.preventDefault();
                        this.deactivate()
                    }
                }
            },
            _defaultKeydown: function(n) {
                return this.isUp(n) ? t.KEY_UP : this.isDown(n) ? t.KEY_DOWN : this.isEnter(n) ? t.KEY_ENTER : this.isPageup(n) ? t.KEY_PAGEUP : this.isPagedown(n) ? t.KEY_PAGEDOWN : this.isEscape(n) ? t.KEY_ESCAPE : void 0
            },
            _up: function() {
                this._index === 0 ? this._index = this.data.length - 1 : this._index -= 1;
                this._activateIndexedItem();
                this._setScroll()
            },
            _down: function() {
                this._index === this.data.length - 1 ? this._index = 0 : this._index += 1;
                this._activateIndexedItem();
                this._setScroll()
            },
            _enter: function(n) {
                var t = this.data[parseInt(this._getActiveElement().data("index"), 10)];
                this.completer.select(t.value, t.strategy, n);
                this.deactivate()
            },
            _pageup: function() {
                var t = 0
                  , i = this._getActiveElement().position().top - this.$el.innerHeight();
                this.$el.children().each(function(r) {
                    if (n(this).position().top + n(this).outerHeight() > i)
                        return t = r,
                        !1
                });
                this._index = t;
                this._activateIndexedItem();
                this._setScroll()
            },
            _pagedown: function() {
                var t = this.data.length - 1
                  , i = this._getActiveElement().position().top + this.$el.innerHeight();
                this.$el.children().each(function(r) {
                    if (n(this).position().top > i)
                        return t = r,
                        !1
                });
                this._index = t;
                this._activateIndexedItem();
                this._setScroll()
            },
            _activateIndexedItem: function() {
                this.$el.find(".textcomplete-item.active").removeClass("active");
                this._getActiveElement().addClass("active")
            },
            _getActiveElement: function() {
                return this.$el.children(".textcomplete-item:nth(" + this._index + ")")
            },
            _setScroll: function() {
                var t = this._getActiveElement()
                  , n = t.position().top
                  , i = t.outerHeight()
                  , r = this.$el.innerHeight()
                  , u = this.$el.scrollTop();
                this._index === 0 || this._index == this.data.length - 1 || n < 0 ? this.$el.scrollTop(n + u) : n + i > r && this.$el.scrollTop(n + i + u - r)
            },
            _buildContents: function(n) {
                for (var t, u, r = "", i = 0; i < n.length; i++) {
                    if (this.data.length === this.maxCount)
                        break;
                    (t = n[i],
                    f(this.data, t)) || (u = this.data.length,
                    this.data.push(t),
                    r += '<li class="textcomplete-item" data-index="' + u + '"><a>',
                    r += t.strategy.template(t.value, t.term),
                    r += "<\/a><\/li>")
                }
                return r
            },
            _renderHeader: function(t) {
                if (this.header) {
                    this._$header || (this._$header = n('<li class="textcomplete-header"><\/li>').prependTo(this.$el));
                    var i = n.isFunction(this.header) ? this.header(t) : this.header;
                    this._$header.html(i)
                }
            },
            _renderFooter: function(t) {
                if (this.footer) {
                    this._$footer || (this._$footer = n('<li class="textcomplete-footer"><\/li>').appendTo(this.$el));
                    var i = n.isFunction(this.footer) ? this.footer(t) : this.footer;
                    this._$footer.html(i)
                }
            },
            _renderNoResultsMessage: function(t) {
                if (this.noResultsMessage) {
                    this._$noResultsMessage || (this._$noResultsMessage = n('<li class="textcomplete-no-results-message"><\/li>').appendTo(this.$el));
                    var i = n.isFunction(this.noResultsMessage) ? this.noResultsMessage(t) : this.noResultsMessage;
                    this._$noResultsMessage.html(i)
                }
            },
            _renderContents: function(n) {
                this._$footer ? this._$footer.before(n) : this.$el.append(n)
            },
            _fitToBottom: function() {
                var n = i.scrollTop() + i.height()
                  , t = this.$el.height();
                this.$el.position().top + t > n && this.$el.offset({
                    top: n - t
                })
            },
            _fitToRight: function() {
                for (var r = 30, n = this.$el.offset().left, t, u = this.$el.width(), f = i.width() - r; n + u > f; ) {
                    if (this.$el.offset({
                        left: n - r
                    }),
                    t = this.$el.offset().left,
                    t >= n)
                        break;
                    n = t
                }
            },
            _applyPlacement: function(n) {
                return this.placement.indexOf("top") !== -1 ? n = {
                    top: "auto",
                    bottom: this.$el.parent().height() - n.top + n.lineHeight,
                    left: n.left
                } : (n.bottom = "auto",
                delete n.lineHeight),
                this.placement.indexOf("absleft") !== -1 ? n.left = 0 : this.placement.indexOf("absright") !== -1 && (n.right = 0,
                n.left = "auto"),
                n
            }
        });
        n.fn.textcomplete.Dropdown = r;
        n.extend(n.fn.textcomplete, t)
    }(n),
    +function(n) {
        "use strict";
        function t(t) {
            n.extend(this, t);
            this.cache && (this.search = i(this.search))
        }
        var i = function(n) {
            var t = {};
            return function(i, r) {
                t[i] ? r(t[i]) : n.call(this, i, function(n) {
                    t[i] = (t[i] || []).concat(n);
                    r.apply(null, arguments)
                })
            }
        };
        t.parse = function(i, r) {
            return n.map(i, function(n) {
                var i = new t(n);
                return i.el = r.el,
                i.$el = r.$el,
                i
            })
        }
        ;
        n.extend(t.prototype, {
            match: null,
            replace: null,
            search: null,
            id: null,
            cache: !1,
            context: function() {
                return !0
            },
            index: 2,
            template: function(n) {
                return n
            },
            idProperty: null
        });
        n.fn.textcomplete.Strategy = t
    }(n),
    +function(n) {
        "use strict";
        function i() {}
        var t = Date.now || function() {
            return (new Date).getTime()
        }
          , r = function(n, i) {
            var r, u, f, e, o, s = function() {
                var h = t() - e;
                h < i ? r = setTimeout(s, i - h) : (r = null,
                o = n.apply(f, u),
                f = u = null)
            };
            return function() {
                return f = this,
                u = arguments,
                e = t(),
                r || (r = setTimeout(s, i)),
                o
            }
        };
        n.extend(i.prototype, {
            id: null,
            completer: null,
            el: null,
            $el: null,
            option: null,
            initialize: function(t, i, u) {
                this.el = t;
                this.$el = n(t);
                this.id = i.id + this.constructor.name;
                this.completer = i;
                this.option = u;
                this.option.debounce && (this._onKeyup = r(this._onKeyup, this.option.debounce));
                this._bindEvents()
            },
            destroy: function() {
                this.$el.off("." + this.id);
                this.$el = this.el = this.completer = null
            },
            select: function() {
                throw new Error("Not implemented");
            },
            getCaretPosition: function() {
                var r = this._getCaretRelativePosition(), i = this.$el.offset(), t = this.option.appendTo, u;
                return t && (t instanceof n || (t = n(t)),
                u = t.offsetParent().offset(),
                i.top -= u.top,
                i.left -= u.left),
                r.top += i.top,
                r.left += i.left,
                r
            },
            focus: function() {
                this.$el.focus()
            },
            _bindEvents: function() {
                this.$el.on("keyup." + this.id, n.proxy(this._onKeyup, this))
            },
            _onKeyup: function(n) {
                this._skipSearch(n) || this.completer.trigger(this.getTextFromHeadToCaret(), !0)
            },
            _skipSearch: function(n) {
                switch (n.keyCode) {
                case 9:
                case 13:
                case 40:
                case 38:
                    return !0
                }
                if (n.ctrlKey)
                    switch (n.keyCode) {
                    case 78:
                    case 80:
                        return !0
                    }
            }
        });
        n.fn.textcomplete.Adapter = i
    }(n),
    +function(n) {
        "use strict";
        function t(n, t, i) {
            this.initialize(n, t, i)
        }
        n.extend(t.prototype, n.fn.textcomplete.Adapter.prototype, {
            select: function(t, i, r) {
                var f = this.getTextFromHeadToCaret()
                  , e = this.el.value.substring(this.el.selectionEnd)
                  , u = i.replace(t, r);
                typeof u != "undefined" && (n.isArray(u) && (e = u[1] + e,
                u = u[0]),
                f = f.replace(i.match, u),
                this.$el.val(f + e),
                this.el.selectionStart = this.el.selectionEnd = f.length)
            },
            getTextFromHeadToCaret: function() {
                return this.el.value.substring(0, this.el.selectionEnd)
            },
            _getCaretRelativePosition: function() {
                var t = n.fn.textcomplete.getCaretCoordinates(this.el, this.el.selectionStart);
                return {
                    top: t.top + this._calculateLineHeight() - this.$el.scrollTop(),
                    left: t.left - this.$el.scrollLeft()
                }
            },
            _calculateLineHeight: function() {
                var t = parseInt(this.$el.css("line-height"), 10);
                if (isNaN(t)) {
                    var i = this.el.parentNode
                      , n = document.createElement(this.el.nodeName)
                      , r = this.el.style;
                    n.setAttribute("style", "margin:0px;padding:0px;font-family:" + r.fontFamily + ";font-size:" + r.fontSize);
                    n.innerHTML = "test";
                    i.appendChild(n);
                    t = n.clientHeight;
                    i.removeChild(n)
                }
                return t
            }
        });
        n.fn.textcomplete.Textarea = t
    }(n),
    +function(n) {
        "use strict";
        function i(i, r, u) {
            this.initialize(i, r, u);
            n("<span>" + t + "<\/span>").css({
                position: "absolute",
                top: -9999,
                left: -9999
            }).insertBefore(i)
        }
        var t = "吶";
        n.extend(i.prototype, n.fn.textcomplete.Textarea.prototype, {
            select: function(t, i, r) {
                var u = this.getTextFromHeadToCaret(), o = this.el.value.substring(u.length), f = i.replace(t, r), e;
                typeof f != "undefined" && (n.isArray(f) && (o = f[1] + o,
                f = f[0]),
                u = u.replace(i.match, f),
                this.$el.val(u + o),
                this.el.focus(),
                e = this.el.createTextRange(),
                e.collapse(!0),
                e.moveEnd("character", u.length),
                e.moveStart("character", u.length),
                e.select())
            },
            getTextFromHeadToCaret: function() {
                var i, n;
                return this.el.focus(),
                i = document.selection.createRange(),
                i.moveStart("character", -this.el.value.length),
                n = i.text.split(t),
                n.length === 1 ? n[0] : n[1]
            }
        });
        n.fn.textcomplete.IETextarea = i
    }(n),
    +function(n) {
        "use strict";
        function t(n, t, i) {
            this.initialize(n, t, i)
        }
        n.extend(t.prototype, n.fn.textcomplete.Adapter.prototype, {
            select: function(t, i, r) {
                var s = this.getTextFromHeadToCaret(), h = window.getSelection(), u = h.getRangeAt(0), v = u.cloneRange(), l, a, e, o, y;
                v.selectNodeContents(u.startContainer);
                var p = v.toString()
                  , c = p.substring(u.startOffset)
                  , f = i.replace(t, r);
                if (typeof f != "undefined") {
                    for (n.isArray(f) && (c = f[1] + c,
                    f = f[0]),
                    s = s.replace(i.match, f),
                    u.selectNodeContents(u.startContainer),
                    u.deleteContents(),
                    l = document.createElement("div"),
                    l.innerHTML = s,
                    a = document.createElement("div"),
                    a.innerHTML = c,
                    e = document.createDocumentFragment(); o = l.firstChild; )
                        y = e.appendChild(o);
                    while (o = a.firstChild)
                        e.appendChild(o);
                    u.insertNode(e);
                    u.setStartAfter(y);
                    u.collapse(!0);
                    h.removeAllRanges();
                    h.addRange(u)
                }
            },
            _getCaretRelativePosition: function() {
                var r = window.getSelection().getRangeAt(0).cloneRange(), u = document.createElement("span"), t, i;
                return r.insertNode(u),
                r.selectNodeContents(u),
                r.deleteContents(),
                t = n(u),
                i = t.offset(),
                i.left -= this.$el.offset().left,
                i.top += t.height() - this.$el.offset().top,
                i.lineHeight = t.height(),
                t.remove(),
                i
            },
            getTextFromHeadToCaret: function() {
                var n = window.getSelection().getRangeAt(0)
                  , t = n.cloneRange();
                return t.selectNodeContents(n.startContainer),
                t.toString().substring(0, n.startOffset)
            }
        });
        n.fn.textcomplete.ContentEditable = t
    }(n),
    function(n) {
        function u(n, u, f) {
            var c, l, e, o, h, s, a;
            if (!t)
                throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser");
            return c = f && f.debug || !1,
            c && (l = document.querySelector("#input-textarea-caret-position-mirror-div"),
            l && l.parentNode.removeChild(l)),
            e = document.createElement("div"),
            e.id = "input-textarea-caret-position-mirror-div",
            document.body.appendChild(e),
            o = e.style,
            h = window.getComputedStyle ? getComputedStyle(n) : n.currentStyle,
            o.whiteSpace = "pre-wrap",
            n.nodeName !== "INPUT" && (o.wordWrap = "break-word"),
            o.position = "absolute",
            c || (o.visibility = "hidden"),
            i.forEach(function(n) {
                o[n] = h[n]
            }),
            r ? n.scrollHeight > parseInt(h.height) && (o.overflowY = "scroll") : o.overflow = "hidden",
            e.textContent = n.value.substring(0, u),
            n.nodeName === "INPUT" && (e.textContent = e.textContent.replace(/\s/g, " ")),
            s = document.createElement("span"),
            s.textContent = n.value.substring(u) || ".",
            e.appendChild(s),
            a = {
                top: s.offsetTop + parseInt(h.borderTopWidth),
                left: s.offsetLeft + parseInt(h.borderLeftWidth)
            },
            c ? s.style.backgroundColor = "#aaa" : document.body.removeChild(e),
            a
        }
        var i = ["direction", "boxSizing", "width", "height", "overflowX", "overflowY", "borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth", "borderStyle", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "fontStyle", "fontVariant", "fontWeight", "fontStretch", "fontSize", "fontSizeAdjust", "lineHeight", "fontFamily", "textAlign", "textTransform", "textIndent", "textDecoration", "letterSpacing", "wordSpacing", "tabSize", "MozTabSize"]
          , t = typeof window != "undefined"
          , r = t && window.mozInnerScreenX != null;
        n.fn.textcomplete.getCaretCoordinates = u
    }(n),
    n
}),
function(n) {
    "use strict";
    function e(t, i, r, u) {
        function h(n, t) {
            return (n -= u,
            t -= u,
            n < 0 || n >= e || t < 0 || t >= e) ? !1 : f.isDark(n, t)
        }
        var f = n(r, i), e, o, s;
        f.addData(t);
        f.make();
        u = u || 0;
        e = f.getModuleCount();
        o = f.getModuleCount() + 2 * u;
        s = function(n, t, i, r) {
            var f = this.isDark
              , u = 1 / o;
            this.isDark = function(e, o) {
                var s = o * u
                  , h = e * u
                  , c = s + u
                  , l = h + u;
                return f(e, o) && (n > c || s > i || t > l || h > r)
            }
        }
        ;
        this.text = t;
        this.level = i;
        this.version = r;
        this.moduleCount = o;
        this.isDark = h;
        this.addBlank = s
    }
    function r(n, t, i, r, u) {
        i = Math.max(1, i || 1);
        r = Math.min(40, r || 40);
        for (var f = i; f <= r; f += 1)
            try {
                return new e(n,t,f,u)
            } catch (o) {}
    }
    function s(n, i, r) {
        var u = r.size
          , s = "bold " + r.mSize * u + "px " + r.fontname
          , h = t("<canvas/>")[0].getContext("2d");
        h.font = s;
        var v = h.measureText(r.label).width
          , c = r.mSize
          , l = v / u
          , o = (1 - l) * r.mPosX
          , e = (1 - c) * r.mPosY
          , y = o + l
          , a = e + c
          , f = .01;
        r.mode === 1 ? n.addBlank(0, e - f, u, a + f) : n.addBlank(o - f, e - f, y + f, a + f);
        i.fillStyle = r.fontcolor;
        i.font = s;
        i.fillText(r.label, o * u, e * u + .75 * r.mSize * u)
    }
    function h(n, t, i) {
        var u = i.size
          , c = i.image.naturalWidth || 1
          , l = i.image.naturalHeight || 1
          , f = i.mSize
          , o = f * c / l
          , s = (1 - o) * i.mPosX
          , e = (1 - f) * i.mPosY
          , a = s + o
          , h = e + f
          , r = .01;
        i.mode === 3 ? n.addBlank(0, e - r, u, h + r) : n.addBlank(s - r, e - r, a + r, h + r);
        t.drawImage(i.image, s * u, e * u, o * u, f * u)
    }
    function c(n, i, r) {
        t(r.background).is("img") ? i.drawImage(r.background, 0, 0, r.size, r.size) : r.background && (i.fillStyle = r.background,
        i.fillRect(r.left, r.top, r.size, r.size));
        var u = r.mode;
        u === 1 || u === 2 ? s(n, i, r) : (u === 3 || u === 4) && h(n, i, r)
    }
    function l(n, t, i, r, u, f, e, o) {
        n.isDark(e, o) && t.rect(r, u, f, f)
    }
    function a(n, t, i, r, u, f, e, o, s, h) {
        e ? n.moveTo(t + f, i) : n.moveTo(t, i);
        o ? (n.lineTo(r - f, i),
        n.arcTo(r, i, r, u, f)) : n.lineTo(r, i);
        s ? (n.lineTo(r, u - f),
        n.arcTo(r, u, t, u, f)) : n.lineTo(r, u);
        h ? (n.lineTo(t + f, u),
        n.arcTo(t, u, t, i, f)) : n.lineTo(t, u);
        e ? (n.lineTo(t, i + f),
        n.arcTo(t, i, r, i, f)) : n.lineTo(t, i)
    }
    function v(n, t, i, r, u, f, e, o, s, h) {
        e && (n.moveTo(t + f, i),
        n.lineTo(t, i),
        n.lineTo(t, i + f),
        n.arcTo(t, i, t + f, i, f));
        o && (n.moveTo(r - f, i),
        n.lineTo(r, i),
        n.lineTo(r, i + f),
        n.arcTo(r, i, r - f, i, f));
        s && (n.moveTo(r - f, u),
        n.lineTo(r, u),
        n.lineTo(r, u - f),
        n.arcTo(r, u, r - f, u, f));
        h && (n.moveTo(t + f, u),
        n.lineTo(t, u),
        n.lineTo(t, u - f),
        n.arcTo(t, u, t + f, u, f))
    }
    function y(n, t, i, r, u, f, e, o) {
        var s = n.isDark
          , d = r + f
          , g = u + f
          , nt = i.radius * f
          , p = e - 1
          , w = e + 1
          , b = o - 1
          , k = o + 1
          , tt = s(e, o)
          , it = s(p, b)
          , h = s(p, o)
          , rt = s(p, k)
          , c = s(e, k)
          , ut = s(w, k)
          , l = s(w, o)
          , ft = s(w, b)
          , y = s(e, b);
        tt ? a(t, r, u, d, g, nt, !h && !y, !h && !c, !l && !c, !l && !y) : v(t, r, u, d, g, nt, h && y && it, h && c && rt, l && c && ut, l && y && ft)
    }
    function p(n, i, r) {
        var e = n.moduleCount, s = r.size / e, h = l, u, f, c;
        for (o && r.radius > 0 && r.radius <= .5 && (h = y),
        i.beginPath(),
        u = 0; u < e; u += 1)
            for (f = 0; f < e; f += 1) {
                var a = r.left + f * s
                  , v = r.top + u * s
                  , p = s;
                h(n, i, r, a, v, p, u, f)
            }
        t(r.fill).is("img") ? (i.strokeStyle = "rgba(0,0,0,0.5)",
        i.lineWidth = 2,
        i.stroke(),
        c = i.globalCompositeOperation,
        i.globalCompositeOperation = "destination-out",
        i.fill(),
        i.globalCompositeOperation = c,
        i.clip(),
        i.drawImage(r.fill, 0, 0, r.size, r.size),
        i.restore()) : (i.fillStyle = r.fill,
        i.fill())
    }
    function u(n, i) {
        var u = r(i.text, i.ecLevel, i.minVersion, i.maxVersion, i.quiet), f, e;
        return u ? (f = t(n).data("qrcode", u),
        e = f[0].getContext("2d"),
        c(u, e, i),
        p(u, e, i),
        f) : null
    }
    function f(n) {
        var i = t("<canvas/>").attr("width", n.size).attr("height", n.size);
        return u(i, n)
    }
    function w(n) {
        return t("<img/>").attr("src", f(n)[0].toDataURL("image/png"))
    }
    function b(n) {
        var e = r(n.text, n.ecLevel, n.minVersion, n.maxVersion, n.quiet);
        if (!e)
            return null;
        var o = n.size, c = n.background, l = Math.floor, s = e.moduleCount, i = l(o / s), a = l(.5 * (o - i * s)), u, f, v = {
            position: "relative",
            left: 0,
            top: 0,
            padding: 0,
            margin: 0,
            width: o,
            height: o
        }, y = {
            position: "absolute",
            padding: 0,
            margin: 0,
            width: i,
            height: i,
            "background-color": n.fill
        }, h = t("<div/>").data("qrcode", e).css(v);
        for (c && h.css("background-color", c),
        u = 0; u < s; u += 1)
            for (f = 0; f < s; f += 1)
                e.isDark(u, f) && t("<div/>").css(y).css({
                    left: a + f * i,
                    top: a + u * i
                }).appendTo(h);
        return h
    }
    function k(n) {
        return i && n.render === "canvas" ? f(n) : i && n.render === "image" ? w(n) : b(n)
    }
    var t = jQuery
      , i = function() {
        var n = document.createElement("canvas");
        return Boolean(n.getContext && n.getContext("2d"))
    }()
      , o = Object.prototype.toString.call(window.opera) !== "[object Opera]"
      , d = {
        render: "canvas",
        minVersion: 1,
        maxVersion: 40,
        ecLevel: "L",
        left: 0,
        top: 0,
        size: 200,
        fill: "#000",
        background: null,
        text: "no text",
        radius: 0,
        quiet: 0,
        mode: 0,
        mSize: .1,
        mPosX: .5,
        mPosY: .5,
        label: "no label",
        fontname: "sans",
        fontcolor: "#000",
        image: null
    };
    t.fn.qrcode = function(n) {
        var i = t.extend({}, d, n);
        return this.each(function() {
            this.nodeName.toLowerCase() === "canvas" ? u(this, i) : t(this).append(k(i))
        })
    }
}(function() {
    var n = function() {
        function f(n, t) {
            if (typeof n.length == "undefined")
                throw new Error(n.length + "/" + t);
            var u = function() {
                for (var i = 0, u, r; i < n.length && n[i] == 0; )
                    i += 1;
                for (u = new Array(n.length - i + t),
                r = 0; r < n.length - i; r += 1)
                    u[r] = n[r + i];
                return u
            }()
              , r = {};
            return r.getAt = function(n) {
                return u[n]
            }
            ,
            r.getLength = function() {
                return u.length
            }
            ,
            r.multiply = function(n) {
                for (var t, e = new Array(r.getLength() + n.getLength() - 1), u = 0; u < r.getLength(); u += 1)
                    for (t = 0; t < n.getLength(); t += 1)
                        e[u + t] ^= i.gexp(i.glog(r.getAt(u)) + i.glog(n.getAt(t)));
                return f(e, 0)
            }
            ,
            r.mod = function(n) {
                var e, u, t;
                if (r.getLength() - n.getLength() < 0)
                    return r;
                for (e = i.glog(r.getAt(0)) - i.glog(n.getAt(0)),
                u = new Array(r.getLength()),
                t = 0; t < r.getLength(); t += 1)
                    u[t] = r.getAt(t);
                for (t = 0; t < n.getLength(); t += 1)
                    u[t] ^= i.gexp(i.glog(n.getAt(t)) + e);
                return f(u, 0).mod(n)
            }
            ,
            r
        }
        var e = function(n, t) {
            var k = 236
              , d = 17
              , l = n
              , p = u[t]
              , i = null
              , e = 0
              , a = null
              , w = []
              , o = {}
              , b = function(n, t) {
                e = l * 4 + 17;
                i = function(n) {
                    for (var i, r = new Array(n), t = 0; t < n; t += 1)
                        for (r[t] = new Array(n),
                        i = 0; i < n; i += 1)
                            r[t][i] = null;
                    return r
                }(e);
                v(0, 0);
                v(e - 7, 0);
                v(0, e - 7);
                tt();
                nt();
                rt(n, t);
                l >= 7 && it(n);
                a == null && (a = et(l, p, w));
                ut(a, t)
            }
              , v = function(n, t) {
                for (var u, r = -1; r <= 7; r += 1)
                    if (!(n + r <= -1) && !(e <= n + r))
                        for (u = -1; u <= 7; u += 1)
                            t + u <= -1 || e <= t + u || (i[n + r][t + u] = 0 <= r && r <= 6 && (u == 0 || u == 6) || 0 <= u && u <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= u && u <= 4 ? !0 : !1)
            }
              , g = function() {
                for (var t, i = 0, u = 0, n = 0; n < 8; n += 1)
                    b(!0, n),
                    t = r.getLostPoint(o),
                    (n == 0 || i > t) && (i = t,
                    u = n);
                return u
            }
              , nt = function() {
                for (var t, n = 8; n < e - 8; n += 1)
                    i[n][6] == null && (i[n][6] = n % 2 == 0);
                for (t = 8; t < e - 8; t += 1)
                    i[6][t] == null && (i[6][t] = t % 2 == 0)
            }
              , tt = function() {
                for (var f, o, s, n, t, u = r.getPatternPosition(l), e = 0; e < u.length; e += 1)
                    for (f = 0; f < u.length; f += 1)
                        if (o = u[e],
                        s = u[f],
                        i[o][s] == null)
                            for (n = -2; n <= 2; n += 1)
                                for (t = -2; t <= 2; t += 1)
                                    i[o + n][s + t] = n == -2 || n == 2 || t == -2 || t == 2 || n == 0 && t == 0 ? !0 : !1
            }
              , it = function(n) {
                for (var u, f = r.getBCHTypeNumber(l), t = 0; t < 18; t += 1)
                    u = !n && (f >> t & 1) == 1,
                    i[Math.floor(t / 3)][t % 3 + e - 11] = u;
                for (t = 0; t < 18; t += 1)
                    u = !n && (f >> t & 1) == 1,
                    i[t % 3 + e - 11][Math.floor(t / 3)] = u
            }
              , rt = function(n, t) {
                for (var f, s = p << 3 | t, o = r.getBCHTypeInfo(s), u = 0; u < 15; u += 1)
                    f = !n && (o >> u & 1) == 1,
                    u < 6 ? i[u][8] = f : u < 8 ? i[u + 1][8] = f : i[e - 15 + u][8] = f;
                for (u = 0; u < 15; u += 1)
                    f = !n && (o >> u & 1) == 1,
                    u < 8 ? i[8][e - u - 1] = f : u < 9 ? i[8][15 - u] = f : i[8][14 - u] = f;
                i[e - 8][8] = !n
            }
              , ut = function(n, t) {
                for (var o, s, a, h = -1, u = e - 1, c = 7, l = 0, v = r.getMaskFunction(t), f = e - 1; f > 0; f -= 2)
                    for (f == 6 && (f -= 1); ; ) {
                        for (o = 0; o < 2; o += 1)
                            i[u][f - o] == null && (s = !1,
                            l < n.length && (s = (n[l] >>> c & 1) == 1),
                            a = v(u, f - o),
                            a && (s = !s),
                            i[u][f - o] = s,
                            c -= 1,
                            c == -1 && (l += 1,
                            c = 7));
                        if (u += h,
                        u < 0 || e <= u) {
                            u -= h;
                            h = -h;
                            break
                        }
                    }
            }
              , ft = function(n, t) {
                for (var s, v, p, w, c, h, i, b = 0, l = 0, a = 0, e = new Array(t.length), o = new Array(t.length), u = 0; u < t.length; u += 1) {
                    for (s = t[u].dataCount,
                    v = t[u].totalCount - s,
                    l = Math.max(l, s),
                    a = Math.max(a, v),
                    e[u] = new Array(s),
                    i = 0; i < e[u].length; i += 1)
                        e[u][i] = 255 & n.getBuffer()[i + b];
                    b += s;
                    var y = r.getErrorCorrectPolynomial(v)
                      , d = f(e[u], y.getLength() - 1)
                      , k = d.mod(y);
                    for (o[u] = new Array(y.getLength() - 1),
                    i = 0; i < o[u].length; i += 1)
                        p = i + k.getLength() - o[u].length,
                        o[u][i] = p >= 0 ? k.getAt(p) : 0
                }
                for (w = 0,
                i = 0; i < t.length; i += 1)
                    w += t[i].totalCount;
                for (c = new Array(w),
                h = 0,
                i = 0; i < l; i += 1)
                    for (u = 0; u < t.length; u += 1)
                        i < e[u].length && (c[h] = e[u][i],
                        h += 1);
                for (i = 0; i < a; i += 1)
                    for (u = 0; u < t.length; u += 1)
                        i < o[u].length && (c[h] = o[u][i],
                        h += 1);
                return c
            }
              , et = function(n, t, i) {
                for (var o, e, c = s.getRSBlocks(n, t), u = h(), f = 0; f < i.length; f += 1)
                    o = i[f],
                    u.put(o.getMode(), 4),
                    u.put(o.getLength(), r.getLengthInBits(o.getMode(), n)),
                    o.write(u);
                for (e = 0,
                f = 0; f < c.length; f += 1)
                    e += c[f].dataCount;
                if (u.getLengthInBits() > e * 8)
                    throw new Error("code length overflow. (" + u.getLengthInBits() + ">" + e * 8 + ")");
                for (u.getLengthInBits() + 4 <= e * 8 && u.put(0, 4); u.getLengthInBits() % 8 != 0; )
                    u.putBit(!1);
                for (; ; ) {
                    if (u.getLengthInBits() >= e * 8)
                        break;
                    if (u.put(k, 8),
                    u.getLengthInBits() >= e * 8)
                        break;
                    u.put(d, 8)
                }
                return ft(u, c)
            };
            return o.addData = function(n) {
                var t = c(n);
                w.push(t);
                a = null
            }
            ,
            o.isDark = function(n, t) {
                if (n < 0 || e <= n || t < 0 || e <= t)
                    throw new Error(n + "," + t);
                return i[n][t]
            }
            ,
            o.getModuleCount = function() {
                return e
            }
            ,
            o.make = function() {
                b(!1, g())
            }
            ,
            o.createTableTag = function(n, t) {
                var i, r, u;
                for (n = n || 2,
                t = typeof t == "undefined" ? n * 4 : t,
                i = "",
                i += '<table style="',
                i += " border-width: 0px; border-style: none;",
                i += " border-collapse: collapse;",
                i += " padding: 0px; margin: " + t + "px;",
                i += '">',
                i += "<tbody>",
                r = 0; r < o.getModuleCount(); r += 1) {
                    for (i += "<tr>",
                    u = 0; u < o.getModuleCount(); u += 1)
                        i += '<td style="',
                        i += " border-width: 0px; border-style: none;",
                        i += " border-collapse: collapse;",
                        i += " padding: 0px; margin: 0px;",
                        i += " width: " + n + "px;",
                        i += " height: " + n + "px;",
                        i += " background-color: ",
                        i += o.isDark(r, u) ? "#000000" : "#ffffff",
                        i += ";",
                        i += '"/>';
                    i += "<\/tr>"
                }
                return i += "<\/tbody>",
                i + "<\/table>"
            }
            ,
            o.createImgTag = function(n, t) {
                n = n || 2;
                t = typeof t == "undefined" ? n * 4 : t;
                var r = o.getModuleCount() * n + t * 2
                  , i = t
                  , u = r - t;
                return y(r, r, function(t, r) {
                    if (i <= t && t < u && i <= r && r < u) {
                        var f = Math.floor((t - i) / n)
                          , e = Math.floor((r - i) / n);
                        return o.isDark(e, f) ? 0 : 1
                    }
                    return 1
                })
            }
            ,
            o
        };
        e.stringToBytes = function(n) {
            for (var r, i = [], t = 0; t < n.length; t += 1)
                r = n.charCodeAt(t),
                i.push(r & 255);
            return i
        }
        ;
        e.createStringToBytes = function(n, t) {
            var i = function() {
                for (var f = a(n), i = function() {
                    var n = f.read();
                    if (n == -1)
                        throw new Error;
                    return n
                }, r = 0, e = {}, u; ; ) {
                    if (u = f.read(),
                    u == -1)
                        break;
                    var o = i()
                      , s = i()
                      , h = i()
                      , c = String.fromCharCode(u << 8 | o)
                      , l = s << 8 | h;
                    e[c] = l;
                    r += 1
                }
                if (r != t)
                    throw new Error(r + " != " + t);
                return e
            }()
              , r = "?".charCodeAt(0);
            return function(n) {
                for (var e, t, u = [], f = 0; f < n.length; f += 1)
                    e = n.charCodeAt(f),
                    e < 128 ? u.push(e) : (t = i[n.charAt(f)],
                    typeof t == "number" ? (t & 255) == t ? u.push(t) : (u.push(t >>> 8),
                    u.push(t & 255)) : u.push(r));
                return u
            }
        }
        ;
        var n = {
            MODE_NUMBER: 1,
            MODE_ALPHA_NUM: 2,
            MODE_8BIT_BYTE: 4,
            MODE_KANJI: 8
        }
          , u = {
            L: 1,
            M: 0,
            Q: 3,
            H: 2
        }
          , t = {
            PATTERN000: 0,
            PATTERN001: 1,
            PATTERN010: 2,
            PATTERN011: 3,
            PATTERN100: 4,
            PATTERN101: 5,
            PATTERN110: 6,
            PATTERN111: 7
        }
          , r = function() {
            var s = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]]
              , e = 1335
              , o = 7973
              , h = 21522
              , r = {}
              , u = function(n) {
                for (var t = 0; n != 0; )
                    t += 1,
                    n >>>= 1;
                return t
            };
            return r.getBCHTypeInfo = function(n) {
                for (var t = n << 10; u(t) - u(e) >= 0; )
                    t ^= e << u(t) - u(e);
                return (n << 10 | t) ^ h
            }
            ,
            r.getBCHTypeNumber = function(n) {
                for (var t = n << 12; u(t) - u(o) >= 0; )
                    t ^= o << u(t) - u(o);
                return n << 12 | t
            }
            ,
            r.getPatternPosition = function(n) {
                return s[n - 1]
            }
            ,
            r.getMaskFunction = function(n) {
                switch (n) {
                case t.PATTERN000:
                    return function(n, t) {
                        return (n + t) % 2 == 0
                    }
                    ;
                case t.PATTERN001:
                    return function(n) {
                        return n % 2 == 0
                    }
                    ;
                case t.PATTERN010:
                    return function(n, t) {
                        return t % 3 == 0
                    }
                    ;
                case t.PATTERN011:
                    return function(n, t) {
                        return (n + t) % 3 == 0
                    }
                    ;
                case t.PATTERN100:
                    return function(n, t) {
                        return (Math.floor(n / 2) + Math.floor(t / 3)) % 2 == 0
                    }
                    ;
                case t.PATTERN101:
                    return function(n, t) {
                        return n * t % 2 + n * t % 3 == 0
                    }
                    ;
                case t.PATTERN110:
                    return function(n, t) {
                        return (n * t % 2 + n * t % 3) % 2 == 0
                    }
                    ;
                case t.PATTERN111:
                    return function(n, t) {
                        return (n * t % 3 + (n + t) % 2) % 2 == 0
                    }
                    ;
                default:
                    throw new Error("bad maskPattern:" + n);
                }
            }
            ,
            r.getErrorCorrectPolynomial = function(n) {
                for (var t = f([1], 0), r = 0; r < n; r += 1)
                    t = t.multiply(f([1, i.gexp(r)], 0));
                return t
            }
            ,
            r.getLengthInBits = function(t, i) {
                if (1 <= i && i < 10)
                    switch (t) {
                    case n.MODE_NUMBER:
                        return 10;
                    case n.MODE_ALPHA_NUM:
                        return 9;
                    case n.MODE_8BIT_BYTE:
                        return 8;
                    case n.MODE_KANJI:
                        return 8;
                    default:
                        throw new Error("mode:" + t);
                    }
                else if (i < 27)
                    switch (t) {
                    case n.MODE_NUMBER:
                        return 12;
                    case n.MODE_ALPHA_NUM:
                        return 11;
                    case n.MODE_8BIT_BYTE:
                        return 16;
                    case n.MODE_KANJI:
                        return 10;
                    default:
                        throw new Error("mode:" + t);
                    }
                else if (i < 41)
                    switch (t) {
                    case n.MODE_NUMBER:
                        return 14;
                    case n.MODE_ALPHA_NUM:
                        return 13;
                    case n.MODE_8BIT_BYTE:
                        return 16;
                    case n.MODE_KANJI:
                        return 12;
                    default:
                        throw new Error("mode:" + t);
                    }
                else
                    throw new Error("type:" + i);
            }
            ,
            r.getLostPoint = function(n) {
                for (var s, c, u, f, e, h, t, l, r = n.getModuleCount(), o = 0, i = 0; i < r; i += 1)
                    for (t = 0; t < r; t += 1) {
                        for (s = 0,
                        c = n.isDark(i, t),
                        u = -1; u <= 1; u += 1)
                            if (!(i + u < 0) && !(r <= i + u))
                                for (f = -1; f <= 1; f += 1)
                                    t + f < 0 || r <= t + f || (u != 0 || f != 0) && c == n.isDark(i + u, t + f) && (s += 1);
                        s > 5 && (o += 3 + s - 5)
                    }
                for (i = 0; i < r - 1; i += 1)
                    for (t = 0; t < r - 1; t += 1)
                        e = 0,
                        n.isDark(i, t) && (e += 1),
                        n.isDark(i + 1, t) && (e += 1),
                        n.isDark(i, t + 1) && (e += 1),
                        n.isDark(i + 1, t + 1) && (e += 1),
                        (e == 0 || e == 4) && (o += 3);
                for (i = 0; i < r; i += 1)
                    for (t = 0; t < r - 6; t += 1)
                        n.isDark(i, t) && !n.isDark(i, t + 1) && n.isDark(i, t + 2) && n.isDark(i, t + 3) && n.isDark(i, t + 4) && !n.isDark(i, t + 5) && n.isDark(i, t + 6) && (o += 40);
                for (t = 0; t < r; t += 1)
                    for (i = 0; i < r - 6; i += 1)
                        n.isDark(i, t) && !n.isDark(i + 1, t) && n.isDark(i + 2, t) && n.isDark(i + 3, t) && n.isDark(i + 4, t) && !n.isDark(i + 5, t) && n.isDark(i + 6, t) && (o += 40);
                for (h = 0,
                t = 0; t < r; t += 1)
                    for (i = 0; i < r; i += 1)
                        n.isDark(i, t) && (h += 1);
                return l = Math.abs(100 * h / r / r - 50) / 5,
                o + l * 10
            }
            ,
            r
        }()
          , i = function() {
            for (var i, t = new Array(256), r = new Array(256), n = 0; n < 8; n += 1)
                t[n] = 1 << n;
            for (n = 8; n < 256; n += 1)
                t[n] = t[n - 4] ^ t[n - 5] ^ t[n - 6] ^ t[n - 8];
            for (n = 0; n < 255; n += 1)
                r[t[n]] = n;
            return i = {},
            i.glog = function(n) {
                if (n < 1)
                    throw new Error("glog(" + n + ")");
                return r[n]
            }
            ,
            i.gexp = function(n) {
                while (n < 0)
                    n += 255;
                while (n >= 256)
                    n -= 255;
                return t[n]
            }
            ,
            i
        }();
        var s = function() {
            var n = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]]
              , i = function(n, t) {
                var i = {};
                return i.totalCount = n,
                i.dataCount = t,
                i
            }
              , t = {}
              , r = function(t, i) {
                switch (i) {
                case u.L:
                    return n[(t - 1) * 4 + 0];
                case u.M:
                    return n[(t - 1) * 4 + 1];
                case u.Q:
                    return n[(t - 1) * 4 + 2];
                case u.H:
                    return n[(t - 1) * 4 + 3];
                default:
                    return undefined
                }
            };
            return t.getRSBlocks = function(n, t) {
                var f = r(n, t), s, e, u, o;
                if (typeof f == "undefined")
                    throw new Error("bad rs block @ typeNumber:" + n + "/errorCorrectLevel:" + t);
                for (s = f.length / 3,
                e = [],
                u = 0; u < s; u += 1) {
                    var h = f[u * 3 + 0]
                      , c = f[u * 3 + 1]
                      , l = f[u * 3 + 2];
                    for (o = 0; o < h; o += 1)
                        e.push(i(c, l))
                }
                return e
            }
            ,
            t
        }()
          , h = function() {
            var t = []
              , i = 0
              , n = {};
            return n.getBuffer = function() {
                return t
            }
            ,
            n.getAt = function(n) {
                var i = Math.floor(n / 8);
                return (t[i] >>> 7 - n % 8 & 1) == 1
            }
            ,
            n.put = function(t, i) {
                for (var r = 0; r < i; r += 1)
                    n.putBit((t >>> i - r - 1 & 1) == 1)
            }
            ,
            n.getLengthInBits = function() {
                return i
            }
            ,
            n.putBit = function(n) {
                var r = Math.floor(i / 8);
                t.length <= r && t.push(0);
                n && (t[r] |= 128 >>> i % 8);
                i += 1
            }
            ,
            n
        }
          , c = function(t) {
            var u = n.MODE_8BIT_BYTE
              , f = t
              , r = e.stringToBytes(t)
              , i = {};
            return i.getMode = function() {
                return u
            }
            ,
            i.getLength = function() {
                return r.length
            }
            ,
            i.write = function(n) {
                for (var t = 0; t < r.length; t += 1)
                    n.put(r[t], 8)
            }
            ,
            i
        }
          , o = function() {
            var t = []
              , n = {};
            return n.writeByte = function(n) {
                t.push(n & 255)
            }
            ,
            n.writeShort = function(t) {
                n.writeByte(t);
                n.writeByte(t >>> 8)
            }
            ,
            n.writeBytes = function(t, i, r) {
                i = i || 0;
                r = r || t.length;
                for (var u = 0; u < r; u += 1)
                    n.writeByte(t[u + i])
            }
            ,
            n.writeString = function(t) {
                for (var i = 0; i < t.length; i += 1)
                    n.writeByte(t.charCodeAt(i))
            }
            ,
            n.toByteArray = function() {
                return t
            }
            ,
            n.toString = function() {
                var i = "", n;
                for (i += "[",
                n = 0; n < t.length; n += 1)
                    n > 0 && (i += ","),
                    i += t[n];
                return i + "]"
            }
            ,
            n
        }
          , l = function() {
            var t = 0
              , n = 0
              , r = 0
              , u = ""
              , i = {}
              , f = function(n) {
                u += String.fromCharCode(e(n & 63))
            }
              , e = function(n) {
                if (!(n < 0)) {
                    if (n < 26)
                        return 65 + n;
                    if (n < 52)
                        return n - -71;
                    if (n < 62)
                        return n - 4;
                    if (n == 62)
                        return 43;
                    if (n == 63)
                        return 47
                }
                throw new Error("n:" + n);
            };
            return i.writeByte = function(i) {
                for (t = t << 8 | i & 255,
                n += 8,
                r += 1; n >= 6; )
                    f(t >>> n - 6),
                    n -= 6
            }
            ,
            i.flush = function() {
                var e, i;
                if (n > 0 && (f(t << 6 - n),
                t = 0,
                n = 0),
                r % 3 != 0)
                    for (e = 3 - r % 3,
                    i = 0; i < e; i += 1)
                        u += "="
            }
            ,
            i.toString = function() {
                return u
            }
            ,
            i
        }
          , a = function(n) {
            var u = n, i = 0, r = 0, t = 0, f = {}, e;
            return f.read = function() {
                for (var n, f; t < 8; ) {
                    if (i >= u.length) {
                        if (t == 0)
                            return -1;
                        throw new Error("unexpected end of file./" + t);
                    }
                    if (n = u.charAt(i),
                    i += 1,
                    n == "=")
                        return t = 0,
                        -1;
                    n.match(/^\s$/) || (r = r << 6 | e(n.charCodeAt(0)),
                    t += 6)
                }
                return f = r >>> t - 8 & 255,
                t -= 8,
                f
            }
            ,
            e = function(n) {
                if (65 <= n && n <= 90)
                    return n - 65;
                if (97 <= n && n <= 122)
                    return n - 71;
                if (48 <= n && n <= 57)
                    return n - -4;
                if (n == 43)
                    return 62;
                if (n == 47)
                    return 63;
                throw new Error("c:" + n);
            }
            ,
            f
        }
          , v = function(n, t) {
            var r = n
              , f = t
              , i = new Array(n * t)
              , u = {};
            u.setPixel = function(n, t, u) {
                i[t * r + n] = u
            }
            ;
            u.write = function(n) {
                var u, i, t;
                for (n.writeString("GIF87a"),
                n.writeShort(r),
                n.writeShort(f),
                n.writeByte(128),
                n.writeByte(0),
                n.writeByte(0),
                n.writeByte(0),
                n.writeByte(0),
                n.writeByte(0),
                n.writeByte(255),
                n.writeByte(255),
                n.writeByte(255),
                n.writeString(","),
                n.writeShort(0),
                n.writeShort(0),
                n.writeShort(r),
                n.writeShort(f),
                n.writeByte(0),
                u = 2,
                i = s(u),
                n.writeByte(u),
                t = 0; i.length - t > 255; )
                    n.writeByte(255),
                    n.writeBytes(i, t, 255),
                    t += 255;
                n.writeByte(i.length - t);
                n.writeBytes(i, t, i.length - t);
                n.writeByte(0);
                n.writeString(";")
            }
            ;
            var e = function(n) {
                var u = n
                  , t = 0
                  , i = 0
                  , r = {};
                return r.write = function(n, r) {
                    if (n >>> r != 0)
                        throw new Error("length over");
                    while (t + r >= 8)
                        u.writeByte(255 & (n << t | i)),
                        r -= 8 - t,
                        n >>>= 8 - t,
                        i = 0,
                        t = 0;
                    i = n << t | i;
                    t = t + r
                }
                ,
                r.flush = function() {
                    t > 0 && u.writeByte(i)
                }
                ,
                r
            }
              , s = function(n) {
                for (var v, f, s, r, c, l = 1 << n, y = (1 << n) + 1, u = n + 1, t = h(), a = 0; a < l; a += 1)
                    t.add(String.fromCharCode(a));
                for (t.add(String.fromCharCode(l)),
                t.add(String.fromCharCode(y)),
                v = o(),
                f = e(v),
                f.write(l, u),
                s = 0,
                r = String.fromCharCode(i[s]),
                s += 1; s < i.length; )
                    c = String.fromCharCode(i[s]),
                    s += 1,
                    t.contains(r + c) ? r = r + c : (f.write(t.indexOf(r), u),
                    t.size() < 4095 && (t.size() == 1 << u && (u += 1),
                    t.add(r + c)),
                    r = c);
                return f.write(t.indexOf(r), u),
                f.write(y, u),
                f.flush(),
                v.toByteArray()
            }
              , h = function() {
                var t = {}
                  , i = 0
                  , n = {};
                return n.add = function(r) {
                    if (n.contains(r))
                        throw new Error("dup key:" + r);
                    t[r] = i;
                    i += 1
                }
                ,
                n.size = function() {
                    return i
                }
                ,
                n.indexOf = function(n) {
                    return t[n]
                }
                ,
                n.contains = function(n) {
                    return typeof t[n] != "undefined"
                }
                ,
                n
            };
            return u
        }
          , y = function(n, t, i, r) {
            for (var f, c, s, a, h, u, y = v(n, t), e = 0; e < t; e += 1)
                for (f = 0; f < n; f += 1)
                    y.setPixel(f, e, i(f, e));
            for (c = o(),
            y.write(c),
            s = l(),
            a = c.toByteArray(),
            h = 0; h < a.length; h += 1)
                s.writeByte(a[h]);
            return s.flush(),
            u = "",
            u += "<img",
            u += ' src="',
            u += "data:image/gif;base64,",
            u += s,
            u += '"',
            u += ' width="',
            u += n,
            u += '"',
            u += ' height="',
            u += t,
            u += '"',
            r && (u += ' alt="',
            u += r,
            u += '"'),
            u + "/>"
        };
        return e
    }();
    return function(n) {
        typeof define == "function" && define.amd ? define([], n) : typeof exports == "object" && (module.exports = n())
    }(function() {
        return n
    }),
    !function(n) {
        n.stringToBytes = function(n) {
            function t(n) {
                for (var t, i = [], r = 0; r < n.length; r++)
                    t = n.charCodeAt(r),
                    t < 128 ? i.push(t) : t < 2048 ? i.push(192 | t >> 6, 128 | t & 63) : t < 55296 || t >= 57344 ? i.push(224 | t >> 12, 128 | t >> 6 & 63, 128 | t & 63) : (r++,
                    t = 65536 + ((t & 1023) << 10 | n.charCodeAt(r) & 1023),
                    i.push(240 | t >> 18, 128 | t >> 12 & 63, 128 | t >> 6 & 63, 128 | t & 63));
                return i
            }
            return t(n)
        }
    }(n),
    n
}()),
function(n) {
    siberia.ensureObject("siberia.form");
    siberia.form = function() {
        function u() {
            n("form[data-element-id!=formsy]").each(function(i, r) {
                var u = n(r);
                t(u)
            })
        }
        function t(n) {
            i(n)
        }
        function i(t) {
            var i = t.find('input[type!="hidden"]');
            i.each(function(t, i) {
                var u = n(i);
                if (u.attr("data-role") == "maskedtextbox")
                    u.on("keydown", r);
                else
                    u.on("keypress", r)
            })
        }
        function r(t) {
            var i, r;
            if (t.keyCode == 13) {
                if (i = n(t.currentTarget).closest("form"),
                i.hasClass("js-custom-enter"))
                    return;
                t.preventDefault();
                r = i.find(".js-submit-on-enter");
                r.length == 1 && r.trigger("click")
            }
        }
        return {
            initHandleEnter: u,
            initHandleEnterForForm: t,
            initHandleEnterForContainer: i
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.grid");
    siberia.grid.initClientGrid = function(t) {
        var r = n.extend({}, {
            gridSelector: ".js-client-grid",
            addSelector: ".js-client-grid-add",
            editSelector: ".js-client-grid-edit",
            viewSelector: ".js-client-grid-view",
            duplicateSelector: ".js-client-grid-duplicate",
            customSelector: ".js-client-grid-custom-action",
            deleteSelector: ".js-client-grid-delete",
            saveAndCloseSelector: ".js-client-grid-save-and-close",
            saveSelector: ".js-client-grid-save",
            selectRowSelector: ".js-client-grid-row-select",
            saveExpandedStateOnDataBound: !1
        }, t), u, e, f, o;
        if (r.controlSelector = r.gridSelector,
        siberia.itemsContainer.initItemsContainer("kendoGrid", "tr", r),
        siberia.grid.setExpandMode(r.controlSelector, r.saveExpandedStateOnDataBound),
        u = n(r.gridSelector).data("kendoGrid"),
        u && location.search && location.search.length > 1 && (e = location.search.substr(1).split("&"),
        f = n.grep(e, function(n) {
            return n.toLowerCase().indexOf("gridid=") === 0
        }),
        f.length > 0)) {
            o = f[0].split("=")[1];
            u.one("dataBound", function() {
                u.dataSource.filter({
                    field: "Id",
                    operator: "eq",
                    value: o
                });
                u.one("dataBound", function() {
                    n(r.gridSelector + " " + r.editSelector).click()
                })
            })
        }
        i(r.rememberStateKey, r.gridSelector)
    }
    ;
    siberia.grid.setExpandMode = function(t, i) {
        function f(t) {
            function u(n) {
                var t = n.sender
                  , u = t.dataSource.getByUid(n.masterRow.data("uid"));
                t.expandedItems[u[i]] = !0;
                r(t)
            }
            function r(n) {
                var t = f(n);
                n.trigger("allRowsExpanded", {
                    isAllExpanded: t
                })
            }
            function f(n) {
                for (var u = n.expandedItems, t = n.dataSource.data(), r = 0; r < t.length; r++) {
                    var f = t[r]
                      , e = f[i]
                      , o = !u[e];
                    if (o)
                        return !1
                }
                return t.length > 0
            }
            function e(n) {
                var t = n.sender
                  , u = t.dataSource.getByUid(n.masterRow.data("uid"));
                t.expandedItems[u[i]] = !1;
                r(t)
            }
            var i = t.dataSource.options.schema.model.id;
            t.bind("detailExpand", u);
            t.bind("detailCollapse", e);
            t.bind("dataBound", function(t) {
                var i = t.sender;
                n.each(i.expandedItems, function(n, t) {
                    var r = i.dataSource.get(n);
                    r && t && i.expandRow("tr[data-uid=" + r.uid + "]")
                });
                r(i)
            })
        }
        function e(t, i) {
            i.on("click", ".js-grid-expand-section", function(i) {
                var r = n(i.currentTarget).closest(".k-master-row")
                  , u = r.next(".k-detail-row");
                u.length == 0 || u.is(":hidden") ? t.expandRow(r) : t.collapseRow(r)
            })
        }
        var u = n(t)
          , r = u.data("kendoGrid");
        r && (r.expandedItems = r.expandedItems || {},
        i && f(r),
        e(r, u))
    }
    ;
    siberia.grid.onChangeHideNoDataAction = function(t) {
        var i = t.sender.dataItems().length > 0;
        t.sender.content && n(t.sender.content).toggle(i);
        t.sender.table && n(t.sender.table).toggle(i);
        t.sender.pager && t.sender.pager.element && n(t.sender.pager.element).toggle(i)
    }
    ;
    var i = function(t, i) {
        var f = n(i);
        if (f.length != 0 && t) {
            var r = f.data("kendoGrid")
              , e = function() {
                return siberia.constants.localStorageKendoGridStateKey + t
            }
              , o = function(n) {
                siberia.localStorage.setJSON(e(), n)
            }
              , s = function(n) {
                if (!n || !n.filter)
                    return n;
                var t = n.filter.filters
                  , i = r.options.dataSource.schema.model.fields;
                return t.forEach(function(t, r) {
                    var u = i[t.field];
                    u && u.type == "date" && (n.filter.filters[r].value = kendo.parseDate(t.value))
                }),
                n
            }
              , h = function() {
                return n.extend({
                    filter: r.dataSource.filter(),
                    sort: r.dataSource.sort(),
                    page: r.dataSource.page(),
                    pageSize: r.dataSource.pageSize()
                }, s(siberia.localStorage.getJSON(e())))
            }
              , c = function(n) {
                return {
                    filter: n.dataSource.filter(),
                    sort: n.dataSource.sort(),
                    page: n.dataSource.page(),
                    pageSize: n.dataSource.pageSize()
                }
            }
              , u = h();
            r.dataSource.query({
                page: u.page,
                pageSize: u.pageSize,
                sort: u.sort,
                filter: u.filter
            });
            r.bind("dataBinding", function(n) {
                o(c(n.sender))
            })
        }
    }
      , t = {};
    siberia.grid.loadTabStripGrids = function(t, i) {
        var r = n(t).data("kendoTabStrip");
        r && r.bind("show", function() {
            siberia.grid.loadCurrentTabGrid(t, i)
        })
    }
    ;
    siberia.grid.loadCurrentTabGrid = function(t, i) {
        var r = n(t).data("kendoTabStrip")
          , u = r.select().index()
          , f = r.contentElements[u]
          , e = n(f).find(i);
        siberia.grid.loadGridData(e)
    }
    ;
    siberia.grid.loadGridData = function(n) {
        var i, r;
        n && (i = n.data("kendoGrid"),
        i) && (r = i.element.attr("id"),
        t[r] || (i.dataSource.read(),
        t[r] = !0))
    }
}(jQuery),
function(n) {
    function u(t, i) {
        if (i.position.centered) {
            var r = t.find('[data-role="grid"]');
            r.each(function(i, r) {
                var u = n(r).data("kendoGrid");
                if (u)
                    u.one("dataBound", function() {
                        siberia.popup.center(t)
                    })
            })
        }
    }
    function r(n) {
        function u(n) {
            n.keyCode === 9 && n.shiftKey && (r.focus(),
            n.preventDefault())
        }
        function f(n) {
            n.keyCode !== 9 || n.shiftKey || (i.focus(),
            n.preventDefault())
        }
        var t = n.find("input[type!=hidden]:visible, textarea:visible, a:visible, button:visible"), i, r;
        (n.data("firstFocusableKeydown") && t.unbind("keydown", n.data("firstFocusableKeydown")),
        n.data("lastFocusableKeydown") && t.unbind("keydown", n.data("lastFocusableKeydown")),
        t.length) && (i = t.first(),
        r = t.last(),
        i.bind("keydown", u),
        r.bind("keydown", f),
        n.data("firstFocusableKeydown", u),
        n.data("lastFocusableKeydown", f))
    }
    function f(t, f) {
        function o(i, r) {
            var u = r.preLoadOptions, o = u.spinnerContainer, s;
            u.showSpinnerForParentPopup && (s = 0,
            n(".k-window:visible").each(function(n, t) {
                t.style && t.style.zIndex > s && (s = t.style.zIndex,
                o = t)
            }));
            n(o).spinner(!0);
            n.ajax({
                type: u.type,
                url: u.dataUrl,
                dataType: u.dataType,
                traditional: !0,
                data: u.data,
                success: function(n) {
                    u.preLoadSuccess && u.preLoadSuccess(n) == !1 || e(t, f)
                },
                error: function(n) {
                    u.preLoadError && u.preLoadError(n)
                },
                complete: function() {
                    n(o).spinner(!1);
                    u.preLoadComplete && u.preLoadComplete()
                }
            })
        }
        function e(t, u) {
            function c(t) {
                function r() {
                    u.close && u.close();
                    siberia.common.isInternetExplorer() && n(siberia.popup).trigger("closed", {
                        context: "context"
                    })
                }
                if (!e && u.cancel) {
                    var i = {
                        canSubmitCancelOperation: !1,
                        cancelClose: !1,
                        windowClosedByAction: t.userTriggered
                    };
                    if (u.cancel(i),
                    i.cancelClose) {
                        t.preventDefault();
                        t.sender.one("close", c)
                    }
                    if (i.canSubmitCancelOperation)
                        return n.when(w(t)).then(r)
                }
                r()
            }
            function y() {
                siberia.validation.focusFirstFieldOrValidationError(t);
                u.init && u.init();
                siberia.common.isInternetExplorer() && n(siberia.popup).trigger("activated", {
                    context: "context"
                });
                u.usability.loopTabStops && r(t)
            }
            function p(n) {
                n && n.preventDefault();
                e = !1;
                siberia.validation.clearValidationErrors(t);
                u.clear && u.clear();
                u.position.centered ? f.center().open() : f.open();
                u.opened && u.opened()
            }
            function k(t, r) {
                return console.debug(i + "Start preSubmittedDeferred"),
                n.Deferred(function(i) {
                    if (t && t.preSubmit)
                        return n.when(t.preSubmit(r)).then(function(n) {
                            if (n === !1) {
                                i.reject();
                                return
                            }
                            i.resolve()
                        });
                    i.resolve()
                }).always(function() {
                    console.debug(i + "Stop preSubmittedDeferred")
                })
            }
            function w(r) {
                return console.debug(i + "Start submit"),
                t.data("submitting", !0),
                k(u, r).then(function() {
                    var i, f, e, o;
                    u.ajax.enabled ? (t.spinner(!0),
                    i = n(r.target).closest("form"),
                    i.length || (i = t.find("form")),
                    f = i.get(0).action,
                    u.submitUrlAttr && n(r.currentTarget).attr(u.submitUrlAttr) && (f = n(r.currentTarget).attr(u.submitUrlAttr)),
                    u.customSubmitUrl && (f = u.customSubmitUrl),
                    e = {},
                    u.extraData && (e = u.extraData(r)),
                    o = {
                        traditional: !0,
                        url: f,
                        data: e,
                        async: u.ajax.async,
                        success: function(n) {
                            siberia.validation.processAjaxErrors(i, n.Errors) ? b(n, r) : u.ajaxError && u.ajaxError(n, r)
                        },
                        error: function() {
                            siberia.validation.showFormNetworkError(i);
                            u.error && u.error()
                        },
                        complete: function() {
                            t.spinner(!1);
                            u.complete && u.complete()
                        }
                    },
                    u.ajax.timeout >= 0 && (o.timeout = u.ajax.timeout),
                    i.ajaxSubmit(o)) : b(null, r)
                }).always(function() {
                    console.debug(i + "Stop submit");
                    t.data("submitting", !1)
                })
            }
            function b(n, t) {
                var i = {
                    cancelClose: !1
                };
                u.success && u.success(n, t, i);
                i.cancelClose || (e = !0,
                f.close())
            }
            var e, l = !0, f = t.data("kendoWindow"), h, v;
            f ? f.setOptions(u.windowOptions) : (t.kendoWindow(u.windowOptions),
            f = t.data("kendoWindow"),
            l = !1);
            u.customClass && f.wrapper.addClass(u.customClass);
            var o = function(t) {
                return n(this).blur(),
                w(t),
                !1
            }
              , s = function() {
                return n(this).blur(),
                f.close(),
                !1
            }
              , a = function(n) {
                n.originalEvent.repeat || (u.usability.submitOnEnter && n.keyCode === 13 && n.target.type !== "textarea" && !t.data("submitting") && (n.preventDefault(),
                o()),
                u.usability.cancelOnEscape && n.keyCode === 27 && s())
            };
            if (l && (t.find(u.submitBtn).unbind("click", t.data("popupSubmitClick")),
            t.find(u.cancelBtn).unbind("click", t.data("popupCancelClick")),
            t.unbind("keydown", t.data("popupKeydown"))),
            u.submitBtn && (h = t.find(u.submitBtn),
            u.submitText && h.text(u.submitText),
            h.bind("click", o)),
            u.cancelBtn && t.find(u.cancelBtn).bind("click", s),
            t.bind("keydown", a),
            t.data("popupSubmitClick", o),
            t.data("popupCancelClick", s),
            t.data("popupKeydown", a),
            t.data("usability", u.usability),
            u.openPopupBtn)
                f.bind("activate", y),
                f.bind("close", c),
                n(u.openPopupBtn).click(p);
            else {
                f.one("activate", y);
                f.one("close", c)
            }
            v = !u.openPopupBtn || u.forceOpenPopup;
            v && p()
        }
        f.preLoadOptions && f.preLoadOptions.dataUrl && f.preLoadOptions.dataUrl != "" ? o(t, f) : (u(t, f),
        e(t, f))
    }
    var i, t;
    siberia.ensureObject("siberia.popup");
    i = "siberia-popup.js: ";
    siberia.popup.create = function(t, i) {
        var u = {
            openPopupBtn: null,
            submitBtn: ".js-popup-submit, .js-popup-submit-create, .js-popup-submit-save",
            cancelBtn: ".js-popup-cancel",
            submitText: undefined,
            submitUrlAttr: null,
            customSubmitUrl: null,
            customClass: null,
            position: {
                centered: !0
            },
            ajax: {
                enabled: !0,
                async: !0
            },
            windowOptions: {
                actions: ["Close"],
                draggable: !0,
                modal: !0,
                pinned: !1,
                resizable: !1,
                animation: !1,
                title: "",
                height: "auto",
                width: "auto",
                opened: !0
            },
            forceOpenPopup: !1,
            preLoadOptions: {
                showSpinnerForParentPopup: !1,
                spinnerContainer: ".js-global-spinner-container",
                dataUrl: null,
                type: "POST",
                dataType: "html",
                data: null,
                preLoadSuccess: null,
                preLoadError: null,
                preLoadComplete: null
            },
            init: null,
            clear: null,
            opened: null,
            preSubmit: null,
            success: null,
            ajaxError: null,
            error: null,
            cancel: null,
            close: null,
            extraData: null,
            usability: {
                submitOnEnter: !1,
                cancelOnEscape: !1,
                loopTabStops: !1
            }
        }
          , r = n.extend(!0, {}, u, i || {});
        return i && i.windowOptions && i.windowOptions.actions && !i.windowOptions.actions.length && (r.windowOptions.actions = []),
        n(t).each(function() {
            var t = n(this);
            f(t, r)
        }),
        this
    }
    ;
    t = function(t, i) {
        var r = n(t)
          , u = r.data("kendoWindow");
        return u && i(u, r)
    }
    ;
    siberia.popup.center = function(n) {
        return t(n, function(n) {
            n.center()
        })
    }
    ;
    siberia.popup.close = function(n) {
        return t(n, function(n) {
            n.close()
        })
    }
    ;
    siberia.popup.restore = function(n) {
        return t(n, function(n) {
            n.restore().center()
        })
    }
    ;
    siberia.popup.isOpened = function(n) {
        return t(n, function(n) {
            return n.options.visible
        })
    }
    ;
    siberia.popup.isMinimized = function(n) {
        return t(n, function(n) {
            return n.options.isMinimized
        })
    }
    ;
    siberia.popup.restoreIfActive = function(n) {
        return siberia.popup.isMinimized(n) || siberia.popup.isOpened(n) ? (siberia.popup.restore(n),
        !0) : !1
    }
    ;
    siberia.popup.reInitUsability = function(n) {
        return t(n, function(n, t) {
            var i = t.data("usability");
            return i && i.loopTabStops && r(t)
        })
    }
    ;
    siberia.popup.open = function(t) {
        var u = t.substring(1).replace("/", "_"), f = document.getElementById(u), i, r;
        (f || (i = n(".js-global-spinner-container"),
        i.spinner(!0),
        n.ajax(t).then(function(t) {
            var f = n(t), e = n("<div>").attr("id", u).append(f).appendTo("body").hide(), o = {
                windowOptions: {
                    title: f.data("popupTitle"),
                    width: f.data("popupWidth") || "auto"
                }
            }, r, s;
            try {
                r = siberia.common.getFromPath({
                    siberia: siberia
                }, f.data("popupOptions"))
            } catch (h) {
                r = null
            }
            s = r && typeof r == "function" ? r(e, o) : n.Deferred().resolve(o).promise();
            s.done(function() {
                i.spinner(!1)
            }).then(function(n) {
                siberia.popup.create(e, n);
                siberia.common.applyBinding(e)
            })
        }, function() {
            i.spinner(!1)
        })),
        r = n(f).data("kendoWindow"),
        r) && r.open()
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.windows");
    siberia.windows.initTabNavigation = function(t) {
        function e(t) {
            var h, s, o, l, a, f, v;
            if (t.which === 9 && (h = t.target,
            s = n.inArray(h, i),
            s != -1)) {
                t.preventDefault();
                var y = t.shiftKey ? -1 : 1
                  , e = s + y
                  , c = i.length - 1;
                e = e < 0 ? c : e > c ? 0 : e;
                o = i[e];
                u ? (f = n(o).closest('div[role="tabpanel"]'),
                f.length > 0 && !f.hasClass("k-state-active") && (l = n(r.tabstrip + ' > div[role="tabpanel"]'),
                a = n.inArray(f.get(0), l),
                u.select(a))) : (f = n(o).closest("div.tab-content"),
                f.length > 0 && !f.hasClass("current-tab") && (v = f.attr("id"),
                n('a.js-tab-item[href="#' + v + '"]').click()));
                n(o).focus()
            }
        }
        var f = {
            parents: ".js-tab-navigation-parent",
            labels: "label.required",
            action: ".js-tab-navigation-action",
            tabstrip: undefined
        }, r = n.extend({}, f, t), i = n(), u;
        n(r.labels, r.parents).each(function() {
            var e = n(this), f = e.attr("for"), t, r, u;
            f && (t = n("#" + f),
            r = t.data("kendoDropDownList"),
            r && (t = n(r.wrapper)),
            u = t.data("kendoMultiSelect"),
            u && (t = n(u.input)),
            i = i.add(t))
        });
        i = i.add(r.action, r.parents);
        i.keydown(e);
        u = r.tabstrip ? n(r.tabstrip).data("kendoTabStrip") : null
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.tabs");
    siberia.tabs = function() {
        function u() {
            var e = n(".js-tab-content"), f = n(".js-tab-items").data("selected-tab"), u;
            n(".js-collapse-menu").length > 0 && n(".js-collapse-menu").hide();
            n(".js-collapse-menu-cdm").length > 0 && n(".js-collapse-menu-cdm").hide();
            f ? (u = n("#" + f),
            u.show().addClass("current-tab"),
            u.hasClass("js-obstetric-tab") && (i = ".js-collapse-menu",
            r(),
            t.addClass("obstetric-mode")),
            u.hasClass("js-cdm-tab") && (i = ".js-collapse-menu-cdm",
            r(),
            t.addClass("cdm-mode")),
            n('.js-tab-items li a[href="#' + f + '"]').parent().addClass("current")) : (e.hide().first().show().addClass("current-tab"),
            n(".js-tab-items li").first().addClass("current"))
        }
        function r() {
            n(".sidebar-console-fixed-panel").hide();
            t.animate({
                width: "48px"
            }, 200);
            n(i).show()
        }
        function f() {
            var u = n(".js-collapse-sidebar")
              , t = {};
            n(".js-collapse-menu-button").click(function(i) {
                i.preventDefault();
                t = {
                    width: "234px"
                };
                n(".js-collapse-menu").hide();
                n(".js-collapse-menu-cdm").hide();
                u.animate(t, 200);
                n(".sidebar-console-fixed-panel").show();
                n(".js-hide-sidebar-btn").show()
            });
            n(".js-hide-sidebar-btn").click(function(n) {
                n.preventDefault();
                r(i)
            })
        }
        function e() {
            n(".js-tab-items .js-tab-item").click(function(u) {
                var f, e, o, s;
                u.preventDefault();
                t.removeClass("obstetric-mode");
                t.removeClass("cdm-mode");
                f = n(u.target);
                e = f.closest(".js-tab-items").find(".current .js-tab-item");
                e.length == 0 && (e = n(".current .js-tab-item"));
                o = e.attr("href");
                s = f.attr("href");
                n(o).hide().removeClass("current-tab");
                n(s).show().addClass("current-tab");
                e.parent().removeClass("current");
                f.parent().addClass("current");
                n(".js-hide-sidebar-btn").hide();
                n(".js-obstetric-menu-item").parent().hasClass("current") && (i = ".js-collapse-menu",
                r(),
                t.addClass("obstetric-mode"));
                n(".js-cdm-menu-item").parent().hasClass("current") && (i = ".js-collapse-menu-cdm",
                r(),
                t.addClass("cdm-mode"));
                f.trigger("tabOpened")
            });
            f()
        }
        function o() {
            u();
            e()
        }
        var t = n(".js-collapse-sidebar"), i;
        return {
            init: o()
        }
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.tabs.selection");
    siberia.tabs.selection.init = function(t, i) {
        function f(t) {
            var i = t.item
              , r = n(i).index()
              , f = n(u.hiddenField);
            n.each(f, function(t, i) {
                n(i).val(r)
            })
        }
        var u = n.extend(!0, {}, {
            hiddenField: ".js-selected-tab-index-field"
        }, i || {})
          , r = n(t).data("kendoTabStrip");
        r && r.bind("select", f)
    }
    ;
    siberia.tabs.selection.initSideMenu = function(t, i) {
        function f(t) {
            var i = n(t.currentTarget).prop("href").split("#")[1], r;
            i == "patient_healthStatusesTab" && (i = "patient_mainTab");
            r = n(u.hiddenField);
            n.each(r, function(t, r) {
                n(r).val(i)
            })
        }
        var u = n.extend(!0, {}, {
            hiddenField: ".js-selected-tab-index-field"
        }, i || {})
          , r = n(t);
        r.length > 0 && r.bind("click", f)
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.searchBox");
    siberia.searchBox = function() {
        function r(i) {
            if (t = n(".js-search-box"),
            t.length != 0)
                t.on("keydown", function(n) {
                    var u = n.keyCode || n.which, r;
                    u == 13 && (r = t.val().trim(),
                    i(r))
                })
        }
        function u(n, t, r, u) {
            var e = !1;
            if (i(n, !1),
            n.data().length == 0 && (e = !0),
            e)
                n.one("requestStart", f);
            r && n.sort(r);
            u && n.pageSize(u);
            t && n.filter(t);
            i(n, !0);
            n.read()
        }
        function f(n) {
            n.preventDefault()
        }
        function i(n, t) {
            n.options.serverFiltering = t;
            n.options.serverPaging = t;
            n.options.serverSorting = t;
            n.options.serverGrouping = t;
            n.options.serverAggregates = t
        }
        function e() {
            var t = n(".js-search-box").length > 0 ? n(".js-search-box").val() : "";
            return {
                search: t
            }
        }
        var t;
        return {
            initSearch: r,
            getSearchString: e,
            applyFilterAndSort: u
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.speechRecognition");
    var r = function() {
        return n(".js-speech-recognition-settings")
    }
      , t = ""
      , i = ""
      , e = ".js-confirm-speech-recognition"
      , o = ".js-cancel-speech-recognition"
      , l = function() {
        t = "#frontend-speech-recognition-text-dev";
        i = "#frontend-speech-recognition-dev"
    }
      , a = function() {
        t = "#frontend-speech-recognition-text";
        i = "#frontend-speech-recognition"
    }
      , u = function(n) {
        n !== undefined && (n ? l() : a());
        var t = ["iphone", "ipod", "ipad", "android"].indexOf(navigator.platform.toLowerCase()) === -1;
        return t && r().length > 0
    }
      , f = function() {
        n("#NUSAI_CommandBar_Container").css("z-index", "9000");
        n("#NUSAI_Options_Container").css("z-index", "9000");
        typeof NUSA_stopRecording == "function" && NUSA_stopRecording()
    }
      , s = function() {
        typeof NUSA_startRecording == "function" && NUSA_startRecording();
        n("#NUSAI_CommandBar_Container").css("z-index", "19000");
        n("#NUSAI_Options_Container").css("z-index", "19000")
    }
      , v = function() {
        if (u()) {
            var n = r();
            NUSAI && NUSAI.Data && NUSAI_setCookie("NUSA_Guids", n.attr("data-license-guid") + "/" + n.attr("data-partner-guid"));
            NUSA_userId = n.attr("data-user-id");
            NUSA_language = n.attr("data-language");
            NUSA_topic = n.attr("data-topic");
            NUSA_applicationName = n.attr("data-application-name");
            NUSA_service = n.attr("data-service-url");
            NUSA_enableAll = !1
        }
    }
      , h = !1
      , y = function() {
        return n.Deferred(function(n) {
            if (!h && u()) {
                h = !0;
                var i = r()
                  , f = function() {
                    function i() {
                        if (typeof NUSAI_onLoadInternal == "undefined" || NUSAI_onLoadInternal == null)
                            return setTimeout(i, 50);
                        NUSAI_onLoad();
                        t()
                    }
                    function t() {
                        if (HasSilverlight()) {
                            if (typeof NUSAICtrlI_isSLControlInitialized == "undefined" || !NUSAICtrlI_isSLControlInitialized())
                                return setTimeout(t, 50)
                        } else if (HasGetUserMedia() && (typeof NUSAICtrl_Recorder == "undefined" || NUSAICtrl_Recorder.mediaStreamSource == null))
                            return setTimeout(t, 50);
                        n.resolve()
                    }
                    setTimeout(i, 50)
                }
                  , t = document.createElement("script");
                t.type = "text/javascript";
                t.src = i.attr("data-javascript-url");
                t.onload = f;
                document.getElementsByTagName("head")[0].appendChild(t)
            } else
                n.resolve()
        })
    };
    window.NUSA_configure = v;
    siberia.speechRecognition.loadScript = y;
    siberia.speechRecognition.startRecording = s;
    siberia.speechRecognition.stopRecording = f;
    siberia.speechRecognition.enabled = u;
    var c = function() {
        return n(".js-clinical-console-content-wrapper [data-nusa-concept-name]")
    }
      , p = function(r, u) {
        c().attr("disabled", "");
        n(t).val("").attr("placeholder", text.global.status.loadingSpeech).focus();
        n(i).show().one("click", e, r).one("click", o, u).closest(".popup-inner").addClass("frontend-mode");
        siberia.speechRecognition.loadScript().then(s).then(function() {
            requestAnimationFrame(function() {
                n(t).attr("placeholder", text.global.status.readyToRecord).focus()
            })
        })
    }
      , w = function() {
        c().removeAttr("disabled", "");
        n(i).hide().off("click", e).off("click", o).closest(".popup-inner").removeClass("frontend-mode");
        siberia.speechRecognition.resetFrontend = n.noop
    };
    siberia.speechRecognition.frontend = function() {
        return n.Deferred(function(i) {
            var u = function() {
                var r = n(t).val();
                i.resolve(r);
                f()
            }
              , r = function() {
                i.reject();
                f()
            };
            siberia.speechRecognition.resetFrontend = r;
            p(u, r)
        }).always(w)
    }
    ;
    siberia.speechRecognition.resetFrontend = n.noop
}(jQuery),
function(n, t) {
    function r(n) {
        n.ul && n.ul.find("li.k-state-focused").removeClass("k-state-focused")
    }
    function u(n, t) {
        if (n && n[0].hasAttribute("data-multiselect-initial-values")) {
            var i = JSON.parse(n[0].getAttribute("data-multiselect-initial-values"));
            siberia.multiSelect.attach(t, i, "Id")
        }
    }
    function f(n) {
        n.siberiaServerState = {
            lastFilter: "",
            serverFilteredData: [],
            serverHasMoreData: !0,
            hasFilteringRequest: !1
        }
    }
    function o(t, i, r) {
        var u = n.extend({}, n.fn.ccAutocomplete.defaults, r)
          , o = siberia.config.filtering.minCharsBeforeServerRequest;
        f(t);
        t.bind("dataBound", function() {
            t.siberiaServerState.hasFilteringRequest = !1
        });
        t.bind("filtering", function(n) {
            var r = n && n.filter && n.filter.value ? n.filter.value.toLowerCase() : "", s, h, f;
            t.siberiaServerState.serverFilteredData || (s = n.sender.dataSource.data(),
            s.length > 0 && (t.siberiaServerState.serverFilteredData = s,
            t.siberiaServerState.serverHasMoreData = t.siberiaServerState.serverFilteredData.length >= siberia.config.filtering.maxItemsForOneSelection));
            h = r.length >= o && t.siberiaServerState.lastFilter !== r && (!t.siberiaServerState.lastFilter || t.siberiaServerState.serverHasMoreData || u.forceServerFilteringCondition(t.siberiaServerState, r) || r.substring(0, t.siberiaServerState.lastFilter.length) !== t.siberiaServerState.lastFilter);
            h || t.siberiaServerState.hasFilteringRequest ? (t.siberiaServerState.lastFilter = r,
            t.siberiaServerState.serverFilteredData = null,
            t.siberiaServerState.serverHasMoreData = !1,
            t.siberiaServerState.hasFilteringRequest = !0) : (n.preventDefault(),
            f = [],
            r && (t.siberiaServerState.serverFilteredData || (t.siberiaServerState.serverFilteredData = n.sender.dataSource.data(),
            t.siberiaServerState.serverHasMoreData = !t.siberiaServerState.serverFilteredData || t.siberiaServerState.serverFilteredData.length >= siberia.config.filtering.maxItemsForOneSelection),
            e(t.siberiaServerState.serverFilteredData, r, i, f, u),
            u.extraCheckFilter(r) && (r = u.extraFilterPrefix + r,
            e(t.siberiaServerState.serverFilteredData, r, i, f, u))),
            n.sender.dataSource.data(f))
        })
    }
    function e(t, i, r, u, f) {
        n.each(t, function(n, t) {
            s(t, i, r, u, f)
        })
    }
    function s(n, t, i, r, u) {
        u = u || {};
        var e = u.multipleFilters ? t.trim().split(" ") : [t]
          , f = !0;
        e.forEach(function(t) {
            t && (h(n, i, t) || (f = !1))
        });
        f && r.push(n)
    }
    function h(t, r, u) {
        var f, e;
        if (n.isArray(r)) {
            for (f = 0; f < r.length; f++)
                if (e = r[f],
                i(t[e], u))
                    return !0;
            return !1
        }
        return i(t[r], u)
    }
    function i(n, t) {
        if (n === null || n === undefined)
            return !1;
        if (typeof n == "string")
            return n.toLowerCase().indexOf(t) === 0;
        if (typeof n == "number")
            return n.toString().toLowerCase().indexOf(t) === 0;
        for (var r = 0; r < n.length; r++)
            if (i(n[r], t))
                return !0;
        return !1
    }
    siberia.ensureObject("siberia.multiSelect");
    siberia.multiSelect.initClientMultiSelect = function(t) {
        var i = n.extend({}, {
            multiSelectSelector: ".js-client-multiselect"
        }, t);
        n(i.multiSelectSelector).each(function() {
            function o() {
                t.input.on("keydown", function(n) {
                    e(n, !0)
                })
            }
            function s() {
                t.input.on("keydown", function(n) {
                    e(n, !1)
                })
            }
            function e(i, r) {
                var f = i.keyCode || i.which, u;
                if (f == 9) {
                    if (u = t.current(),
                    !u || u.length == 0 || !t.listView.element.is(":visible"))
                        return;
                    n(u).click();
                    r && i.preventDefault()
                }
            }
            var f = n(this), t = f.data("kendoMultiSelect"), i;
            t != null && (u(f, t),
            t.listView.bind("change", function() {
                r(t)
            }),
            i = t.options.maxSelectedItems,
            i == null || i > 1 ? o() : s())
        })
    }
    ;
    siberia.multiSelect.getSingleObject = function(n, t) {
        var r = n.data("kendoMultiSelect"), i;
        return r && (i = r.dataItems()[0],
        i) ? i[t] : ""
    }
    ;
    siberia.multiSelect.empty = function(t, i) {
        var r = n(t).data("kendoMultiSelect");
        r && (r.dataSource.data([]),
        siberia.multiSelect.clear(r, i))
    }
    ;
    siberia.multiSelect.clear = function(n, t) {
        n && (n.value(""),
        t === !0 && n.trigger("change"),
        r(n))
    }
    ;
    siberia.multiSelect.clearValue = function(t, i) {
        var r = n(t).data("kendoMultiSelect");
        siberia.multiSelect.clear(r, i)
    }
    ;
    siberia.multiSelect.appendOrAttach = function(n, t, i, r) {
        var u = n.options.maxSelectedItems > 1
          , f = u ? n.dataItems().concat(t) : t;
        siberia.multiSelect.attach(n, f, i, r)
    }
    ;
    siberia.multiSelect.attach = function(t, i, r, u) {
        if (t) {
            if (i || (i = []),
            t.dataSource.data(i),
            t.dataSource.filter() && (t.dataSource.filter().filters = []),
            t._fetch = !0,
            t._retrieveData = !1,
            i.length > 0) {
                var f = [];
                n.each(i, function(n, t) {
                    f.push(t[r])
                });
                t.value(f)
            } else
                t.value("");
            t._fetch = !1;
            u === !0 && t.trigger("change")
        }
    }
    ;
    siberia.multiSelect.getMultiValues = function(t, i) {
        t || (t = []);
        var r = [];
        return t.length > 0 && n.each(t, function(n, t) {
            r.push(t[i])
        }),
        r
    }
    ;
    siberia.multiSelect.attachValue = function(t, i, r, u) {
        var f = n(t).data("kendoMultiSelect") || n(this).data("kendoAutoComplete");
        siberia.multiSelect.attach(f, i, r, u)
    }
    ;
    siberia.multiSelect.readAndSelectValue = function(t, i, r) {
        var u = n(t).data("kendoMultiSelect") || n(this).data("kendoAutoComplete");
        return u.dataSource.read().then(function() {
            requestAnimationFrame(function() {
                u.value(i);
                r === !0 && u.trigger("change")
            })
        })
    }
    ;
    siberia.multiSelect.getObjects = function(t, i) {
        var r = t.data("kendoMultiSelect") || n(this).data("kendoAutoComplete");
        return r ? r.dataItems().map(function(n) {
            return n[i]
        }) : []
    }
    ;
    siberia.multiSelect.clearServerFilteringState = function(t) {
        n(t).each(function() {
            var t = n(this).data("kendoMultiSelect") || n(this).data("kendoAutoComplete");
            t && f(t)
        })
    }
    ;
    siberia.multiSelect.fixServerFiltering = function(t, i, r) {
        n(t).each(function() {
            var t = n(this).data("kendoMultiSelect") || n(this).data("kendoAutoComplete");
            t && o(t, i, r)
        })
    }
    ;
    siberia.multiSelect.isEnabled = function(n) {
        return n && !n.element.is("[disabled]")
    }
    ;
    siberia.multiSelect.enable = function(t, i) {
        n(t).each(function() {
            var t = n(this).data("kendoMultiSelect") || n(this).data("kendoAutoComplete");
            t && t.enable(i)
        })
    }
    ;
    siberia.multiSelect.cloneValues = function(t, i) {
        var r = n(t).data("kendoMultiSelect") || n(this).data("kendoAutoComplete"), u = n(i).data("kendoMultiSelect") || n(this).data("kendoAutoComplete"), e = r.dataItems().slice(0), f;
        u.dataSource.data(e);
        f = r.value().slice(0);
        u.value(f)
    }
    ;
    siberia.multiSelect.addReadonlystateForKendoMultiselect = function() {
        var n = t.ui.MultiSelect.prototype.readonly;
        t.ui.MultiSelect.prototype.readonly = function(t) {
            n.apply(this, arguments);
            t ? this.wrapper.addClass("multiselect__state-readonly") : this.wrapper.removeClass("multiselect__state-readonly")
        }
    }
    ;
    siberia.multiSelect.getValues = function(t) {
        var i = n(t).data("kendoMultiSelect") || n(this).data("kendoAutoComplete");
        return i.value()
    }
    ;
    siberia.multiSelect.setInitialValues = function(t) {
        var i = ".js-client-multiselect";
        t && (i = t + " " + i);
        n(i).each(function() {
            var t = n(this).data("kendoMultiSelect");
            t != null && u(n(this), t)
        })
    }
    ;
    n.fn.fixServerFilteringDefaults = {
        forceServerFilteringCondition: function() {
            return !1
        },
        multipleFilters: !1,
        extraCheckFilter: function() {
            return !1
        },
        extraFilterPrefix: ""
    };
    n(document).ready(function() {
        siberia.multiSelect.initClientMultiSelect();
        siberia.multiSelect.fixServerFiltering("#SuburbId", ["PostCode", "SuburbName"])
    });
    siberia.multiSelect.addReadonlystateForKendoMultiselect()
}(jQuery, kendo),
function(n) {
    function t(t) {
        var e = {
            container: f,
            warning: {
                selector: "",
                message: null,
                placeholders: [],
                shorten: !1
            }
        }
          , i = n.extend(!0, {}, e, t || {})
          , u = n(i.container)
          , r = u.find(i.warning.selector);
        u.length > 0 && r.length > 0 && (i.warning.message && (i.warning.shorten ? s(r, i.warning.message) : r.html(i.warning.message)),
        n.each(i.warning.placeholders, function(n, t) {
            var i = r.find(t.selector);
            i.length > 0 && i.text(t.message)
        }),
        r.closest(".notification-item").show(),
        u.show())
    }
    function o(t) {
        var r = n.extend(!0, {}, {
            container: "#warning-container",
            warning: {
                selector: ""
            }
        }, t || {})
          , i = n(r.container)
          , u = i.find(r.warning.selector);
        i.length > 0 && u.length > 0 && (u.closest(".notification-item").hide(),
        e(i) || i.hide())
    }
    function e(t) {
        var i = n.grep(t.find(".js-inner-notification-container").children(), function(t) {
            return n(t).css("display") != "none"
        });
        return i.length > 0
    }
    function s(n, t) {
        if (t.length <= 200 || t.indexOf(" ", 200) < 0) {
            n.html(t);
            return
        }
        var f = t.indexOf(" ", 200)
          , e = t.substring(0, f + 1) + '<a class="' + i + '" href="">' + text.global.labels.showMore + '<\/a><div class="' + u + '" style="display:none;">' + t.substring(f) + '<\/div><a href="" style="display:none;" class="' + r + '">' + text.global.labels.hide + "<\/a>";
        n.html(e);
        n.find("." + i).bind("click", function(t) {
            h(t, n)
        });
        n.find("." + r).bind("click", function(t) {
            c(t, n)
        })
    }
    function h(t, i) {
        t.preventDefault();
        n(t.currentTarget).hide();
        i.find("." + r).show();
        i.find("." + u).show()
    }
    function c(t, r) {
        t.preventDefault();
        n(t.currentTarget).hide();
        r.find("." + i).show();
        r.find("." + u).hide()
    }
    siberia.ensureObject("siberia.warnings.container");
    var f = "#warning-container"
      , i = "js-show-more-warning"
      , r = "js-hide-more-warning"
      , u = "js-text-more-warning";
    siberia.warnings.container.toggleWarning = function(n, t, i) {
        i === !0 ? siberia.warnings.container.showWarning(n, t) : siberia.warnings.container.hideWarning(n, t)
    }
    ;
    siberia.warnings.container.showWarning = function(n, i) {
        var r = {
            warning: {
                selector: i
            }
        };
        n && (r.container = n);
        t(r)
    }
    ;
    siberia.warnings.container.showWarningWithMessage = function(n, i, r) {
        var u = {
            warning: {
                selector: i,
                message: r
            }
        };
        n && (u.container = n);
        t(u)
    }
    ;
    siberia.warnings.container.showShortenWarningWithMessage = function(n, i, r) {
        var u = {
            warning: {
                selector: i,
                message: r,
                shorten: !0
            }
        };
        n && (u.container = n);
        t(u)
    }
    ;
    siberia.warnings.container.showWarningWithPlaceholder = function(n, i, r, u) {
        var f = {
            warning: {
                selector: i,
                placeholders: [{
                    selector: r,
                    message: u
                }]
            }
        };
        n && (f.container = n);
        t(f)
    }
    ;
    siberia.warnings.container.hideWarning = function(n, t) {
        var i = {
            warning: {
                selector: t
            }
        };
        n && (i.container = n);
        o(i)
    }
    ;
    siberia.warnings.container.hasActiveWarnings = function(t) {
        var i = n(t || f);
        return e(i)
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.warningsPopup");
    siberia.warningsPopup = function() {
        function r(r, u, o, s) {
            i = u;
            t = r;
            var h = n(t).data("kendoWindow");
            h || siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.labels.warning,
                    width: "800"
                },
                clear: f
            });
            e(o, s);
            h = n(t).data("kendoWindow");
            h.center().open()
        }
        function u() {
            siberia.popup.close(t)
        }
        function f() {
            siberia.warnings.container.showWarningWithMessage("#warning-popup", "#warning-popup-message", i)
        }
        function e(i, r) {
            var u = n(t).find(".js-warning-confirm")
              , f = n(t).find(" .js-warning-cancel");
            i == null && u.hide();
            u.unbind("click");
            u.on("click", function() {
                n(t).data("kendoWindow").close();
                i != null && i()
            });
            f.unbind("click");
            f.on("click", function() {
                n(t).data("kendoWindow").close();
                r != null && r()
            })
        }
        var i = text.global.status.genericError, t;
        return {
            show: r,
            close: u
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.confirmationPopup");
    siberia.confirmationPopup = function() {
        function t(n, t, i, r) {
            siberia.popup.create(n, {
                ajax: {
                    enabled: !1
                },
                windowOptions: {
                    title: r || text.global.titles.popupConfirmation,
                    width: "400"
                },
                success: function() {
                    t != null && t()
                },
                cancel: function() {
                    i != null && i()
                }
            })
        }
        function i(i, r) {
            var u = n.Deferred();
            return t(i, function() {
                u.resolve(!0)
            }, function() {
                u.resolve(!1)
            }, r),
            u.promise()
        }
        return {
            open: t,
            openAsync: i
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.infoPopup");
    siberia.infoPopup = function() {
        function i(i, r, u) {
            siberia.popup.create(t, {
                ajax: {
                    enabled: !1
                },
                windowOptions: {
                    title: u.title,
                    width: u.width
                },
                clear: function() {
                    n(".js-popup-content-container", t).html(i)
                },
                close: function() {
                    r && r()
                }
            })
        }
        var t = "#info-popup";
        return {
            show: i
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.documentViewer");
    siberia.documentViewer = function() {
        function o(r, u, o) {
            var v;
            if (n(u).length > 0) {
                n(r).find(t).attr("data-related-grid-id", n(u).attr("id"));
                v = n(r).find(".js-block-wrapper");
                n(r).find(t).on("error", function() {
                    v.spinner(!1);
                    e(r, this)
                });
                n(r).find(t).on("load", function() {
                    n(this).attr("src") && v.spinner(!1)
                });
                var c = kendo.widgetInstance(u)
                  , a = []
                  , y = null
                  , p = function() {
                    var n = c.items();
                    n.each(function(n, t) {
                        var r = c.dataSource.getByUid(t.dataset.uid)
                          , i = r.get(r.idField);
                        t.className.indexOf("k-state-selected") >= 0 ? a[i] = !0 : a[i] && delete a[i]
                    })
                }
                  , l = function() {
                    y || (y = requestAnimationFrame(function() {
                        c.select(c.items().filter(function(n, t) {
                            var i = c.dataSource.getByUid(t.dataset.uid);
                            return !!a[i[i.idField]]
                        }));
                        y = null
                    }))
                };
                c.bind("change", p);
                c.bind("edit", l);
                c.bind("save", l);
                c.bind("cancel", l);
                c.dataSource.bind("change", l);
                c.bind("dataBound", function(n) {
                    f(r);
                    l(n)
                });
                o !== !0 && (n(window).resize(function() {
                    i(r)
                }),
                i(r));
                f(r);
                n(siberia.popup).bind("activated", s);
                n(siberia.popup).bind("closed", h)
            }
        }
        function s() {
            n(t).hide()
        }
        function h() {
            n(t).show()
        }
        function c(i, f) {
            var s = n(i).find(t), h, o;
            s.attr("src") != f && (h = n(i).find(".js-block-wrapper"),
            s.length > 0 && (s.parent().removeClass([r, u].join(" ")),
            f ? (h.spinner(!1),
            h.spinner(!0),
            s.attr("src", f),
            n(".tab-content.js-tab-content.current-tab") != undefined && n(".tab-content.js-tab-content.current-tab").length > 0 && n(".tab-content.js-tab-content.current-tab")[0].id != null && (o = "#" + n(".tab-content.js-tab-content.current-tab")[0].id,
            n(o + " .js-file-preview-iframe").contents().find("img").length > 0 ? n(o + " .js-file-preview-iframe").contents().find("img").css("max-width") != "100%" && n(o + " iframe").load(function() {
                n(o + " iframe").contents().find("body").append(n("<style type='text/css'> img { max-width:100%; }<\/style>"))
            }) : n(o + " iframe").load(function() {
                n(o + " iframe").contents().find("body").append(n("<style type='text/css'> img { max-width:100%; }<\/style>"))
            }))) : e(i, s)))
        }
        function f(i) {
            setTimeout(function() {
                var u = n(i).find(t), r;
                u.length > 0 && (r = n(i).find(t).attr("data-related-grid-id"),
                n("#" + r).find(".k-state-selected").length == 0 && l(i, u),
                a(i, kendo.widgetInstance(n("#" + r))))
            }, 100)
        }
        function e(n, t) {
            t.attr("src", "about:blank").parent().addClass(u)
        }
        function l(n, t) {
            t.attr("src", "about:blank").parent().addClass(r)
        }
        function a(t, i) {
            var r = n(t).find(".js-file-viewer-container");
            i && r.toggle(i.dataSource.data().length > 0)
        }
        function i(t) {
            if (n(t).length > 0) {
                var r = n(".content-nav").offset().top + n(".content-nav").height()
                  , i = v(t, r);
                n(t).height(n(t).height() == i ? i - 1 : i)
            }
        }
        function v(t, i) {
            var f = n(window).height()
              , r = n(t).offset().top + 2
              , u = parseFloat(n(".main-content").css("padding-bottom"));
            return n(window).height() >= i ? f - r - u : i - r - u
        }
        var r = "document-viewer__no-selection"
          , u = "document-viewer__bad-file"
          , t = ".js-file-preview-iframe";
        return {
            init: o,
            previewFile: c,
            setPreviewerHeight: i
        }
    }()
}(jQuery),
function(n) {
    function v(n, t) {
        this.value = e(n, t);
        this.destroy = h(n, t, f(n, t))
    }
    var t = "siberiaToggler"
      , r = {
        dataValueAttribute: "data-value",
        dataCheckAllSelectorAttribute: "data-check-all",
        buttonsSelector: "a",
        selectedClass: "js-toggler-selected",
        radioClass: "js-toggler-radio"
    }
      , i = function(t, i) {
        return n.map(n(t).find(i.buttonsSelector + "." + i.selectedClass), function(t) {
            var r = n(t);
            return r.attr(i.dataValueAttribute)
        })
    }
      , u = function(t, i, r) {
        n(t).find(i.buttonsSelector).removeClass(i.selectedClass).filter(function(t, u) {
            var f = n(u).attr(i.dataValueAttribute);
            return r.indexOf(f) != -1
        }).each(function(t, r) {
            n(r).addClass(i.selectedClass)
        })
    }
      , f = function(t, r) {
        return function(u) {
            u.preventDefault();
            var e = n(u.target)
              , f = n(t);
            f.hasClass(r.radioClass) ? (f.find(r.buttonsSelector).removeClass(r.selectedClass),
            e.addClass(r.selectedClass)) : e.toggleClass(r.selectedClass);
            f.trigger("change", [i(t, r)])
        }
    }
      , e = function(n, t) {
        return function() {
            return arguments.length == 0 ? i(n, t) : u.call(null, n, t, arguments[0])
        }
    }
      , o = function(t, r) {
        return function(u) {
            u.preventDefault();
            var f = n(t)
              , e = n(f.attr(r.dataCheckAllSelectorAttribute));
            e.toggleClass(r.selectedClass);
            f.find(r.buttonsSelector).toggleClass(r.selectedClass, e.hasClass(r.selectedClass));
            f.trigger("change", [i(t, r)])
        }
    }
      , s = function(t, i) {
        return function() {
            var r = n(t)
              , u = n.makeArray(r.find(i.buttonsSelector)).every(function(t) {
                return n(t).hasClass(i.selectedClass)
            })
              , f = n(r.attr(i.dataCheckAllSelectorAttribute));
            f.toggleClass(i.selectedClass, u)
        }
    }
      , h = function(t, i, r) {
        n(t).on("click", i.buttonsSelector, r);
        return l(t, i, r, c(t, i))
    }
      , c = function(t, i) {
        var f = n(t), e = n(f.attr(i.dataCheckAllSelectorAttribute)), r, u;
        if (e.length) {
            r = o(t, i);
            u = s(t, i);
            e.on("click", r);
            f.on("change", u);
            return a(t, i, r, u)
        }
        return null
    }
      , l = function(i, r, u, f) {
        return function() {
            f && f();
            n(i).off("click", r.buttonsSelector, u);
            n.removeData(i, t)
        }
    }
      , a = function(t, i, r, u) {
        return function() {
            var f = n(t)
              , e = f.attr(i.dataCheckAllSelectorAttribute)
              , o = n(e);
            o.off("click", r);
            f.off("change", u)
        }
    };
    n.fn.siberiaToggler = function(i) {
        return this.each(function(u, f) {
            n.data(f, t) || n.data(f, t, new v(f,n.extend({}, r, i)))
        })
    }
}(jQuery),
function(n) {
    var t = function(t) {
        return n(t)
    }
      , f = function(n) {
        return kendo.widgetInstance(n)
    }
      , e = function(n) {
        return !!n
    }
      , r = function(n) {
        return function(t) {
            return t.is(n)
        }
    }
      , o = function(t) {
        return n("#" + t.attr("data-switcher-id"))
    }
      , s = function(n) {
        return n.prop("elements") || n.find("fieldset,input,select")
    }
      , i = function(n, t) {
        t ? n.prop("disabled", !1) : n.prop("disabled", !0)
    }
      , u = function(u, o, h) {
        var c = h.prop("checked");
        i(o, c);
        var l = siberia.common.toArray(s(o)).map(t)
          , a = l.map(f).filter(e)
          , v = l.filter(r('input[type="checkbox"]'))
          , y = siberia.common.toArray(h.prop("form").elements).map(t).filter(r('input[type="radio"]'));
        u && y.forEach(function(n) {
            n.trigger("change", [!0])
        });
        u && v.forEach(function(t) {
            i(t, c);
            i(n("#" + t.attr("id") + '[type="hidden"]'), c);
            t.prop("checked", c).trigger("change", [!0])
        });
        a.forEach(function(n) {
            var t = siberia.common.toArray(n.wrapper.parents("fieldset")).reduce(function(n, t) {
                return n && !t.disabled
            }, !0);
            n.enable(t && c)
        })
    };
    n.fn.siberiaFieldsetSwitcher = function() {
        return this.each(function(i, r) {
            var f = t(r)
              , e = o(f);
            if (e.length != 0) {
                e.on("change", function(t, i) {
                    u(!i, f, n(t.target))
                });
                u(!1, f, e)
            }
        })
    }
}(jQuery),
function(n) {
    var t = "btn-on"
      , i = "btn-off"
      , r = "data-url"
      , o = "data-message"
      , u = function(t) {
        var i = n(".js-global-spinner-container");
        return i.spinner(!0),
        n.ajax({
            type: "POST",
            url: t
        }).then(function(t) {
            return t.Errors ? (siberia.notification.showErrorNotification(t.Errors[""].errors[0]),
            n.Deferred().reject(t).promise()) : t
        }, function() {
            siberia.validation.showGridNetworkError(!1)
        }).always(function() {
            i.spinner(!1)
        })
    }
      , s = function(n) {
        n.preventDefault();
        n.stopPropagation()
    }
      , f = function(n) {
        return ":not(." + n + ")"
    }
      , e = function(n) {
        var t = n.attr(o);
        t && siberia.notification.showSuccessNotification(t)
    };
    n.fn.siberiaOnOffToggler = function(o, h, c, l) {
        return this.each(function(a, v) {
            var y = n(v)
              , p = y.find(o)
              , w = y.find(h);
            y.on("click", [o, h].join(","), s);
            y.on("click", o + f(t), function() {
                u(p.attr(r)).then(function(n) {
                    p.addClass(t);
                    w.removeClass(i);
                    e(p);
                    c && c(!0, n)
                }, l)
            });
            y.on("click", h + f(i), function() {
                u(w.attr(r)).then(function(n) {
                    p.removeClass(t);
                    w.addClass(i);
                    e(w);
                    c && c(!1, n)
                }, l)
            })
        })
    }
}(jQuery),
function() {
    function n(n) {
        return {
            text: n,
            value: n
        }
    }
    siberia.ensureObject("siberia.editor");
    siberia.editor.commonTools = function() {
        return ["bold", "italic", "underline", "strikethrough", "justifyLeft", "justifyCenter", "justifyRight", "justifyFull", "insertUnorderedList", "insertOrderedList", "indent", "outdent", "createLink", "unlink", "insertImage", "insertFile", "subscript", "superscript", "createTable", "addRowAbove", "addRowBelow", "addColumnLeft", "addColumnRight", "deleteRow", "deleteColumn", "viewHtml", "formatting", "cleanFormatting", {
            name: "fontName",
            items: ["Garamond", "Gill Sans", "Cambria", "Calibri", "Constantia", "Lato", "Didot", "Helvetica", "Georgia", "Avenir", "Times New Roman", "Futura", "Arial", "Courier", "Brush Script", "Comic Sans", "Century Gothic", "Papyrus", "Impact", "Trajan Pro"].map(n)
        }, "fontSize", "foreColor", "backColor"]
    }
    ;
    var t = function(n, t) {
        return {
            name: "microphone",
            tooltip: text.global.labels.recording,
            exec: function() {
                var i = $(this).data("kendoEditor"), r;
                kendo.animationFrame(function() {
                    i.wrapper.hide()
                });
                r = i.getRange();
                n && n();
                siberia.speechRecognition.frontend().always(function() {
                    i.wrapper.show();
                    i.selectRange(r);
                    t && t()
                }).then(function(n) {
                    i.exec("inserthtml", {
                        html: n.replace(/\n/g, "<br/>"),
                        split: !1,
                        clean: !0
                    })
                })
            }
        }
    }
      , i = function() {
        return {
            name: "page-break",
            tooltip: text.global.labels.pageBreak,
            exec: function() {
                var n = $(this).data("kendoEditor");
                n.exec("inserthtml", {
                    html: '<hr class="page-break" />',
                    split: !1,
                    clean: !0
                })
            }
        }
    };
    siberia.editor.createFrontendTool = t;
    siberia.editor.createPageBreakTool = i;
    siberia.editor.edit = function(n) {
        var t = "#rich-text-popup"
          , i = function() {
            var n = $(t).find(".js-text")
              , i = n.data("kendoEditor");
            return i || (n.kendoEditor({
                encoded: !1,
                tools: siberia.editor.commonTools()
            }),
            i = n.data("kendoEditor")),
            i
        }
          , r = function(n) {
            return function() {
                n.resolve(i().value())
            }
        }
          , u = function(n) {
            return function() {
                n.reject()
            }
        }
          , f = function(n) {
            return function() {
                var t = i();
                t.value(n);
                t.focus()
            }
        };
        return function(i) {
            return $.Deferred(function(e) {
                siberia.popup.create(t, {
                    windowOptions: {
                        width: "800",
                        title: n
                    },
                    ajax: {
                        enabled: !1
                    },
                    init: f(i),
                    success: r(e),
                    cancel: u(e)
                })
            })
        }
    }
}(),
function(n) {
    siberia.ensureObject("siberia.infiniteScroll");
    siberia.infiniteScroll = function() {
        var t = {
            listViewSelector: null,
            tabWrapper: null,
            tabSelectors: [],
            onTabClick: null,
            onItemSelected: null,
            onOlderItemsLoaded: null,
            getOlderItemsUrl: null,
            scrollWrapper: null,
            doNotResizeViewer: !1,
            selectFirstItemOnInitLoad: !1,
            getRequestAdditionalData: function() {
                return {}
            }
        }
          , i = function(i) {
            function o(n) {
                f.isLoading || n.sender.select(n.sender.items().first())
            }
            function s(n) {
                var t = n.sender.items().filter(".k-state-selected").get(0)
                  , i = n.sender.dataItem(t);
                if (r.onItemSelected != null)
                    r.onItemSelected(i)
            }
            function h() {
                if (!f.isLoading) {
                    var n = u.items().last();
                    n.length != 0 && u.wrapper.scrollTop() + u.wrapper.height() >= u.wrapper[0].scrollHeight - n.height() / 2 && e()
                }
            }
            function e() {
                if (f.canContinueLoading && r.getOlderItemsUrl && r.getOlderItemsUrl != "") {
                    r.scrollWrapper.spinner(!0);
                    f.isLoading = !0;
                    var t = u.dataSource.data().slice(-1)[0]
                      , i = r.getRequestAdditionalData ? r.getRequestAdditionalData(t) : {};
                    n.ajax({
                        type: "POST",
                        url: r.getOlderItemsUrl,
                        data: JSON.stringify(i),
                        contentType: "application/json",
                        success: function(n) {
                            f.canContinueLoading = n.HasMoreItems;
                            var t = u.dataSource.options.schema.model.id
                              , i = n.Data.filter(function(n) {
                                return u.dataSource.get(n[t]) == undefined
                            });
                            if (u.dataSource.data(siberia.common.toArray(u.dataSource.data()).concat(i)),
                            r.onOlderItemsLoaded)
                                r.onOlderItemsLoaded(n)
                        },
                        complete: function() {
                            f.isLoading = !1;
                            r.scrollWrapper.spinner(!1)
                        }
                    })
                }
            }
            function c() {
                f.isLoading = !1;
                f.canContinueLoading = !0
            }
            function l(t) {
                var i = n(t).next();
                (i.length === 0 && (i = n(t).prev()),
                i.length !== 0) && u.select(i)
            }
            function a() {
                var n = u.dataItem(u.select());
                n && (l(u.select()),
                u.dataSource.remove(n),
                e())
            }
            var f = {
                isLoading: !1,
                canContinueLoading: !0
            }
              , r = n.extend(!0, {}, t, i || {})
              , u = n(r.listViewSelector).data("kendoListView");
            if (!u)
                return undefined;
            siberia.documentViewer.init(r.tabWrapper, n(r.listViewSelector), r.doNotResizeViewer);
            r.tabSelectors.forEach(function(t) {
                if (r.onTabClick)
                    n('.js-tab-item[href="' + t + '"]').on("click", r.onTabClick);
                if (!r.doNotResizeViewer)
                    n('.js-tab-item[href="' + t + '"]').on("tabOpened", function() {
                        siberia.documentViewer.setPreviewerHeight(r.tabWrapper)
                    })
            });
            u.bind("change", s);
            r.selectFirstItemOnInitLoad && u.bind("dataBound", o);
            n(i.listViewSelector).on("scroll", h);
            return {
                clearState: c,
                removeSelectedItem: a
            }
        };
        return {
            create: i
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.itemsContainer");
    siberia.itemsContainer.initItemsContainer = function(t, i, r) {
        var f = {
            controlSelector: undefined,
            addAction: undefined,
            editAction: undefined,
            viewAction: undefined,
            customAction: undefined,
            duplicateAction: undefined,
            deleteAction: undefined,
            customDelete: undefined,
            preSaveAction: undefined,
            rowSelectedAction: undefined,
            confirmText: text.global.confirms.deleteItemGeneric,
            isCustomEditing: !1,
            isCustomAddActionHandling: !1,
            isExternalAddButton: !1
        }
          , u = n.extend({}, f, r);
        n(u.controlSelector).each(function() {
            function o() {
                var n = k();
                u.preSaveAction && u.preSaveAction(n);
                a.val(JSON.stringify(n))
            }
            function h(t) {
                t.preventDefault();
                n(t.currentTarget).blur();
                u.addAction && c(function(n) {
                    n.Refund = !0;
                    u.addAction({
                        item: n,
                        cancel: function() {
                            r.dataSource.remove(n)
                        }
                    }, t)
                })
            }
            function v(t) {
                var i, f;
                t.preventDefault();
                n(t.currentTarget).blur();
                i = e(t.currentTarget);
                u.isCustomEditing || r.editRow(i);
                f = r.dataItem(i);
                u.editAction && u.editAction(f, t)
            }
            function y(t) {
                t.preventDefault();
                n(t.currentTarget).blur();
                var i = e(t.currentTarget)
                  , f = r.dataItem(i);
                u.viewAction && u.viewAction(f)
            }
            function p(t) {
                t.preventDefault();
                n(t.currentTarget).blur();
                var i = e(t.currentTarget)
                  , f = r.dataItem(i);
                u.customAction && u.customAction(f, t)
            }
            function w(t) {
                t.preventDefault();
                n(t.currentTarget).blur();
                var i = e(t.currentTarget)
                  , f = r.dataItem(i);
                u.duplicateAction && c(function(n) {
                    u.duplicateAction({
                        originalItem: f,
                        addedItem: n,
                        cancel: function() {
                            r.dataSource.remove(n)
                        }
                    })
                })
            }
            function b(t) {
                if (t.preventDefault(),
                n(t.currentTarget).blur(),
                !u.confirmText || confirm(u.confirmText)) {
                    var i = l(t);
                    u.customDelete ? u.customDelete(i, r.dataSource) : r.dataSource.remove(i);
                    u.deleteAction && u.deleteAction(i, f, t)
                }
            }
            function c(n) {
                var u, t, i;
                for (s--,
                r.addRow(),
                u = r.dataSource.data(),
                t = 0; t < u.length; t++)
                    if (i = u[t],
                    i.Id == 0) {
                        i.Id = s;
                        n(i);
                        break
                    }
            }
            function e(t) {
                return n(t).closest(i)
            }
            function l(n) {
                return r.dataItem(e(n.currentTarget))
            }
            function k() {
                return r.dataSource.data()
            }
            var f = n(this)
              , s = 0
              , r = f.data(t)
              , a = n("#" + f.attr("data-save-to"));
            if (u.addSelector)
                if (u.isCustomAddActionHandling)
                    n(u.addSelector).click(u.addAction);
                else if (u.isExternalAddButton)
                    n(u.addSelector).click(h);
                else
                    f.on("click", u.addSelector, h);
            if (u.editSelector)
                f.on("click", u.editSelector, v);
            if (u.viewSelector)
                f.on("click", u.viewSelector, y);
            if (u.customSelector)
                f.on("click", u.customSelector, p);
            if (u.duplicateSelector)
                f.on("click", u.duplicateSelector, w);
            if (u.deleteSelector)
                f.on("click", u.deleteSelector, b);
            u.saveAndCloseSelector && n(u.saveAndCloseSelector).click(o);
            u.saveSelector && n(u.saveSelector).click(o);
            r.bind("change", function(n) {
                var t = n.sender.items().filter(".k-state-selected").get(0)
                  , i = n.sender.dataItem(t);
                u.rowSelectedAction && u.rowSelectedAction(i)
            });
            f.on("siberia-serialize-data", o);
            o()
        })
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.listView");
    siberia.listView.initClientListView = function(t) {
        var i = n.extend({}, {
            listViewSelector: ".js-client-grid",
            addSelector: ".js-client-grid-add",
            editSelector: ".js-client-grid-edit",
            viewSelector: ".js-client-grid-view",
            duplicateSelector: ".js-client-grid-duplicate",
            customSelector: ".js-client-grid-custom-action",
            deleteSelector: ".js-client-grid-delete",
            saveAndCloseSelector: ".js-client-grid-save-and-close",
            saveSelector: ".js-client-grid-save",
            selectRowSelector: ".js-client-grid-row-select",
            isCustomAddActionHandling: !0
        }, t);
        i.controlSelector = i.listViewSelector;
        siberia.itemsContainer.initItemsContainer("kendoListView", "div[data-uid]", i)
    }
}(jQuery),
function(n) {
    function v(n, t, i) {
        function h(n, t) {
            function h() {
                var c, i, p, v, o, w, y;
                for (u = requestAnimationFrame(h),
                n.getByteTimeDomainData(s),
                c = document.querySelector(t),
                i = c.getContext("2d"),
                i.fillStyle = l,
                i.fillRect(0, 0, r, f),
                i.lineWidth = 1,
                i.strokeStyle = a,
                i.clearRect(0, 0, r, f),
                i.beginPath(),
                p = r * 1 / e,
                v = 0,
                o = 0; o < e; o++)
                    w = s[o] / 128,
                    y = w * f / 2,
                    o === 0 ? i.moveTo(v, y) : i.lineTo(v, y),
                    v += p;
                i.lineTo(c.width, c.height / 2);
                i.stroke()
            }
            var i = document.querySelector(t);
            if (i) {
                var c = i.getContext("2d")
                  , o = getComputedStyle(i)
                  , l = o.backgroundColor
                  , a = o.color
                  , r = i.width
                  , f = i.height
                  , e = n.fftSize
                  , s = new Uint8Array(e);
                c.clearRect(0, 0, r, f);
                h()
            }
        }
        var u = null, f = new (window.AudioContext || window.webkitAudioContext), r = f.createAnalyser(), o, e;
        r.fftSize = 16384;
        r.minDecibels = -90;
        r.maxDecibels = -10;
        r.smoothingTimeConstant = .1;
        o = n(f);
        o.connect(r);
        t ? (e = f.createConvolver(),
        r.connect(e),
        e.connect(f.destination)) : r.connect(f.destination);
        var c = function() {
            u || (u = requestAnimationFrame(function() {
                h(r, i)
            }))
        }
          , s = function() {
            u && (cancelAnimationFrame(u),
            u = null)
        }
          , l = function() {
            s();
            f.close()
        };
        return {
            start: c,
            stop: s,
            destroy: l
        }
    }
    function at(n) {
        var i = 0
          , t = null
          , r = null
          , u = function() {
            var n = +new Date;
            i += (n - r) / 1e3;
            r = n
        }
          , f = function() {
            t || (r = +new Date,
            t = setInterval(function() {
                u();
                n(i)
            }, 100))
        }
          , e = function() {
            t && (clearInterval(t),
            u(),
            n(i),
            r = null,
            t = null)
        };
        return {
            start: f,
            stop: e,
            destroy: d,
            value: i
        }
    }
    function vt(n, t) {
        for (var r, i = 0; i < t.length; ++i) {
            r = t[i];
            try {
                return new MediaRecorder(n,{
                    audioBitsPerSecond: 128e3,
                    mimeType: r
                })
            } catch (u) {}
        }
        return null
    }
    function y(t) {
        if (t.file && !confirm(text.global.confirms.startNewVoiceRecord))
            return !0;
        navigator.getUserMedia({
            audio: !0
        }, function(r) {
            k(t).then(function() {
                if (t._recorder = vt(r, t.mimeTypes),
                !t._recorder) {
                    n(t).trigger("record-failed");
                    return
                }
                t._chunks = [];
                var u = t._recorderAnimation = v(function(n) {
                    return n.createMediaStreamSource(r)
                }, !0, ".js-record-visualizer")
                  , f = t._recorderTimer = at(function(n) {
                    t._recorder.currentTime = n;
                    t.updateCurrentTime(n)
                });
                t._recorder.onstart = function() {
                    n(t).trigger("record-started");
                    u.start();
                    f.start()
                }
                ;
                t._recorder.ondataavailable = function(i) {
                    if (i.data && i.data.size > 0 && t && t._chunks) {
                        t._chunks.push(i.data);
                        n(t).trigger("player-data-pushed", !0);
                        return
                    }
                    n(t).trigger("player-data-pushed", !1)
                }
                ;
                t._recorder.start(6e4);
                e(t, i.recording)
            })
        }, function() {
            e(t, t.file ? i.paused : i.readyToRecord)
        })
    }
    function yt(t) {
        return console.debug(u + " Start requestDataDeferred"),
        n.Deferred(function(i) {
            n(t).one("player-data-pushed", function(n, t) {
                console.debug(u + "data pushed: " + t);
                i.resolve(t)
            });
            t._recorder.requestData();
            setTimeout(function() {
                n(t).off("player-data-pushed");
                i.state() === "pending" && i.reject()
            }, 1e3)
        }).always(function() {
            console.debug(u + "Stop requestDataDeferred")
        })
    }
    function p(t) {
        function r(n) {
            n && e(n, i.stopped)
        }
        return (console.debug(u + "Start StopDeferred"),
        !(t && t._recorder && (t._recorder.state === "recording" || t._recorder.state === "paused"))) ? (console.debug(u + "Stop StopDeferred - Nothing to stop"),
        n.Deferred().reject().always(function() {
            r(t)
        })) : n.Deferred(function(i) {
            n(t).one("player-data-pushed", function(n, t) {
                t ? (console.debug(u + "Stop StopDeferred - Resolved"),
                i.resolve()) : (console.debug(u + "Stop StopDeferred - Rejected No data"),
                i.reject())
            });
            t._recorder.stop();
            setTimeout(function() {
                n(t).off("player-data-pushed");
                i.state() === "pending" && (console.debug(u + "Stop StopDeferred - Rejected timeout"),
                i.reject())
            }, 1e3)
        }).always(function() {
            r(t)
        })
    }
    function pt(n) {
        return n._recorder.pause(),
        n._recorderAnimation.stop(),
        n._recorderTimer.stop(),
        yt(n).then(function() {
            return w(n)
        })
    }
    function w(t) {
        return console.debug(u + "Start PrepareBlobDeferred"),
        n.Deferred(function(n) {
            if (!t) {
                console.debug(u + "Stop PrepareBlobDeferred - Resolved No Player");
                n.resolve();
                return
            }
            t.blob = new Blob(t._chunks,{
                type: t._recorder.mimeType
            });
            t.file = URL.createObjectURL(t.blob);
            g(t._audio, t.file);
            t.onBlobPreparedDeferred().then(function() {
                console.debug(u + "Stop PrepareBlobDeferred");
                n.resolve()
            })
        }).promise()
    }
    function wt(t) {
        n(t).trigger("record-started");
        t._recorder.resume();
        t._recorderAnimation.start();
        t._recorderTimer.start()
    }
    function bt(n) {
        n._audio.play()
    }
    function kt(n) {
        var t = n._audio.currentTime - a;
        return n._audio.currentTime = t < 0 ? 0 : t,
        !0
    }
    function dt(n) {
        var t = n._audio.currentTime + a;
        if (t >= n._audio.duration)
            n._audio.pause(),
            n._audio.currentTime = 0;
        else
            return n._audio.currentTime = t,
            !0
    }
    function gt(n) {
        n._audio.pause()
    }
    function ii(t) {
        return (console.debug(u + "Start StopRecordingDeferred"),
        !t) ? n.Deferred().resolve() : p(t).then(function() {
            return w(t)
        }).always(function() {
            return console.debug(u + "Stop StopRecordingDeferred"),
            n.Deferred().resolve()
        })
    }
    function k(t) {
        return n.Deferred(function(n) {
            if (console.debug(u + "Start DestroyRecorder"),
            t._recorderAnimation && (t._recorderAnimation.destroy(),
            t._recorderAnimation = null),
            t._recorderTimer && (t._recorderTimer.stop(),
            t._recorderTimer = null),
            t._recorder)
                return p(t).always(function() {
                    t._recorder = null;
                    n.resolve()
                });
            n.resolve()
        }).always(function() {
            console.debug(u + "Stop DestroyRecorder")
        })
    }
    function ri(n) {
        n._audioAnimation && (n._audioAnimation.destroy(),
        n._audioAnimation = null);
        n._audio && (n._audio.onended = null,
        n._audio.ondurationchange = null,
        n._audio.ontimeupdate = null,
        n._audio.onerror = null,
        n._audio.paused || n._audio.pause());
        n._audio = null
    }
    function d(t, i) {
        return function() {
            return console.debug(u + "Start Destroy"),
            k(t).always(function() {
                ri(t);
                n(i).off(c);
                n.removeData(i, o);
                console.debug(u + "Stop Destroy")
            })
        }
    }
    function e(n, t) {
        n.state = t;
        n.render()
    }
    function g(n, t) {
        n.src = t;
        n.currentTime = 1e6
    }
    function ui(t, r) {
        t._audio = new Audio;
        t.file && (r.showSpinner(),
        siberia.functions.getBlob(t.file).then(function(n) {
            g(t._audio, URL.createObjectURL(n))
        }).always(r.hideSpinner));
        t._audio.volume = 1;
        var u = t._audioAnimation = v(function(n) {
            return n.createMediaElementSource(t._audio)
        }, !1, ".js-record-visualizer");
        t._audio.onplay = function() {
            u.start()
        }
        ;
        t._audio.onpause = function() {
            u.stop()
        }
        ;
        t._audio.onended = function() {
            t && t.state === i.stopped || e(t, i.paused)
        }
        ;
        t._audio.ondurationchange = function(n) {
            t.updateDuration(n.target.duration)
        }
        ;
        t._audio.ontimeupdate = function(n) {
            t.updateCurrentTime(n.target.currentTime);
            t.updateProgress(b(n.target.currentTime, n.target.duration))
        }
        ;
        t._audio.onerror = function() {
            n(t).trigger("record-play-failed");
            e(t, i.disabled)
        }
    }
    var o = "SiberiaPlayer", c = "." + o, tt = function(n) {
        return n + c
    }, l = tt("click"), s = function(n) {
        return typeof n == "string" ? n : !Number.isFinite(n) || Number.isNaN(n) ? "" : kendo.toString(new Date(n * 1e3), "mm:ss")
    }, a = 5, u = "siberia-player.js: ", nt;
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    var it = function(n) {
        return "." + n
    }
      , rt = navigator.userAgent.indexOf("Firefox") > 0
      , ut = {
        file: null,
        mimeTypes: rt ? ["audio/ogg", "audio/webm", "audio/wav"] : ["audio/webm", "audio/ogg", "audio/wav"],
        record: !0,
        template: n.noop,
        showSpinner: n.noop,
        hideSpinner: n.noop,
        onBlobPreparedDeferred: n.Deferred().resolve().promise()
    }
      , f = function(n) {
        return n.reduce(function(n, t) {
            return n[t[0]] = t[1],
            n
        }, {})
    }
      , t = {
        record: "action-record",
        pauseRecording: "action-pauseRecording",
        resumeRecording: "action-resumeRecording",
        rerecord: "action-rerecord",
        play: "action-play",
        rewind: "action-rewind",
        forward: "action-forward",
        pause: "action-pause"
    }
      , i = {
        disabled: "state-disabled",
        readyToRecord: "state-readyToRecord",
        waitingMicrophoneAccess: "state-waitingMicrophoneAccess",
        recording: "state-recording",
        recordingPaused: "state-recordingPaused",
        playing: "state-playing",
        paused: "state-paused",
        stopped: "state-stopped"
    }
      , ft = f([[t.record, i.waitingMicrophoneAccess], [t.pauseRecording, i.recordingPaused], [t.resumeRecording, i.recording], [t.rerecord, i.waitingMicrophoneAccess], [t.play, i.playing], [t.rewind, i.playing], [t.forward, i.paused], [t.pause, i.paused]])
      , r = function(n, t) {
        return {
            title: et[n],
            iconCssClass: ot[n],
            actionCssClass: h[n],
            hotkey: st[n],
            disabled: !!t
        }
    }
      , h = f([[t.record, "js-siberia-player-record"], [t.pauseRecording, "js-siberia-player-pause-recording"], [t.resumeRecording, "js-siberia-player-resume-recording"], [t.rerecord, "js-siberia-player-rerecord"], [t.play, "js-siberia-player-play"], [t.rewind, "js-siberia-player-rewind"], [t.forward, "js-siberia-player-forward"], [t.pause, "js-siberia-player-pause"]])
      , et = f([[t.record, text.global.labels.record], [t.pauseRecording, text.global.labels.pause], [t.resumeRecording, text.global.labels.record], [t.rerecord, text.global.labels.rerecord], [t.play, text.global.labels.play], [t.rewind, text.global.labels.rewind], [t.forward, text.global.labels.forward], [t.pause, text.global.labels.pause]])
      , ot = f([[t.record, "icon-record"], [t.pauseRecording, "icon-stop-ready"], [t.resumeRecording, "icon-record"], [t.rerecord, "icon-rerecord"], [t.play, "icon-play"], [t.rewind, "icon-backward"], [t.forward, "icon-forward-rewind"], [t.pause, "icon-pause"]])
      , st = f([[t.record, "r"], [t.pauseRecording, "r"], [t.resumeRecording, "r"], [t.rerecord, ""], [t.play, "p"], [t.rewind, "q"], [t.forward, "w"], [t.pause, "p"]])
      , ht = f([[i.disabled, [r(t.record, !0)]], [i.readyToRecord, [r(t.record)]], [i.waitingMicrophoneAccess, [r(t.pauseRecording, !0)]], [i.recording, [r(t.play, !0), r(t.pauseRecording)]], [i.recordingPaused, [r(t.play), r(t.resumeRecording), r(t.rerecord)]], [i.playing, [r(t.rewind), r(t.pause), r(t.forward)]], [i.paused, [r(t.play), r(t.resumeRecording), r(t.rerecord)]], [i.stopped, [r(t.play), r(t.resumeRecording, !0), r(t.rerecord)]]])
      , ct = f([[i.disabled, [r(t.play, !0)]], [i.playing, [r(t.rewind), r(t.pause), r(t.forward)]], [i.paused, [r(t.rewind), r(t.play), r(t.forward)]], [i.stopped, [r(t.rewind), r(t.play), r(t.forward)]]])
      , lt = f([[t.record, y], [t.pauseRecording, pt], [t.resumeRecording, wt], [t.rerecord, y], [t.play, bt], [t.rewind, kt], [t.forward, dt], [t.pause, gt]]);
    var ni = function(n, t) {
        return function(i) {
            i.preventDefault();
            var r = lt[t](n);
            r !== !0 && e(n, ft[t])
        }
    }
      , b = function(n, t) {
        var i = n / t * 100;
        return !Number.isNaN(i) && Number.isFinite(i) ? i : 0
    }
      , ti = function(t, r, u) {
        var o = n(r);
        for (var f in h)
            if (h.hasOwnProperty(f))
                o.on(l, it(h[f]), ni(t, f));
        o.on(l, ".js-player-timer", function(i) {
            var r = n(i.target).width()
              , u = i.offsetX;
            t._audio.currentTime = t._audio.duration * u / r
        });
        return t.actions = u.record ? ht : ct,
        t.mimeTypes = u.mimeTypes,
        t.file = u.file,
        t.updateDuration = function(t) {
            n(r).find(".js-player-duration").text(s(t))
        }
        ,
        t.updateCurrentTime = function(t) {
            n(r).find(".js-player-time").text(s(t))
        }
        ,
        t.updateProgress = function(t) {
            n(r).find(".js-player-progress").width(t + "%")
        }
        ,
        t.render = function() {
            var t = this
              , i = !!(t._recorder && t._recorder.state == "recording");
            n(r).html(u.template({
                recording: i,
                currentTime: s(i ? t._recorder.currentTime : t._audio.currentTime),
                duration: s(i ? Infinity : t._audio.duration),
                progress: i ? 0 : b(t._audio.currentTime, t._audio.duration),
                buttons: t.actions[t.state]
            }))
        }
        ,
        ui(t, u),
        e(t, u.record ? i.readyToRecord : t.file ? i.paused : i.disabled),
        d(t, r)
    };
    nt = function(n, t) {
        this.destroy = ti(this, n, t);
        this.stopRecordingDeferred = function() {
            return ii(this)
        }
        ;
        this.onBlobPreparedDeferred = t.onBlobPreparedDeferred
    }
    ;
    n.fn.siberiaPlayer = function(t) {
        return this.each(function(i, r) {
            n.data(r, o) || n.data(r, o, new nt(r,n.extend({}, ut, t)))
        })
    }
}(jQuery),
function() {
    siberia.ensureObject("siberia.constants");
    siberia.constants = {
        localStorageCountersKey: "counters-key",
        localStoragePatientCountersKey: "counters-key-patient-id-",
        localStoragePartialLogoutDataKey: "partialLogoutData",
        localStorageKendoGridStateKey: "KendoGridState",
        localStorageSuperAdminKey: "sa-key",
        clinicalMessageToReceptionist: "clinical-message-to-receptionist"
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.counters");
    siberia.counters = function() {
        function o(n, t, i) {
            t.length > 0 && (t.hasClass("js-overflow") ? t.text(a(n)) : t.text(n > 0 ? n : 0),
            i && t.css(i),
            t.toggle(n > 0))
        }
        function s(n, t) {
            if (t.length > 0) {
                var i = t.find(".js-counter")
                  , r = t.find(".js-counter").data("warning-type");
                n > 0 ? (r != 3 && i.text(n),
                t.show(),
                t.find(".notification-item").show()) : (r != 3 && i.text(0),
                t.hide())
            }
        }
        function h(n, t) {
            return Math.floor((n - t) / 1e3)
        }
        function u() {
            return siberia.localStorage.getJSON(siberia.constants.localStorageCountersKey, {})
        }
        function i(t) {
            n.each(f, function() {
                o(t[this.Property], n(this.Counter), this.CustomStyles)
            });
            n("#unfinishedToDosIndicator").toggleClass("note-bubble-no-urgent", !t.HasUrgent);
            t.AdministratorWarnings && n.each(e, function() {
                s(t.AdministratorWarnings[this.Property], n(this.Container))
            })
        }
        function r(n) {
            var t = u();
            t.data = n;
            t.date = (new Date).valueOf();
            t.practiceId = siberia.config.selectedPracticeId;
            siberia.localStorage.setJSON(siberia.constants.localStorageCountersKey, t);
            n && i(n)
        }
        function c() {
            var f, e, t;
            siberia.partialLogout.suspendRequests() || (f = n("#top-bar-container").attr("data-ping-url"),
            f) && (e = (new Date).valueOf(),
            t = u(),
            !t.date || !t.data || t.practiceId != siberia.config.selectedPracticeId || h(e, t.date) >= siberia.config.localStorageCountersExpirationInSeconds ? (t.date = e,
            siberia.localStorage.setJSON(siberia.constants.localStorageCountersKey, t),
            n.ajax({
                type: "POST",
                url: f,
                timeout: siberia.config.refreshCountersTimeoutInSeconds * 1e3,
                data: {
                    selectedPracticeId: siberia.config.selectedPracticeId
                },
                success: function(n) {
                    if (n.PageObsolete) {
                        window.location.reload();
                        return
                    }
                    r(n)
                }
            })) : i(t.data))
        }
        function l(t) {
            var u = t.getResponseHeader("COUNTERS")
              , i = JSON.parse(u || "{}");
            i && (i.Version != siberia.config.version && n(window).trigger("appversionchanged"),
            r(i))
        }
        function a(n) {
            if (n < 1e3)
                return n;
            let t = Math.floor(n / 1e3)
              , i = n % 1e3;
            return t < 10 ? t + (i > 0 ? "K+" : "K") : "9K+"
        }
        const t = {
            right: "5px"
        };
        var f = [{
            Property: "Messages",
            Counter: "#unreadMessagesIndicator"
        }, {
            Property: "Todos",
            Counter: "#unfinishedToDosIndicator"
        }, {
            Property: "NewNotifications",
            Counter: "#newNotificationsIndicator"
        }, {
            Property: "Letters",
            Counter: ".js-menu-letters-count"
        }, {
            Property: "LettersToCreate",
            Counter: ".js-menu-letters-to-create-count"
        }, {
            Property: "LettersList",
            Counter: ".js-menu-letter-list-count"
        }, {
            Property: "AllLabResults",
            Counter: ".js-menu-lab-results-count"
        }, {
            Property: "ImagingResults",
            Counter: ".js-menu-lab-result-imaging"
        }, {
            Property: "PathologyResults",
            Counter: ".js-menu-lab-result-pathology"
        }, {
            Property: "ImagingErrors",
            Counter: ".js-menu-error-imaging"
        }, {
            Property: "PathologyErrors",
            Counter: ".js-menu-error-pathology"
        }, {
            Property: "DoctorImagingResults",
            Counter: ".js-menu-doctor-lab-result-imaging"
        }, {
            Property: "DoctorPathologyResults",
            Counter: ".js-menu-doctor-lab-result-pathology"
        }, {
            Property: "RegistrarImagingResults",
            Counter: ".js-menu-registrar-lab-result-imaging"
        }, {
            Property: "RegistrarPathologyResults",
            Counter: ".js-menu-registrar-lab-result-pathology"
        }, {
            Property: "ProceduresWithIncompleteChecklists",
            Counter: ".js-menu-procedures-with-incomplete-checklists"
        }, {
            Property: "AllProcedureManagementCounts",
            Counter: ".js-menu-all-procedure-management-counts"
        }, {
            Property: "UnassignedMessagesCount",
            Counter: ".js-menu-unassigned-securemessages-count",
            CustomStyles: t
        }, {
            Property: "AssignedMessagesCount",
            Counter: ".js-menu-assigned-securemessages-count",
            CustomStyles: t
        }, {
            Property: "MyMessagesCount",
            Counter: ".js-menu-my-securemessages-count",
            CustomStyles: t
        }, {
            Property: "SecureMessagesTotalCount",
            Counter: ".js-menu-securemessages-total-count"
        }]
          , e = [{
            Property: "ImagingResults",
            Container: "#AdminWarningImagingResult"
        }, {
            Property: "PathologyResults",
            Container: "#AdminWarningPathologyResult"
        }, {
            Property: "SecureMessaging",
            Container: "#AdminWarningSecureMessage"
        }, {
            Property: "Sms",
            Container: "#AdminWarningSms"
        }, {
            Property: "Claim",
            Container: "#AdminWarningClaim"
        }];
        return n(document).ready(function() {
            siberia.localStorage.registerKeyChanges(siberia.constants.localStorageCountersKey, function(n) {
                var t = n.newValue && JSON.parse(n.newValue);
                t && t.data && i(t.data)
            })
        }),
        {
            setData: r,
            refresh: c,
            processRequest: l
        }
    }()
}(jQuery),
function() {
    siberia.ensureObject("siberia.localStorage");
    var n = [siberia.constants.localStoragePartialLogoutDataKey, siberia.constants.localStorageCountersKey, siberia.constants.localStorageKendoGridStateKey, siberia.constants.localStorageSuperAdminKey];
    siberia.localStorage.getItem = function(n) {
        return localStorage.getItem(n)
    }
    ;
    siberia.localStorage.setItem = function(n, t) {
        localStorage.setItem(n, t)
    }
    ;
    siberia.localStorage.removeItem = function(n) {
        localStorage.removeItem(n)
    }
    ;
    siberia.localStorage.registerKeyChanges = function(n, t) {
        var i = function(i) {
            i.key == n && t(i)
        };
        return window.addEventListener("storage", i, !1),
        i
    }
    ;
    siberia.localStorage.unregisterKeyChanges = function(n) {
        window.removeEventListener("storage", n)
    }
    ;
    siberia.localStorage.getJSON = function(n, t) {
        var i = siberia.localStorage.getItem(n);
        return i && JSON.parse(i) || t || null
    }
    ;
    siberia.localStorage.setJSON = function(n, t) {
        siberia.localStorage.setItem(n, JSON.stringify(t))
    }
    ;
    siberia.localStorage.keys = function() {
        for (var t = [], n = 0, i = localStorage.length; n < i; ++n)
            t.push(localStorage.key(n));
        return t
    }
    ;
    siberia.localStorage.clear = function() {
        siberia.localStorage.keys().forEach(function(t) {
            n.forEach(function(n) {
                t.indexOf(n) == 0 && siberia.localStorage.removeItem(t)
            })
        })
    }
}(jQuery),
function(n) {
    function r(n, t) {
        return n.find('[name$="' + t + '"]')
    }
    function o(n) {
        for (var i, t = 0; t < n.length; ++t)
            if (i = n[t],
            i.checked)
                return i.value;
        return ""
    }
    function s() {
        return "[" + t + "]"
    }
    function h(n, i) {
        var u = n.attr(t);
        return u ? u.split(",").map(function(n) {
            return r(i, n)
        }).filter(function(n) {
            return n.length > 0
        }) : []
    }
    function u(t, r) {
        var u = n(t), o;
        typeof r == "undefined" && (r = u.closest("form"));
        o = h(u, r);
        o.forEach(function(t) {
            var u = t.attr(i);
            if (u) {
                var o = JSON.parse(t.attr(i))
                  , s = JSON.parse(t.attr(e).toLowerCase())
                  , h = f(o, r, s);
                n(t.prop("labels")).toggleClass("required", h)
            }
        })
    }
    function f(n, t, i) {
        for (var s, e, f = 0; f < n.length; f++) {
            var h = n[f].DesiredValues
              , c = n[f].PropertyName
              , u = r(t, c);
            if (u.length > 0) {
                if (s = u.is('[type="checkbox"]') ? u.prop("checked").toString() : u.is('[type="radio"]') ? o(u) : u.val() || "",
                e = h.indexOf(s.toLowerCase()) != -1,
                i && !e)
                    return !1;
                if (!i && e)
                    return !0
            }
        }
        return i
    }
    siberia.ensureObject("siberia.requiredIf");
    var t = "data-val-affectsproperties"
      , i = "data-val-requiredif-dependentproperties"
      , e = "data-val-requiredif-satisfytogether";
    siberia.requiredIf.checkRequired = u;
    siberia.requiredIf.containsTurnedOnDependentProperties = f;
    n(document).ready(function() {
        n(document.body).on("change", s(), function(n) {
            u(n.target)
        })
    })
}(jQuery),
function(n) {
    function t(n) {
        return new Date(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes())
    }
    siberia.ensureObject("siberia.waitingTime");
    siberia.waitingTime.initWaitingTimeUpdate = function i(r, u, f) {
        function e() {
            n(r).each(function(i, r) {
                var l = n(r)
                  , e = u(r)
                  , o = f();
                if (e && o) {
                    var a = t(e)
                      , v = t(o)
                      , y = v - a
                      , s = y / 6e4
                      , h = Math.floor(s / 60)
                      , c = s % 60
                      , p = h == 0 ? text.global.labels.waitingTimeMinutes(c) : text.global.labels.waitingTimeMinutesAndHours(h, c);
                    l.text(p)
                }
            })
        }
        var o = new Date, h = t(o), s;
        setTimeout(function() {
            e();
            setInterval(e, 6e4)
        }, 6e4 - (o - h));
        s = Array.prototype.slice.call(arguments, i.length);
        s.forEach(function(n) {
            n.bind("dataBound", e)
        })
    }
}(jQuery),
function(n) {
    n.fn.stateButton = function(t) {
        return this.each(function(i, r) {
            function o(n) {
                n.preventDefault();
                t.action && t.action(u.url, u.value).then(s).fail(h)
            }
            function s(i) {
                return typeof i.Errors != "undefined" ? n.Deferred().reject(siberia.notification.getFirstError(i.Errors)) : (u.set("value", i),
                u.set("label", e[i]),
                t.successNotificationText && siberia.notification.showSuccessNotification(t.successNotificationText),
                n.Deferred())
            }
            function h(n) {
                var i = typeof n == "string" && n || t.errorNotificationText;
                i && siberia.notification.showErrorNotification(i)
            }
            var f = n(r), e, u;
            f.length !== 0 && (e = n.extend({}, t.labels),
            u = kendo.observable({
                url: f.attr("href"),
                label: e[f.data("default-value")],
                value: f.data("default-value"),
                onClick: o
            }),
            kendo.bind(f, u))
        })
    }
}(jQuery),
function(n) {
    function i(t) {
        return n.Deferred(function(n) {
            setTimeout(function() {
                n.resolve()
            }, t)
        })
    }
    function t(n, r) {
        return function() {
            return i(n).then(r).always(t(n, r))
        }
    }
    siberia.ensureObject("siberia.actionQueue");
    siberia.actionQueue.init = function(n, i) {
        t(n, i)()
    }
}(jQuery),
function(n) {
    n.fn.exportToExcelButton = function(t, i) {
        var r = {
            exportData: {},
            exportUrl: ""
        };
        return this.each(function(u, f) {
            var e = n("#claiming-export-to-excel-form");
            n(f).click(function(i) {
                var u, f;
                t && (u = n.extend({}, r, t()),
                i.preventDefault(),
                e.attr("action", u.exportUrl),
                e.attr("action") && (f = u.exportData,
                n(e).find("input[name=exportData]").val(JSON.stringify(f)),
                e.submit()))
            });
            i && n(i).data("kendoGrid").bind("dataBound", function(t) {
                n(e).toggle(t.sender.dataSource.data().length > 0)
            })
        })
    }
}(jQuery),
function(n) {
    n.fn.toggleButton = function(t) {
        var i = n.extend({}, {
            isChecked: !1,
            saveState: !1,
            captionCheckedColor: "black"
        }, t);
        return this.each(function(t, r) {
            function c(n) {
                n ? o.css("color", i.captionCheckedColor) : o.css("color", y);
                i.saveState && localStorage.setItem("toggler-" + h, n ? "checked" : "unchecked")
            }
            function l() {
                e.removeClass("slider");
                e.addClass("slider-wo-transition")
            }
            function a() {
                e.removeClass("slider-wo-transition");
                e.addClass("slider")
            }
            var u = n(r), h = u.attr("id"), f = u.find("label input"), o = u.find("span.caption"), e = u.find("label span.slider"), y = o.css("color"), s = {
                isChecked: function() {
                    return f.prop("checked")
                },
                setIsChecked: function(n) {
                    f.prop("checked", n);
                    c(n)
                }
            }, v;
            u.data("toggler", s);
            i.isChecked && (l(),
            s.setIsChecked(!0),
            setTimeout(function() {
                a()
            }, 100));
            i.saveState && (v = localStorage.getItem("toggler-" + h),
            l(),
            s.setIsChecked(v === "checked"),
            setTimeout(function() {
                a()
            }, 100));
            f.change(function() {
                c(f.prop("checked"))
            })
        })
    }
}(jQuery),
function(n) {
    n.fn.dropDownButton = function(t) {
        return this.each(function(i, r) {
            function c() {
                s.toggle();
                h.toggle();
                f.toggle()
            }
            function l(n) {
                (n && (n.preventDefault(),
                n.stopImmediatePropagation()),
                f.css("top", u.offset().top + u.height()),
                f.css("left", u.offset().left),
                f.is(":visible")) || (c(),
                u.css("border-radius", "3px 3px 0 0"))
            }
            function o(n) {
                (n && (n.preventDefault(),
                n.stopImmediatePropagation()),
                f.is(":hidden")) || (c(),
                u.css("border-radius", "3px"))
            }
            var u = n(r), s = u.find(".dropdown-handle"), h = u.find(".dropdown-handle-active"), f = u.find(".dropdown-submenus"), e;
            if (n("body").append(f),
            e = u.find(".dropdown-main-item"),
            !t.hasOwnProperty("mainAction")) {
                console.error("Options does not contain main action description for dropdown button with id '" + u.attr("id") + "'");
                return
            }
            if (e.text(t.mainAction.caption),
            t.mainAction.disabled && e.addClass("disabled-item"),
            e.click(function(n) {
                n.preventDefault();
                n.stopImmediatePropagation();
                t.mainAction.disabled || t.mainAction.action.call(this, t.userData, u)
            }),
            u.data("dropDown", {
                remove: function() {
                    f.remove()
                }
            }),
            !t.hasOwnProperty("subActions") || !t.subActions || t.subActions.length === 0) {
                s.hide();
                h.hide();
                return
            }
            n.each(t.subActions, function(i, r) {
                var e = n('<div class="dropdown-child-item">' + r.caption + "<\/div>");
                f.append(e);
                r.disabled && e.addClass("disabled-item");
                e.click(function(n) {
                    r.disabled || (o(n),
                    r.action.call(this, t.userData, u))
                })
            });
            s.click(l);
            h.click(o);
            u.mouseleave(function() {
                o()
            });
            f.mouseenter(function() {
                l()
            });
            f.mouseleave(function() {
                o()
            })
        })
    }
}(jQuery),
function(n) {
    function u() {
        n.get(s).then(function(n) {
            if (n) {
                if (n.ErrorMessage)
                    console.error(i + ": " + n.ErrorMessage);
                else if (n.Result) {
                    var s = n.Result;
                    if (e === s.TimeStamp && r < h) {
                        r++;
                        setTimeout(u, o);
                        return
                    }
                    e = s.TimeStamp;
                    c(s);
                    f("common-claiming-counter", s.TotalClaimsErrorsCounter);
                    f("medicare-claiming-counter", s.MedicareClaimsErrorsCounter);
                    f("eclipse-claiming-counter", s.EclipseClaimsErrorsCounter);
                    t("#medicare-in-progress-tab", s.MedicareInProgressErrorsCounter);
                    t("#medicare-exception-tab", s.MedicareExceptionErrorsCounter);
                    t("#eclipse-in-progress-tab", s.EclipseInProgressErrorsCounter);
                    t("#eclipse-exception-tab", s.EclipseExceptionErrorsCounter)
                }
            } else
                console.error(i)
        }).fail(function() {
            console.error(i)
        })
    }
    function c(t) {
        var i = n("#practice-claim-notification");
        t.TotalClaimErrors ? (i.find("#common-counter-count").text(t.TotalClaimErrors),
        t.TotalClaimErrors > 1 ? i.find("#common-counter-errors-message").text("errors") : i.find("#common-counter-errors-message").text("error"),
        i.find("div.notification-item").show(),
        i.show()) : (i.find("div.notification-item").hide(),
        i.hide())
    }
    function f(t, i) {
        var r = n("span.note-bubble." + t);
        i ? (r.text(i > 99 ? "99+" : i),
        r.show()) : r.hide()
    }
    function t(t, i) {
        var r = n(t)
          , f = r.find("#title")
          , u = r.find("#claim-counter");
        i ? (r.css("margin-right", "10px"),
        f.css("vertical-align", "sub"),
        u.text(i > 99 ? "99+" : i),
        u.show()) : (r.css("margin-right", "0"),
        f.css("vertical-align", "default"),
        u.hide())
    }
    var s = "/api/web/ClaimsCounters/GetClaimCounters"
      , i = "Failed to obtain practice claim counters - Financial API is unavailable or doesnt work properly";
    siberia.ensureObject("siberia.claimCounters");
    var e = null
      , r = 0
      , h = 10
      , o = 250;
    n("div.main-nav").length && (n(document).ready(function() {
        u()
    }),
    siberia.claimCounters.updateClaimCounters = function() {
        r = 0;
        setTimeout(u, o)
    }
    )
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.common");
    siberia.common = function() {
        function i() {
            return r || (r = n("#location-dropdownlist").data("kendoDropDownList")),
            r
        }
        function c() {
            var t = i(), n;
            return t && (n = t.dataItem(),
            n) ? n.LocationId : null
        }
        function l() {
            var t = i(), n;
            return t && (n = t.dataItem(),
            n) ? n.MainLocationId ? n.MainLocationId : n.LocationId : null
        }
        function a() {
            var t = i(), n;
            return t ? (n = t.dataItem(),
            n && n.MainLocationId) : !1
        }
        function v(t) {
            var r = t.dataItem(), i;
            siberia.cookies.saveLocation(r.LocationId);
            siberia.scheduler ? (siberia.scheduler.updateTopBarDate(),
            siberia.scheduler.refresh.run()) : (i = n("#top-bar-container").attr("data-redirect-url"),
            window.location.href = i)
        }
        function y() {
            var n = i(), t;
            n && (t = n.dataItem(),
            t && siberia.cookies.saveLocation(t.LocationId),
            n.bind("change", function() {
                siberia.cookies.removeCachedSchedulerDate();
                v(this)
            }))
        }
        function p(n) {
            n = n.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var i = new RegExp("[\\?&]" + n + "=([^&#]*)")
              , t = i.exec(location.search);
            return t === null ? "" : decodeURIComponent(t[1].replace(/\+/g, " "))
        }
        function w() {
            n(".js-form-submit").click(function(t) {
                t.preventDefault();
                var i = n(this).closest("form")
                  , r = n(this);
                u(i, r, text.global.status.settingsSaved)
            })
        }
        function u(t, i, r, u) {
            i.blur();
            var f = n(t)
              , e = n(".js-global-spinner-container")
              , o = f.closest(".k-widget.k-window");
            o.length && (e = o);
            e.spinner(!0);
            f.ajaxSubmit({
                success: function(n) {
                    siberia.validation.processAjaxErrors(f, n.Errors) && (siberia.notification.showSuccessNotification(r ? r : "", i),
                    u && u(n))
                },
                error: function() {
                    siberia.validation.showFormNetworkError(f)
                },
                complete: function() {
                    e.spinner(!1)
                }
            })
        }
        function b() {
            n(".js-logout-link").click(function(t) {
                (t.preventDefault(),
                confirm(text.global.confirms.logout)) && n.ajax({
                    type: "POST",
                    url: n(this).attr("href"),
                    success: function(n) {
                        n && n.RedirectUrl && (window.location.href = n.RedirectUrl)
                    },
                    complete: function() {
                        siberia.localStorage.clear()
                    }
                })
            })
        }
        function k() {
            function a(t) {
                u() && !c(n(t.target)) ? p() : l()
            }
            function v(t) {
                u() && !c(n(t.target)) && f(100)
            }
            var e = ".user-menu__help"
              , o = ".user-menu__help-sub-menu"
              , t = n(e).parent()
              , s = n(o)
              , r = "js-state-active"
              , h = {
                effect: "slide",
                direction: "up"
            }
              , i = null
              , u = function() {
                return t.hasClass(r)
            }
              , c = function(n) {
                return n.closest(e + ", " + o).length > 0
            }
              , l = function() {
                clearTimeout(i);
                i = null
            }
              , y = function() {
                t.addClass(r);
                s.show(h);
                n(document).on("mousedown", v).on("mouseover", a)
            }
              , f = function(i) {
                l();
                n(document).off("mouseover", a).off("mousedown", v);
                t.removeClass(r);
                s.hide(n.extend({}, h, {
                    duration: i
                }))
            }
              , p = function() {
                i == null && (i = setTimeout(f, 500))
            };
            t.find(".k-item .k-link").on("click", function(n) {
                n.preventDefault();
                u() ? f() : y()
            })
        }
        function d() {
            n(".js-collapse-pnl-content").hide();
            n(document.body).on("click", ".js-collapse-pnl-header", function(t) {
                t.preventDefault();
                var i = n(t.currentTarget).next();
                i.toggle().toggleClass("js-hidden");
                n(t.currentTarget).find(n(".icon-down")).toggleClass("icon-up")
            })
        }
        function g() {
            var r = n(".js-main-nav-sidebar"), i, t;
            if (r.length !== 0) {
                i = n(".js-sidebar");
                t = !1;
                n(window).width() < 1560 && (i.addClass("collapse-sidebar"),
                t = !0);
                r.click(function() {
                    i.toggleClass("collapse-sidebar");
                    t = !t
                });
                n("#menu-panelbar").on("click", "li[aria-expanded]", function(r) {
                    if (t) {
                        var u = n(r.delegateTarget).data("kendoPanelBar");
                        u.expand(n(r.currentTarget));
                        r.stopImmediatePropagation();
                        i.removeClass("collapse-sidebar");
                        t = !1
                    }
                })
            }
        }
        function f() {
            var r = n(".js-document-viewer-wrapper"), t = 0, i;
            n(".js-document-viewer-offset").length && (t = n(".js-document-viewer-offset").offset().top + n(".js-document-viewer-offset").outerHeight(!0));
            i = n(window).height() - n(".footer").height() - t + 200;
            r.height(i)
        }
        function nt(t) {
            var r;
            if (t.find(".js-templates-list").length !== 0) {
                var u = t.find(".js-templates-list"), f = t.find(".flex-popup__inner").height(), e = parseFloat(n(t.find(".flex-popup__content")).css("margin-bottom")), i;
                i = t.find(".flex-popup__header").length ? t.find(".flex-popup__header").outerHeight() : 0;
                r = f - i - e;
                u.height(r)
            }
        }
        function tt(n) {
            if (n.find(".js-templates-list").length !== 0) {
                var t = n.parent();
                t.css({
                    "min-width": 1024,
                    "min-height": 620
                })
            }
        }
        function o(n) {
            e = n
        }
        function rt(n) {
            t.unloadCanceled = n
        }
        function ut(n, i) {
            var r = {
                checkIfWeCanLeavePage: n
            };
            i && (r.markerToIgnore = i);
            t.rules.push(r);
            t.rules.length === 1 && ot()
        }
        function ft() {
            n(".js-unlock").click(function() {
                et(this)
            })
        }
        function et(i) {
            var r = n(i).data("ignore-unload");
            n(t.rules).each(function() {
                return (this.checked = !0,
                this.markerToIgnore === r) ? !0 : this.checkIfWeCanLeavePage() ? !0 : (this.hasConflict = !0,
                !1)
            })
        }
        function ot() {
            window.onbeforeunload = function(i) {
                var u = i || window.event
                  , r = !1;
                if (it() === !0) {
                    o(!1);
                    return
                }
                if (n(t.rules).each(function() {
                    return this.hasConflict ? (r = !0,
                    !1) : !0
                }),
                r || n(t.rules).each(function() {
                    return this.checked || this.checkIfWeCanLeavePage() ? !0 : (r = !0,
                    !1)
                }),
                n(t.rules).each(function() {
                    this.checked = !1;
                    this.hasConflict = !1
                }),
                r)
                    return u && (u.returnValue = "temp"),
                    setTimeout(function() {
                        t.unloadCanceled && t.unloadCanceled()
                    }, 100),
                    delete u.returnValue,
                    ""
            }
        }
        function st() {
            var t = i(), r;
            t && (r = new Date,
            n.each(t.dataItems(), function() {
                var n = this.LocationCurrentDateTime ? kendo.parseDate(this.LocationCurrentDateTime) : new Date
                  , t = new Date(n) - r;
                this.DeltaLocationToUserTimeMilliseconds = t
            }))
        }
        function ht(n, t) {
            return t ? new Date(n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate(),n.getUTCHours(),n.getUTCMinutes(),0,0) : new Date(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),0,0)
        }
        function ct() {
            var n = s();
            return new Date(n.getFullYear(),n.getMonth(),n.getDate(),0,0,0,0)
        }
        function s() {
            var n = new Date, r = i(), t;
            return r && (t = r.dataItem(),
            t && n.setMilliseconds(n.getMilliseconds() + t.DeltaLocationToUserTimeMilliseconds)),
            n
        }
        function lt() {
            n(document).bind("ajaxSuccess", function(n, t) {
                siberia.partialLogout.processRequest(t);
                siberia.partialLogout.suspendRequests() || siberia.counters.processRequest(t)
            });
            n(document).bind("ajaxError", function(n, t) {
                t.status === 403 && (window.onbeforeunload = null,
                window.location.reload())
            })
        }
        function at() {
            n('.k-grid[data-role="grid"]').on("click", ".js-view-btn", function(t) {
                n(t.target).blur()
            })
        }
        function vt() {
            n(".js-admin-warning-notification").on("click", ".js-notification-close", function(t) {
                var i = n(t.delegateTarget).find(".js-counter").data("warning-type");
                n.ajax({
                    type: "POST",
                    url: siberia.config.urls.hideAdministratorWarnings(),
                    data: {
                        warningTypeId: i
                    },
                    success: function(i) {
                        if (siberia.validation.processGridActionAjaxErrors(i.Errors, !0)) {
                            var r = n("#group-by-doctor-scheduler").data("kendoScheduler");
                            r && r.refresh()
                        } else
                            n(t.delegateTarget).fadeIn(500)
                    },
                    error: function() {
                        siberia.validation.showGridNetworkError(!0);
                        n(t.delegateTarget).fadeIn(500)
                    }
                })
            })
        }
        function yt() {
            bt();
            siberia.validation.initValidation();
            siberia.validation.initHandleGenericGridErrors();
            siberia.form.initHandleEnter();
            b();
            k();
            g();
            d();
            y();
            w();
            at();
            vt();
            n(".js-document-viewer-wrapper").length && (f(),
            n(window).resize(function() {
                f()
            }));
            n(".k-grid,.js-report-grid-container, body").on("click", ".js-btn-submenu", function(t) {
                var i, c, o, l;
                if (t.preventDefault(),
                t.stopPropagation(),
                i = n(t.currentTarget).next(),
                n(t.currentTarget).closest(".k-grid").length > 0) {
                    var r = i.height(), s = n(t.target).closest(".k-grid"), u = s.offset().top + s.height(), h = n("body").offset().top + n("body").height(), a = h - u, f = n(t.target).closest(".popup-inner"), e;
                    f.length ? (c = f - u,
                    e = c > r ? f : u) : e = a > r ? h : u;
                    o = t.target;
                    l = n(o).offset().top + n(o).height();
                    e - l < r ? i.css("top", -r) : i.css("top", 25)
                }
                n(".submenu").not(i).hide();
                i.toggle()
            });
            n("body").on("click", function() {
                n(".submenu").hide()
            });
            st();
            siberia.windows.initTabNavigation({
                tabstrip: "#PatientTabs"
            });
            ft();
            lt();
            n("input, textarea").placeholder();
            pt()
        }
        function pt() {
            n("form:visible").each(function(t, i) {
                return !siberia.validation.focusFirstFieldOrValidationError(n(i))
            })
        }
        function wt(t, i, r) {
            var o = n(t).data("kendoGrid"), e;
            if (!o)
                return "";
            var s = o.options.columns
              , h = n.map(s, function(n, t) {
                if (n.field == r)
                    return t
            })
              , c = h[0]
              , u = s[c].values
              , f = {};
            for (e in u)
                f[u[e].value] = u[e].text;
            return f[i] ? f[i] : ""
        }
        function bt() {
            var n = siberia.config.formats
              , i = kendo.cultures[n.culture]
              , t = i.calendars.standard.patterns;
            t.d = n.dateFormat;
            t.T = n.timeFormat;
            t.G = n.dateTimeFormat;
            kendo.culture(i)
        }
        function kt(n) {
            var t = document.createElement("a");
            return t.href = n,
            {
                path: t.pathname,
                search: t.search
            }
        }
        function h(n) {
            var t = kt(n)
              , i = t.path.replace(/(\/)?(index\/?)?$/, "");
            return (i + t.search).toLowerCase()
        }
        function dt(t) {
            function r(n, t) {
                var r = i.filter(n);
                r = r.add(i.find(n));
                r.each(t)
            }
            var i = n(t);
            r("[data-controller]", function() {
                var i = n(this), t;
                try {
                    t = siberia.common.getFromPath({
                        siberia: siberia
                    }, i.data("controller"))
                } catch (r) {
                    t = null
                }
                t && typeof t == "function" && t(i)
            });
            r('a[data-target="popup"]', function() {
                n(this).click(function(n) {
                    var t = n.currentTarget.href;
                    return t ? (siberia.popup.open(t),
                    !1) : !0
                })
            })
        }
        function ri(t) {
            var i = n(t).data("kendoDropDownList");
            return i.value()
        }
        function ui(t, i, r, u) {
            function f() {
                n(r).val(!0);
                n(u).click();
                n(r).val(!1)
            }
            n(t).on("click", i, function(n) {
                n.preventDefault();
                f()
            })
        }
        function fi(t, i) {
            try {
                if (i == !0) {
                    var r = n("#openUrlForm");
                    r.attr("action", t);
                    r.submit();
                    r.attr("action", null)
                } else
                    window.open(t, h(t))
            } catch (u) {}
        }
        function ei() {
            return navigator.userAgent.indexOf("MSIE") !== -1 || navigator.userAgent.indexOf(".NET") !== -1
        }
        function oi(n, t) {
            t ? window.location.replace(n) : window.location.href = n
        }
        function si(n) {
            if (n) {
                var t = siberia.config.dictionaries.salutations[n.toString()];
                return t || ""
            }
            return ""
        }
        var r, t = {
            rules: [],
            unloadCanceled: null
        }, e = !1, it = function() {
            return e
        };
        n.fn.spinner = function(n) {
            var t = this.data("siberia-spinner-count") || 0, i;
            return !n && t === 0 ? this : (i = t,
            t += n ? 1 : -1,
            t == 1 && i == 0 && (kendo.ui.progress(this, !0),
            this.block({
                message: null,
                overlayCSS: {
                    opacity: .1
                }
            })),
            t == 0 && i == 1 && (kendo.ui.progress(this, !1),
            this.unblock()),
            this.data("siberia-spinner-count", t),
            this)
        }
        ;
        n.fn.enableButton = function(n) {
            var t = "disabled"
              , i = "k-state-disabled";
            return n ? this.removeClass(i).removeAttr(t) : this.addClass(i).attr(t, t)
        }
        ;
        var gt = function(n, t) {
            for (var u = t.split("."), i = n, r = 0, f = u.length; r < f; r++)
                if (typeof i[u[r]] != "undefined" && i[u[r]] !== null)
                    i = i[u[r]];
                else
                    return null;
            return i
        }
          , ni = function(n, t) {
            for (var i = 0, r = n.length; i < r; i++)
                if (t(n[i]))
                    return n[i];
            return null
        }
          , ti = function(n) {
            return Array.prototype.slice.call(n)
        }
          , ii = function(n) {
            return String(n).toLowerCase() == "true"
        };
        return {
            init: yt,
            getSelectedLocationId: c,
            getSelectedOrMainLocationId: l,
            isAllLocationsSelected: a,
            submitForm: u,
            copyDateTime: ht,
            currentLocationDate: ct,
            currentLocationDateTime: s,
            getNamesForGridCollection: wt,
            getParameterByName: p,
            addUnloadRule: ut,
            setUnloadCanceledCallback: rt,
            getWindowTarget: h,
            applyBinding: dt,
            getFromPath: gt,
            firstOrNull: ni,
            toArray: ti,
            toBoolean: ii,
            getDropDownValue: ri,
            initWarningConfrimarionEvent: ui,
            openUrl: fi,
            resizeTemplateList: nt,
            initMinPopupSize: tt,
            doPrinting: o,
            isInternetExplorer: ei,
            navigateUrl: oi,
            getSalutation: si
        }
    }();
    n(document).ready(function() {
        siberia.common.init();
        siberia.common.applyBinding("body")
    })
}(jQuery),
function() {
    siberia.ensureObject("siberia.logging");
    siberia.logging = function() {
        var n = !1
          , t = function() {
            n = !0
        }
          , i = function() {
            n = !1
        }
          , r = function() {
            n && console.log.apply(null, arguments)
        };
        return {
            enable: t,
            disable: i,
            logToConsole: r
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.conciergePopup");
    siberia.conciergePopup = function() {
        function e() {
            n("#practiceUser_start").on("click", {
                requestId: n("#ConciergeRequestId").val()
            }, c);
            n("#practiceUser_pause").on("click", {
                requestId: n("#ConciergeRequestId").val()
            }, l);
            n("#practiceUser_complete").on("click", {
                requestId: n("#ConciergeRequestId").val()
            }, a);
            siberia.popup.create(u, {
                windowOptions: {
                    title: !1,
                    css: "concierge__incomingRequestPopup",
                    resizable: "true",
                    width: "550",
                    height: "500",
                    actions: ["Minimize", "Maximize", "Close"]
                },
                init: function() {},
                error: function() {},
                ajaxError: function() {},
                success: function() {},
                close: function() {},
                cancel: function() {}
            })
        }
        function o(r) {
            r.stopImmediatePropagation();
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                data: JSON.stringify({
                    mode: "1",
                    conciergeRequestId: n("#ConciergeUserRequest_Id").val()
                }),
                success: function(i) {
                    var r = new Date;
                    siberia.conciergeNotification.createCookie("con_startDate", r, 1);
                    siberia.conciergeNotification.eraseCookie("con_pauseDate");
                    n("#concierge_practiceUser_topBar2").css("display", "block");
                    siberia.popup.close("#PracticeUserPopup");
                    t(i)
                }
            })
        }
        function r(r) {
            r.stopImmediatePropagation();
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                data: JSON.stringify({
                    mode: "4",
                    conciergeRequestId: n("#ConciergeUserRequest_Id").val()
                }),
                success: function(n) {
                    siberia.conciergeNotification.eraseCookie("con_startDate");
                    siberia.conciergeNotification.eraseCookie("con_pauseDate");
                    siberia.popup.close("#PracticeUserPopup");
                    t(n)
                }
            })
        }
        function s(r) {
            r.stopImmediatePropagation();
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                data: JSON.stringify({
                    mode: "1",
                    conciergeRequestId: n("#hidden_conciergerequestId_topBar2").val()
                }),
                success: function(i) {
                    var r = new Date;
                    siberia.conciergeNotification.createCookie("con_startDate", r, 1);
                    siberia.conciergeNotification.eraseCookie("con_pauseDate");
                    n("#concierge_practiceUser_topBar2").css("display", "block");
                    t(i)
                }
            })
        }
        function h(r) {
            r.stopImmediatePropagation();
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                data: JSON.stringify({
                    mode: "4",
                    conciergeRequestId: n("#hidden_conciergerequestId_topBar2").val()
                }),
                success: function(i) {
                    n("#span_complete").css("display", "none");
                    n("#span_complete2").css("display", "none");
                    siberia.conciergeNotification.eraseCookie("con_startDate");
                    siberia.conciergeNotification.eraseCookie("con_pauseDate");
                    t(i)
                }
            })
        }
        function c(r) {
            r.stopImmediatePropagation();
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                data: JSON.stringify({
                    mode: "1",
                    conciergeRequestId: n("#ConciergeRequestId").val()
                }),
                success: function(i) {
                    var r = new Date;
                    siberia.conciergeNotification.createCookie("con_startDate", r, 1);
                    siberia.conciergeNotification.eraseCookie("con_pauseDate");
                    n("#concierge_practiceUser_topBar2").css("display", "block");
                    siberia.popup.close("#PracticeUserPopup");
                    t(i)
                }
            })
        }
        function l(r) {
            r.stopImmediatePropagation();
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                data: JSON.stringify({
                    mode: "2",
                    conciergeRequestId: n("#ConciergeRequestId").val()
                }),
                success: function(i) {
                    var r = new Date;
                    siberia.conciergeNotification.createCookie("con_pauseDate", r, 1);
                    n("#concierge_practiceUser_topBar2").css("display", "block");
                    siberia.popup.close("#PracticeUserPopup");
                    t(i)
                }
            })
        }
        function a(r) {
            r.stopImmediatePropagation();
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                data: JSON.stringify({
                    mode: "5",
                    conciergeRequestId: n("#ConciergeRequestId").val()
                }),
                success: function(n) {
                    siberia.conciergeNotification.eraseCookie("con_startDate");
                    siberia.conciergeNotification.eraseCookie("con_pauseDate");
                    siberia.popup.close("#PracticeUserPopup");
                    t(n)
                }
            })
        }
        function t(t) {
            t != null && (t.ConciergeUser != null && n("#span_agentName2").html(t.ConciergeUser.DisplayName),
            n("#span_status_message2").html(t.CustomeStatusText),
            t.ConciergeTransactionStatusId == "0" ? (n("#span_complete2").css("display", "none"),
            n("#span_start2").css("display", "none"),
            n("#span_complete").css("display", "none"),
            n("#span_start").css("display", "none"),
            n("#concierge_practiceUser_topBar2").css("display", "none"),
            n("#concierge_practiceUser_topBar").css("display", "none")) : t.ConciergeTransactionStatusId == "2" ? (n("#span_complete2").css("display", "none"),
            n("#span_start2").css("display", "block")) : t.ConciergeTransactionStatusId == "3" ? (n("#span_complete2").css("display", "block"),
            n("#span_start2").css("display", "none")) : t.ConciergeTransactionStatusId == "5" && (n("#concierge_practiceUser_topBar2").css("display", "none"),
            n("#concierge_practiceUser_topBar").css("display", "none")),
            n("#hidden_conciergerequestId_topBar2").val(t.Id))
        }
        var u = "#PracticeUserPopup"
          , i = n("#PracticeUserPopup").data("practice-update-status")
          , f = function() {
            n("#user_complete").on("click", {
                requestId: n("#ConciergeUserRequest_Id").val()
            }, r);
            n("#user_start").on("click", {
                requestId: n("#ConciergeUserRequest_Id").val()
            }, o);
            n("#user_complete2").on("click", h);
            n("#user_start2").on("click", s)
        };
        return {
            init: f,
            openPracticeUser: e,
            completeSession: r,
            setTopBarData: t
        }
    }();
    n(document).ready(function() {
        siberia.conciergePopup.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.kendoTooltipWrapper");
    var t = {
        cssClass: "new-tooltip-container",
        position: undefined
    };
    siberia.kendoTooltipWrapper = function(i, r) {
        var f = n.extend(!0, {}, t, r || {}), u = n(i).data("kendoTooltip"), e;
        if (u)
            return u.popup || (f.position && (u.options.position = f.position),
            u._initPopup()),
            e = u.popup.element,
            e && n(e).addClass(f.cssClass),
            u
    }
}(jQuery),
function(n) {
    function p(n) {
        return nt.indexOf(n) != -1
    }
    function w(n) {
        return '[name$="' + n + '"]'
    }
    function t(n) {
        return function(t) {
            return t.find(w(n))
        }
    }
    function o(n) {
        return function(i) {
            return kendo.widgetInstance(t(n)(i))
        }
    }
    function b(n) {
        var t = o("SuburbId")(n);
        return t.dataItems()
    }
    function it(i, r) {
        c(i).value(r);
        t("CountryId")(i).trigger("change");
        var u = t("CountryId")(i)[0].id.replace("CountryId", "")
          , f = "#" + u + "StateId";
        n(f).data().kendoDropDownList.dataSource.read({
            prefix: u
        })
    }
    function a(n, i) {
        var r = t("SuburbId")(n);
        siberia.multiSelect.clearServerFilteringState(r);
        i ? siberia.multiSelect.attachValue(r, i, "Id") : siberia.multiSelect.clearValue(r)
    }
    function rt(n) {
        return {
            AddressLine1: s(n).val(),
            AddressLine2: h(n).val(),
            CountryId: c(n).value(),
            StateId: i(n).value(),
            StateText: r(n).val(),
            SuburbText: u(n).val(),
            PostCodeText: f(n).val(),
            SelectedSuburbs: b(n),
            SuburbId: l(n).value(),
            CountryElement: t("CountryId")(n)
        }
    }
    function v(n, t) {
        s(n).val(t.AddressLine1);
        h(n).val(t.AddressLine2);
        it(n, t.CountryId);
        p(t.CountryId) ? (i(n).value(t.StateId),
        a(n, t.SelectedSuburbs),
        r(n).val(""),
        u(n).val(""),
        f(n).val("")) : (i(n).value(""),
        a(n, null),
        r(n).val(t.StateText),
        u(n).val(t.SuburbText),
        f(n).val(t.PostCodeText))
    }
    function ut(n) {
        v(n, {
            AddressLine1: "",
            AddressLine2: "",
            CountryId: g,
            StateId: "",
            SelectedSuburbs: null,
            StateText: "",
            SuburbText: "",
            PostCodeText: ""
        })
    }
    function ft(n) {
        v(n, {
            AddressLine1: "",
            AddressLine2: "",
            CountryId: "",
            StateId: "",
            SelectedSuburbs: null,
            StateText: "",
            SuburbText: "",
            PostCodeText: ""
        })
    }
    function et(n, t) {
        s(n).prop("readonly", t);
        h(n).prop("readonly", t);
        c(n).enable(!t);
        i(n).enable(!t);
        l(n).enable(!t);
        r(n).prop("readonly", t);
        u(n).prop("readonly", t);
        f(n).prop("readonly", t)
    }
    function ot() {
        var t = "#" + e + "CountryId"
          , i = "#" + e + "SuburbId"
          , r = n(t).data("kendoDropDownList").value()
          , u = n(i).data("kendoMultiSelect")._prev;
        return {
            SelectedCountryId: r,
            Text: u
        }
    }
    function st(t) {
        var r = typeof t.prefix != "undefined" ? t.prefix : ""
          , i = "#" + r + "CountryId";
        return {
            SelectedCountryId: n(i).data("kendoDropDownList") ? n(i).data("kendoDropDownList").value() : null
        }
    }
    function ht(t) {
        var i = n(t.sender.element)[0].id
          , r = "#" + i;
        e = i.replace("SuburbId", "");
        n(r).data().kendoMultiSelect.dataSource.read()
    }
    function ct(t) {
        var i = n(t.sender.element)[0].id
          , r = "#" + i;
        e = i.replace("SuburbId", "");
        n(r).data("kendoMultiSelect")._prev != "" && n(r).data().kendoMultiSelect.dataSource.read()
    }
    function lt(t) {
        var i = n(t.sender.element)[0].id.replace("CountryId", "")
          , r = "#" + i + "StateId";
        n(r).data().kendoDropDownList.dataSource.read({
            prefix: i
        })
    }
    function k(n) {
        return n.closest(y)
    }
    function d(t) {
        var s = n(t)
          , h = s.val()
          , e = k(s)
          , o = p(h);
        e.find(".js-address-with-states-and-suburbs").toggle(o);
        e.find(".js-address-without-states-and-suburbs").toggle(!o);
        e.closest("form").find(tt).each(function(t, i) {
            var r = n(i)
              , u = r.data("kendoMaskedTextBox")
              , f = r.attr("data-mask");
            u && f && u.setOptions({
                mask: o ? f : ""
            })
        });
        siberia.requiredIf.checkRequired(t);
        r(e).prop("disabled", o);
        u(e).prop("disabled", o);
        f(e).prop("disabled", o);
        i(e).enable(o);
        l(e).enable(o);
        o ? (r(e).val(""),
        u(e).val(""),
        f(e).val("")) : (i(e).value(""),
        a(e, null))
    }
    function at(t) {
        var e = n(t)
          , r = k(e)
          , u = b(r).pop()
          , o = u && u.StateId || ""
          , f = i(r);
        f.value(o);
        f.element.trigger("change")
    }
    function vt() {
        n(document.body).on("change", ".js-address-country", function(n) {
            d(n.target)
        });
        n(document.body).on("change", y + " " + w("SuburbId"), function(n) {
            at(n.target)
        });
        n("input.js-address-country").each(function(n, t) {
            d(t)
        })
    }
    siberia.ensureObject("siberia.address");
    var g = "1"
      , e = ""
      , nt = siberia.config.countriesWithStatesAndSuburbs.split(",")
      , tt = ["Phone", "HomePhone", "WorkPhone", "MobilePhone", "PhoneNumber1", "PhoneNumber2", "PhoneNo1", "PhoneNo2", "Fax"].map(function(n) {
        return '[name$="' + n + '"]'
    }).join(",")
      , y = ".js-address";
    var s = t("AddressLine1")
      , h = t("AddressLine2")
      , i = o("StateId")
      , c = o("CountryId")
      , r = t("StateText")
      , u = t("SuburbText")
      , f = t("PostCodeText")
      , l = o("SuburbId");
    siberia.address = {
        get: rt,
        set: v,
        readonly: et,
        clear: ut,
        empty: ft,
        onSuburbOpen: ht,
        onSuburbFiltering: ct,
        onCountryChange: lt,
        filterSuburbByCountryIdParameter: ot,
        filterStatesByCountryIdParameter: st
    };
    n(document).ready(vt)
}(jQuery),
function(n) {
    n(document).ready(function() {
        setTimeout(function() {
            n(document.body).removeClass("loading")
        }, 10)
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.printPreview");
    var t = function(t) {
        return function(i, r) {
            var u = n(".js-print-preview");
            u.attr("action", siberia.config.urls[t](r));
            u.find('[name$="Text"]').val(i.text || "");
            u.find('[name$="Footer"]').val(i.footer || "");
            u.find('[name$="Header"]').val(i.header || "");
            u.submit()
        }
    };
    siberia.printPreview.letter = t("previewLetter");
    siberia.printPreview.letterTemplate = t("previewLetterTemplate");
    siberia.printPreview.document = t("previewDocument");
    siberia.printPreview.recallTextTemplate = t("previewRecallTextTemplate")
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.uploadPicture");
    siberia.uploadPicture = function() {
        function u(u, e, o) {
            var h = n.extend(!0, {}, r, o || {}), s;
            u.length > 0 && (s = n(e).val(),
            s != null && s != "" ? i(u, s) : t(u, e),
            f(u, e, h))
        }
        function f(r, u, f) {
            r.on("click", ".js-clear-picture", function(n) {
                n.preventDefault();
                t(r, u)
            });
            r.on("click", ".js-change-picture", function(o) {
                o.preventDefault();
                siberia.popup.create(f.pictureFilePopupSelector, {
                    windowOptions: {
                        title: text.global.titles.addPicture,
                        width: "400"
                    },
                    ajax: {
                        enabled: !0
                    },
                    clear: function() {
                        e(f.kendoUploaderName)
                    },
                    success: function(f) {
                        f != null && f != "" ? (n(u).val(f),
                        i(r, f)) : t(r, u)
                    }
                })
            })
        }
        function t(t, i) {
            n(i).val("");
            t.find(".js-picture-image").hide();
            t.find(".js-clear-picture").attr("disabled", !0);
            var r = t.find(".js-change-picture");
            r.text(r.attr("data-add-text"))
        }
        function i(n, t) {
            var u = n.find(".js-picture-image").data("get-picture-url"), i, r;
            u && (i = n.find(".js-picture-image"),
            i.attr("src", kendo.format(u, t)),
            i.show(),
            n.find(".js-clear-picture").attr("disabled", !1),
            r = n.find(".js-change-picture"),
            r.text(r.attr("data-change-text")))
        }
        function e(t) {
            var i = n("#" + t).data("kendoUpload").wrapper;
            i.find('input:not([id="' + t + '"]), ul').each(function() {
                n(this).remove()
            });
            i.first().addClass("k-upload-empty")
        }
        const r = {
            pictureFilePopupSelector: "#picture-file-popup",
            kendoUploaderName: "PictureUploader"
        };
        return {
            init: u,
            clearPicture: t,
            updatePicture: i
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.favorites");
    siberia.favorites.init = function(t, i) {
        function h(n) {
            var t = r.dataSourcePOSTParamsRelatedFields
              , i = function() {
                var i = {};
                Object.keys(t).forEach(function(n) {
                    i[n] = t[n].val()
                });
                n.setDataSource({
                    transport: {
                        read: {
                            type: "POST",
                            url: n.dataSource.transport.options.read.url,
                            data: i
                        }
                    }
                })
            };
            if (t) {
                for (name in t)
                    t[name].on("change", i);
                r.suppressInitialLoading || i()
            }
        }
        function c() {
            n(t).each(function(t, i) {
                var f = n(i).find("select" + r.favoriteListSelector).data("kendoMultiSelect");
                f && (f.bind("change", o),
                f.value().length === 0 && u(!1),
                e(n(i), f))
            })
        }
        function e(t, i) {
            r.clearMultiSelectOnFormChange && (t.find('input[type!="hidden"][type!="submit"][type!="reset"]').bind("input change", function() {
                f(i)
            }),
            t.find(".js-reset").bind("click", function() {
                f(i)
            }),
            t.find("textarea").bind("input propertychange", function() {
                f(i)
            }),
            t.find("select").each(function(t, r) {
                var u = n(r).data("kendoMultiSelect");
                u && u !== i && u.bind("change", function() {
                    f(i)
                })
            }))
        }
        function f(n) {
            siberia.multiSelect.clear(n);
            u(!1);
            r.removedFavorite && r.removedFavorite() && removedFavorite()
        }
        function l(t) {
            var i, u;
            (t.preventDefault(),
            n(t.currentTarget).blur(),
            i = n(t.delegateTarget).find("select" + r.favoriteListSelector).data("kendoMultiSelect"),
            i) && (u = function() {
                r.getFavoriteDataAction && r.saveFavoriteUrl && siberia.popup.create("#favorite-popup", {
                    windowOptions: {
                        title: text.global.titles.popupSaveFavourite
                    },
                    customSubmitUrl: r.saveFavoriteUrl,
                    clear: function() {
                        n("#Favorite_Name").val("");
                        n("#favorite-popup").off("click", ".js-save-favorite-custom");
                        n("#favorite-popup").on("click", ".js-save-favorite-custom", function() {
                            a(i)
                        })
                    }
                })
            }
            ,
            r.validateFavoriteDataAction ? r.validateFavoriteDataAction(u) : u())
        }
        function a(t) {
            var i = r.getFavoriteDataAction(), o = n("#favorite-popup [name$=Name]").val(), e, f;
            i.Id = 0;
            i.Name = o;
            e = function() {
                siberia.popup.close("#favorite-popup")
            }
            ;
            f = n("#favorite-popup");
            f.spinner(!0);
            n.ajax({
                type: "POST",
                url: r.saveFavoriteUrl,
                contentType: "application/json",
                data: JSON.stringify(i),
                success: function(i) {
                    if (siberia.validation.processAjaxErrors(n("#favorite-popup").find("form"), i.Errors)) {
                        var r = i.Data[0].Id.toString()
                          , f = t.dataSource.data().slice();
                        t.dataSource.filter({});
                        f.push({
                            Id: r,
                            Text: n("#Favorite_Name").val()
                        });
                        t.dataSource.data(f);
                        t.dataSource.sort({
                            field: "Text",
                            dir: "asc"
                        });
                        t.value([r]);
                        u(!0, t.value().length);
                        e()
                    }
                },
                error: function(t) {
                    siberia.validation.processAjaxErrors(n("#favorite-popup").find("form"), t.Errors) && siberia.notification.showErrorNotification(text.global.status.ajaxError)
                },
                complete: function() {
                    f.spinner(!1)
                }
            })
        }
        function o() {
            var i, t;
            if (siberia.validation.clearValidationErrors(this.wrapper.closest("form")),
            this.value() === null || this.value() === "" || this.value().length === 0) {
                r.clearFavoriteDataAction && r.clearFavoriteDataAction();
                u(!1);
                return
            }
            if (i = this,
            t = this.value(),
            r.loadFavoriteAction) {
                r.loadFavoriteAction(t);
                u(!0, t.length);
                return
            }
            if (r.setFavoriteDataAction) {
                var o = this.wrapper.find("select").data("get-favorite-url")
                  , f = this.wrapper.closest("form")
                  , e = this.wrapper.closest(".k-window");
                e.spinner(!0);
                n.ajax({
                    type: "POST",
                    url: o,
                    contentType: "application/json",
                    data: JSON.stringify({
                        favoriteIds: t,
                        locationId: n("#AppointmentLocationId").val()
                    }),
                    success: function(n) {
                        siberia.validation.processAjaxErrors(f, n.Errors) ? n && (r.setFavoriteDataAction(n),
                        u(!0, t.length)) : siberia.multiSelect.clear(i)
                    },
                    error: function() {
                        siberia.validation.showFormNetworkError(f);
                        siberia.multiSelect.clear(i);
                        r.clearFavoriteDataAction && r.clearFavoriteDataAction();
                        u(!1)
                    },
                    complete: function() {
                        e.spinner(!1)
                    }
                })
            }
        }
        function v(t) {
            var i;
            if ((t.preventDefault(),
            n(t.currentTarget).blur(),
            i = n(t.delegateTarget).find("select" + r.favoriteListSelector).data("kendoMultiSelect"),
            i) && (siberia.validation.clearValidationErrors(i.wrapper.closest("form")),
            i.value().length !== 0) && (!r.confirmText || confirm(r.confirmText))) {
                var e = i.dataItems()
                  , u = i.wrapper.closest("form")
                  , s = n(t.currentTarget).data("delete-url")
                  , o = i.wrapper.closest(".k-window");
                o.spinner(!0);
                n.ajax({
                    type: "POST",
                    url: s,
                    contentType: "application/json",
                    data: JSON.stringify({
                        id: e[0].Id
                    }),
                    success: function(t) {
                        t.Errors ? u.length ? siberia.validation.processAjaxErrors(u, t.Errors) : n.each(t.Errors, function(n, t) {
                            siberia.notification.showErrorNotification(t.errors[0])
                        }) : (i.dataSource.remove(e[0]),
                        f(i),
                        r.clearFavoriteDataAction && r.clearFavoriteDataAction())
                    },
                    error: function() {
                        u.length ? siberia.validation.showFormNetworkError(u) : siberia.notification.showErrorNotification(text.global.status.networkError)
                    },
                    complete: function() {
                        o.spinner(!1)
                    }
                })
            }
        }
        function u(t, i) {
            t && i === 1 ? n(r.deleteFavoriteBtn).removeClass("btn-disabled") : n(r.deleteFavoriteBtn).addClass("btn-disabled")
        }
        var s = {
            saveFavoriteBtn: ".js-save-favorite",
            deleteFavoriteBtn: ".js-delete-favorite",
            favoriteListSelector: ".js-favorite-list",
            saveFavoriteUrl: null,
            validateFavoriteDataAction: undefined,
            getFavoriteDataAction: undefined,
            setFavoriteDataAction: undefined,
            clearFavoriteDataAction: undefined,
            removedFavorite: undefined,
            loadFavoriteAction: undefined,
            clearMultiSelectOnFormChange: !0,
            confirmText: text.global.confirms.deleteFavourite,
            dataSourcePOSTParamsRelatedFields: undefined
        }
          , r = n.extend(!0, {}, s, i || {});
        return n(t).each(function(t, i) {
            var f = n(i).find("select" + r.favoriteListSelector).data("kendoMultiSelect");
            f && (f.bind("change", o),
            f.value().length === 0 && u(!1),
            e(n(i), f),
            h(f));
            n(i).on("click", r.saveFavoriteBtn, function(n) {
                l(n)
            });
            n(i).on("click", r.deleteFavoriteBtn, function(n) {
                v(n)
            })
        }),
        {
            reInitFavoriteMultiselect: c
        }
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.patientAlert");
    siberia.patientAlert = function() {
        function u(i, r) {
            var u = n(i).find(t);
            u.length != 0 && (u.hide(),
            r && r != 0) && (o(u, r) || s(u, r))
        }
        function f(n, t) {
            i(n, {
                Id: "",
                Alert: t
            })
        }
        function i(i, u) {
            var f = n(i).find(t);
            f.length != 0 && (f.hide(),
            r(f, u))
        }
        function e(i) {
            n(i).find(t).hide()
        }
        function o(n, t) {
            var i = n.find('[data-alert-for-patient="' + t + '"]');
            return i.length == 0 ? !1 : (n.show(),
            !0)
        }
        function s(t, i) {
            var u = t.data("get-alerts-url");
            n.ajax({
                type: "POST",
                url: u,
                contentType: "application/json",
                data: JSON.stringify({
                    patientId: i
                }),
                success: function(n) {
                    r(t, {
                        Id: i,
                        Alert: n
                    })
                }
            })
        }
        function r(n, t) {
            if (t) {
                n.find(".js-patient-alert-message").removeAttr("data-alert-for-patient").text("");
                var r = t.Id
                  , i = t.Alert;
                i && (n.find(".js-patient-alert-message").attr("data-alert-for-patient", r).text(i),
                n.show())
            }
        }
        var t = ".js-patient-alert";
        return {
            showPatientAlert: u,
            showAlertMessage: f,
            showExistingPatientAlert: i,
            hide: e
        }
    }();
    n(document).ready(function() {})
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.navigationMenu");
    siberia.navigationMenu = function() {
        function i() {
            var n = t.wrapper.find('a[href="' + location.pathname + '"]'), i;
            n.length == 1 && (i = n.closest("li[aria-expanded]"),
            t.expand(i))
        }
        function r() {
            n("#menu-panelbar").length > 0 && (t = n("#menu-panelbar").kendoPanelBar().data("kendoPanelBar"),
            i(),
            n("#menu-panelbar .js-new-patient-menu-btn").click(function() {
                var t = n(this).data("link");
                window.location.href = t
            }))
        }
        var t;
        return {
            init: r
        }
    }();
    n(document).ready(function() {
        siberia.navigationMenu.init()
    })
}(jQuery),
function(n) {
    function t() {
        n(document.body).on("click", ".js-quick-clinical-consult", function(t) {
            t.preventDefault();
            var i = n(t.currentTarget)
              , r = i.attr("data-patient-id");
            siberia.quickConsult.create(r)
        })
    }
    function i(t) {
        return n.ajax({
            type: "POST",
            url: siberia.config.urls.createQuickConsult(),
            contentType: "application/json",
            data: JSON.stringify({
                patientId: t
            })
        })
    }
    siberia.ensureObject("siberia.quickConsult");
    siberia.quickConsult.create = function(t) {
        n(".js-global-spinner-container").spinner(!0);
        i(t).then(function(n) {
            siberia.validation.processGridActionAjaxErrors(n.Errors) && window.open(n.redirectUrl, siberia.common.getWindowTarget(n.redirectUrl))
        }).fail(function() {
            siberia.validation.showGridNetworkError()
        }).always(function() {
            n(".js-global-spinner-container").spinner(!1)
        })
    }
    ;
    n(document).ready(t)
}(jQuery),
function(n) {
    function t() {
        var t = n(".js-login-button");
        t.length > 0 && (t.click(i),
        siberia.partialLogout.setDoNotShowPopup())
    }
    function i(t) {
        var u, r, i, f, e;
        t.preventDefault();
        u = n(t.currentTarget);
        u.blur();
        r = u.closest("form");
        i = n(".js-global-spinner-container");
        i.spinner(!0);
        f = n("#Field1").val();
        e = n("#Field2").val();
        n("#Field2").val("");
        n.ajax({
            type: "POST",
            url: r.get(0).action,
            contentType: "application/json",
            data: JSON.stringify({
                Email: f,
                Password: e,
                ReturnUrl: n("#ReturnUrl").val()
            }),
            success: function(t) {
                siberia.validation.processAjaxErrors(r, t.Errors) ? t.ShowPatientPortalLoginRedirectPage ? (i.spinner(!1),
                n("#new-patient-portal-login-page").show(),
                n("#redirect-portal-link").attr("href", t.PatientPortalLinkUrl)) : t.RedirectUrl && (t.LoginAccount ? siberia.partialLogout.setNewLoginAccount(t.LoginAccount).done(function() {
                    window.location.href = t.RedirectUrl
                }) : window.location.href = t.RedirectUrl) : i.spinner(!1)
            },
            error: function() {
                i.spinner(!1);
                siberia.validation.showFormNetworkError(r)
            }
        })
    }
    n(document).ready(function() {
        t()
    })
}(jQuery),
function(n) {
    function t() {
        i();
        n("#initAuthButton").click(u);
        n("#enterAuthCode").click(r)
    }
    function i() {
        var t = n("#qrcode")
          , i = t.data("secret")
          , r = t.data("title");
        t.qrcode({
            size: 150,
            color: "#3a3",
            text: "otpauth://totp/" + r + "?secret=" + i
        })
    }
    function r(t) {
        var u, i, r;
        t.preventDefault();
        u = n(t.currentTarget);
        u.blur();
        i = u.closest("form");
        r = n(".js-global-spinner-container");
        r.spinner(!0);
        n.ajax({
            type: "POST",
            url: i.get(0).action,
            contentType: "application/json",
            data: JSON.stringify({
                AuthCode: n("#AuthCode").val(),
                ReturnUrl: n("#ReturnUrl").val()
            }),
            success: function(n) {
                siberia.validation.processAjaxErrors(i, n.Errors) ? n.RedirectUrl && (window.location.href = n.RedirectUrl) : r.spinner(!1)
            },
            error: function() {
                r.spinner(!1);
                siberia.validation.showFormNetworkError(i)
            }
        })
    }
    function u(t) {
        var u, i, r;
        t.preventDefault();
        u = n(t.currentTarget);
        u.blur();
        i = u.closest("form");
        r = n(".js-global-spinner-container");
        r.spinner(!0);
        n.ajax({
            type: "POST",
            url: i.get(0).action,
            contentType: "application/json",
            data: JSON.stringify({
                SecretKey: n("#SecretKey").val(),
                AuthCode: n("#AuthCode").val(),
                ReturnUrl: n("#ReturnUrl").val()
            }),
            success: function(n) {
                siberia.validation.processAjaxErrors(i, n.Errors) ? n.RedirectUrl && (window.location.href = n.RedirectUrl) : r.spinner(!1)
            },
            error: function() {
                r.spinner(!1);
                siberia.validation.showFormNetworkError(i)
            }
        })
    }
    n(document).ready(function() {
        t()
    })
}(jQuery),
function(n) {
    function u() {
        let i = n(t.savePasswordButton);
        if (i.length) {
            siberia.passwordStrength.init(t.newPassword);
            i.click(f);
            n(t.newPassword).on("input", r);
            n(t.confirmPassword).on("input", r)
        }
    }
    function f(r) {
        r.preventDefault();
        let o = n(r.currentTarget)
          , u = o.closest("form")
          , s = u.get(0).action
          , f = n(t.spinnerContainer);
        f.spinner(!0);
        n.post(s, i()).done(function(n) {
            siberia.validation.processAjaxErrors(u, n.Errors) ? (e(),
            n.RedirectUrl && (window.location.href = n.RedirectUrl)) : f.spinner(!1)
        }).fail(function() {
            f.spinner(!1);
            siberia.validation.showFormNetworkError(u)
        })
    }
    function i() {
        return {
            CurrentPassword: n(t.currentPassword).val(),
            NewPassword: n(t.newPassword).val(),
            ConfirmedPassword: n(t.confirmPassword).val(),
            __RequestVerificationToken: n(t.requestVerificationToken).val()
        }
    }
    function r() {
        let r = i()
          , u = r.NewPassword === r.ConfirmedPassword && r.NewPassword !== "" && siberia.passwordStrength.check(r.NewPassword);
        n(t.savePasswordButton).toggleClass("disabled", !u)
    }
    function e() {
        localStorage.setItem(siberia.config.constant.passwordChangedNotificationLocalStorageItem, "True")
    }
    const t = {
        savePasswordButton: ".js-change-temp-password-form-submit",
        spinnerContainer: ".js-global-spinner-container",
        currentPassword: "#CurrentPassword",
        newPassword: "#NewPassword",
        confirmPassword: "#ConfirmedPassword",
        passwordStatus: "#PasswordStatus",
        requestVerificationToken: '.change-temp-password-form input[name="__RequestVerificationToken"]'
    };
    n(document).ready(function() {
        u()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.imagingEquipment");
    siberia.imagingEquipment = function() {
        function i() {
            var t = n("#imaging-equipment-grid").data("kendoGrid");
            t && t.bind("edit", function(n) {
                n.container.find(".js-generic-grid-read-mode-buttons").hide();
                n.container.find(".js-generic-grid-edit-mode-buttons").show()
            })
        }
        function r() {
            return {
                locationId: t
            }
        }
        function u(i) {
            t = i.Id;
            siberia.popup.create("#imaging-equipment-popup", {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.popupImagingEquipment,
                    width: "870"
                },
                clear: function() {
                    n("#imaging-equipment-grid").data("kendoGrid").dataSource.read()
                },
                success: function() {}
            })
        }
        var t;
        return {
            init: i,
            showPopup: u,
            getReadParams: r
        }
    }();
    n(document).ready(function() {
        siberia.imagingEquipment.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.doctorImagingMachines");
    siberia.doctorImagingMachines = function() {
        function s() {
            n(".js-imaging-machine-setting.selected-machine.js-default-machine").removeClass("js-default-machine")
        }
        function r(t, i) {
            var r = n('.js-imaging-machine-setting[data-imaging-machine-id="' + t.value + '"]');
            i ? r.addClass("js-default-machine") : r.removeClass("js-default-machine")
        }
        function h(n, t) {
            var r = new f(n);
            t ? i.add(r) : i.remove(r)
        }
        function f(n) {
            this.text = n.context.innerText.trim();
            this.value = n.attr("data-imaging-machine-id");
            this.isDefault = n.hasClass("js-default-machine")
        }
        function e() {
            i.refreshModel();
            t.find(".js-imaging-machine-setting.selected-machine").each(function(t, r) {
                var u = new f(n(r));
                i.add(u);
                u.isDefault && (i.selected = u.value)
            });
            kendo.bind(n("#defaultMachine"), i)
        }
        function c() {
            n("#doctor-imaging-machine-settings").length !== 0 && (siberia.grid.initClientGrid({
                gridSelector: "#doctor-imaging-machine-settings",
                editAction: l,
                isCustomEditing: !0
            }),
            a())
        }
        function l(r) {
            var f = kendo.format(t.attr("data-get-popup-content-url"), r.LocationId, siberia.userSettings.getUserId());
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.popupImagingMachineSettings,
                    width: "500"
                },
                extraData: function() {
                    var u = [];
                    return t.find(".js-imaging-machine-setting.selected-machine").each(function(t, i) {
                        u.push(n(i).attr("data-imaging-machine-id"))
                    }),
                    {
                        locationId: r.LocationId,
                        settingIds: JSON.stringify(u),
                        userId: siberia.userSettings.getUserId(),
                        defaultId: i.selected
                    }
                },
                preLoadOptions: {
                    dataUrl: f,
                    preLoadSuccess: function(n) {
                        t.find(".js-content-container").html(n);
                        t.find(".js-imaging-machine-setting").length ? t.find(".js-popup-submit").show() : t.find(".js-popup-submit").hide();
                        u();
                        e()
                    }
                },
                success: function() {
                    var t = n("#doctor-imaging-machine-settings").data("kendoGrid");
                    t && t.dataSource.read()
                }
            })
        }
        function a() {
            t.on("click", "#checkAllImagingMachines", function(n) {
                n.preventDefault();
                o() ? t.find(".js-imaging-machine-setting").removeClass("selected-machine") : t.find(".js-imaging-machine-setting").addClass("selected-machine");
                u();
                e()
            });
            t.on("click", ".js-imaging-machine-setting", function(t) {
                t.preventDefault();
                var i = n(t.currentTarget)
                  , r = i.hasClass("selected-machine");
                i.toggleClass("selected-machine");
                u();
                h(i, !r)
            })
        }
        function u() {
            o() ? t.find("#checkAllImagingMachines").addClass("selected-machine") : t.find("#checkAllImagingMachines").removeClass("selected-machine")
        }
        function o() {
            return t.find(".js-imaging-machine-setting.selected-machine").length == t.find(".js-imaging-machine-setting").length
        }
        var t = n("#doctor-imaging-machine-settings-popup")
          , i = kendo.observable({
            items: [],
            selected: undefined,
            onChange: function(n) {
                s();
                r(n.sender.dataItem(), !0)
            },
            add: function(t) {
                t && this.getIndex(t) === -1 && this.items.push(t);
                var i = n(".js-imaging-machine-setting.selected-machine.js-default-machine");
                i && i.length !== 0 || this.updateDefault()
            },
            remove: function(n) {
                var t = this.getIndex(n);
                t > -1 && (this.items.splice(t, 1),
                n.value.toString() === this.selected && (this.selected = undefined));
                r(n, !1);
                this.updateDefault()
            },
            getIndex: function(n) {
                return this.items.map(function(n) {
                    return n.value
                }).indexOf(n.value)
            },
            updateDefault: function() {
                if (!this.selected && this.items && this.items.length) {
                    var n = this.items[0];
                    this.set("selected", n.value);
                    r(n, !0)
                } else
                    !this.selected || this.items && this.items.length || (this.selected = undefined)
            },
            refreshModel: function() {
                this.items.splice(0, this.items.length);
                this.selected = 0
            }
        });
        return {
            init: c
        }
    }();
    n(document).ready(function() {
        siberia.doctorImagingMachines.init()
    })
}(jQuery),
function(n) {
    function h() {
        if (siberia.multiSelect.fixServerFiltering("#LocationList_SuburbId", ["PostCode", "SuburbName"]),
        f = n("#LocationList_StartTime").val(),
        e = n("#LocationList_EndTime").val(),
        t = n("#location-popup"),
        t && t.length !== 0) {
            i = t.find("#LocationList_AllowedNumberOfIntersectedAppointments").data("kendoNumericTextBox");
            u = n("#location-list-grid").attr("data-delete-location-url");
            siberia.grid.initClientGrid({
                gridSelector: "#location-list-grid",
                customSelector: ".js-imaging-equipment",
                customAction: siberia.imagingEquipment.showPopup,
                addAction: l,
                editAction: a,
                customDelete: v,
                isCustomEditing: !0
            });
            n("#getLocationMedicareLocationIdBtn").on("click", c)
        }
    }
    function c(t) {
        var i, r, u, f, e;
        if (t.preventDefault(),
        i = n(this),
        i.blur(),
        r = n("#LocationList_Id").val(),
        r <= 0) {
            alert(text.global.validation.saveLocationBeforeGettingMedicareLocationId);
            return
        }
        u = i.closest("form");
        f = i.data("get-medicare-id-url");
        f && (e = n("#location-popup"),
        e.spinner(!0),
        n.ajax({
            type: "POST",
            url: f,
            data: {
                locationId: r
            },
            success: function(t) {
                siberia.validation.processAjaxErrors(u, t.Errors) && t && n("#LocationList_MedicareLocationId").text(t)
            },
            error: function() {
                siberia.validation.showFormNetworkError(u)
            },
            complete: function() {
                e.spinner(!1)
            }
        }))
    }
    function l(n) {
        siberia.popup.create("#location-popup", {
            submitText: text.global.labels.create,
            windowOptions: {
                title: text.global.titles.addLocation,
                width: "870"
            },
            clear: function() {
                n.item.AllowedNumberOfIntersectedAppointments = 2;
                s(n.item)
            },
            success: r,
            cancel: function() {
                n.cancel()
            }
        })
    }
    function a(n) {
        siberia.popup.create("#location-popup", {
            submitText: text.global.labels.update,
            windowOptions: {
                title: text.global.titles.editLocation,
                width: "870"
            },
            clear: function() {
                s(n)
            },
            success: r
        })
    }
    function v(t) {
        if (u) {
            var i = n(".js-global-spinner-container");
            i.spinner(!0);
            n.ajax({
                type: "POST",
                url: u,
                data: {
                    locationId: t.Id
                },
                success: function(n) {
                    siberia.validation.processGridActionAjaxErrors(n.Errors, !0) && (n === "OK" ? r() : n && y(n))
                },
                error: function() {
                    siberia.validation.showGridNetworkError(!0)
                },
                complete: function() {
                    i.spinner(!1)
                }
            })
        }
    }
    function y(t) {
        siberia.popup.create("#deactivate-location-popup", {
            submitText: text.global.labels.deactivate,
            windowOptions: {
                title: text.global.titles.deactivateLocation,
                width: "400"
            },
            clear: function() {
                n(".js-confirmation-title").html(t)
            },
            success: r
        })
    }
    function r() {
        n("#location-list-grid").data("kendoGrid").dataSource.read()
    }
    function o(n) {
        n ? i.enable() : i.readonly()
    }
    function s(t) {
        n("#LocationTabs").data("kendoTabStrip").select(0);
        n("#LocationList_Id").val(t.Id);
        n("#LocationList_Name").val(t.Name);
        n("#LocationList_TimeZoneId").data("kendoDropDownList").value(t.TimeZoneId);
        n("#LocationList_AppointmentInterval").data("kendoDropDownList").value(t.AppointmentInterval);
        n("#LocationList_PhoneNumber1").data("kendoMaskedTextBox").value(t.PhoneNumber1);
        n("#LocationList_PhoneNumber2").data("kendoMaskedTextBox").value(t.PhoneNumber2);
        n("#LocationList_Fax").data("kendoMaskedTextBox").value(t.Fax);
        n("#LocationList_Email").val(t.Email);
        n("#LocationList_MedicareLocationId").text(t.MedicareLocationId);
        n("#LocationList_AllowMultipleAppointments").prop("checked", t.AllowMultipleAppointments);
        i.value(t.AllowedNumberOfIntersectedAppointments);
        o(t.AllowMultipleAppointments);
        n("#LocationList_AllowMultipleAppointments").click(function() {
            o(this.checked)
        });
        n("#LocationList_HospitalFee").val(t.HospitalFee);
        n("#LocationList_LocationNotes").val(t.LocationNotes);
        n("#LocationList_FacilityId").val(t.FacilityId);
        n("#LocationList_HasBirthingSuite").prop("checked", t.HasBirthingSuite);
        n("#LocationList_BirthingSuite").prop("hidden", !t.ShowBirthingSuite);
        t.StartTimeString ? n("#LocationList_StartTime").data("kendoTimePicker").value(t.StartTimeString) : n("#LocationList_StartTime").data("kendoTimePicker").value(f);
        t.EndTimeString ? n("#LocationList_EndTime").data("kendoTimePicker").value(t.EndTimeString) : n("#LocationList_EndTime").data("kendoTimePicker").value(e);
        siberia.address.set(n("#location-popup"), t)
    }
    var t, i, f, e, u;
    n(document).ready(function() {
        h()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.healthFundList");
    siberia.healthFundList = function() {
        function e() {
            var i = n("#health-fund-popup"), t;
            if (i.length !== 0) {
                siberia.grid.initClientGrid({
                    gridSelector: "#health-fund-list-grid",
                    saveAndCloseSelector: null,
                    saveSelector: null,
                    addAction: p,
                    editAction: u,
                    viewAction: u,
                    deleteAction: y,
                    isCustomEditing: !0
                });
                t = n("#health-fund-list-grid");
                t.on("click", ".js-health-fund-items", l);
                siberia.dictionaryAdministration.initDictionaryGrid("#generic-schedule-list-grid");
                n("#generic-schedule-list-grid").on("click", ".js-generic-schedule-items", h);
                n("#UploadAmaFileBtn").on("click", s);
                n("#UploadAhsaFileBtn").on("click", a);
                n("#UploadWorkcoverFileBtn").on("click", c);
                n("#UploadTyroBookFileBtn").on("click", o);
                siberia.excelPreview.initExcelPreview()
            }
        }
        function o() {
            var r = {
                title: text.global.titles.popupExtrasCover,
                successMessage: text.invoices.extrasCover,
                notificationElement: n("#UploadTyroBookFileBtn"),
                showControls: ["ExtrasCoverModalityCodeColumn", "ExtrasCoverItemNumberColumn", "ExtrasCoverCategoryCodeColumn", "ExtrasCoverDescriptionColumn"],
                scheduleType: 7
            };
            t = !0;
            i(r)
        }
        function s() {
            var r = {
                title: text.global.titles.popupAMAItems,
                successMessage: text.invoices.uploadSuccessAMA,
                notificationElement: n("#UploadAmaFileBtn"),
                showControls: ["ItemNumberColumn", "ItemPriceColumn", "ItemDescriptionColumn", "ScheduleNumberColumn"],
                scheduleType: 7
            };
            t = !1;
            i(r)
        }
        function h() {
            var r = {
                title: text.global.titles.popupGenericItems,
                successMessage: text.invoices.uploadSuccessGeneric,
                notificationElement: n("#generic-schedule-list-grid .k-grid-toolbar"),
                showControls: ["ItemNumberColumn", "ItemPriceColumn"],
                genericScheduleId: n(this).data("generic-schedule-id"),
                scheduleType: 8
            };
            t = !1;
            i(r)
        }
        function c() {
            var r = {
                title: text.global.titles.popupWorkcoverItems,
                successMessage: text.invoices.uploadSuccessWorkcover,
                notificationElement: n("#UploadWorkcoverFileBtn"),
                showControls: ["ItemNumberColumn", "ItemPriceColumn"],
                scheduleType: 9
            };
            t = !1;
            i(r)
        }
        function l() {
            var u = {
                title: text.global.titles.popupHealthFundItems,
                successMessage: text.invoices.uploadSuccessHealthFund,
                notificationElement: n("#health-fund-list-grid .k-grid-toolbar"),
                showControls: ["ItemNumberColumn", "SecondItemNumberColumn", "NoGapSchemeColumn", "KnownGapSchemeColumn", "NoGapSchemePercentColumn", "KnownGapSchemePercentColumn", "GapSchemePercentRuleColumn", "SecondNoGapSchemeColumn", "SecondKnownGapSchemeColumn", "SecondNoGapSchemePercentColumn", "SecondKnownGapSchemePercentColumn", "SecondGapSchemePercentRuleColumn", "UseTwoColumns", "ScheduleFeeTypeId", "NoGapSchemeColumns", "SecondNoGapSchemeColumns", "KnownGapSchemeColumns", "SecondKnownGapSchemeColumns", "GapSchemePercentRuleColumns", "SecondGapSchemePercentRuleColumns"],
                scheduleType: 5,
                healthFundId: n(this).data("health-fund-id"),
                showState: !0,
                refreshAction: r
            };
            t = !1;
            i(u)
        }
        function a() {
            var r = {
                title: text.global.titles.popupAHSAItems,
                successMessage: text.invoices.uploadSuccessAHSA,
                notificationElement: n("#UploadAhsaFileBtn"),
                showControls: ["ItemNumberColumn", "SecondItemNumberColumn", "NoGapSchemeColumn", "KnownGapSchemeColumn", "NoGapSchemePercentColumn", "KnownGapSchemePercentColumn", "SecondNoGapSchemeColumn", "SecondKnownGapSchemeColumn", "SecondNoGapSchemePercentColumn", "SecondKnownGapSchemePercentColumn", "UseTwoColumns", "ScheduleFeeTypeId", "NoGapSchemeColumns", "SecondNoGapSchemeColumns", "KnownGapSchemeColumns", "SecondKnownGapSchemeColumns"],
                scheduleType: 6,
                showState: !0,
                refreshAction: function() {
                    var t = n("#DefaultAhsaSchedulesDetails").data("kendoGrid");
                    t && t.dataSource.read()
                }
            };
            t = !1;
            i(r)
        }
        function i(i) {
            var r = n("#UploadExcel_StateId")
              , u = n("#excel-preview-popup-form");
            t ? (n(".js-apply-schedules").hide(),
            n(".js-apply-extrascover").show(),
            u.attr("action", u.data("extrascoversubmitaction"))) : (n(".js-apply-schedules").show(),
            n(".js-apply-extrascover").hide(),
            u.attr("action", u.data("itemschedulesubmitaction")));
            siberia.popup.create("#upload-excel-popup", {
                windowOptions: {
                    title: i.title,
                    width: "600"
                },
                clear: function() {
                    if (siberia.upload.file.clearSelectedFile("excelFile"),
                    r.length) {
                        var n = r.closest(".js-state-container");
                        i.showState ? n.show() : n.hide();
                        r.toggleClass("js-ignore-validation", !i.showState);
                        r.data("kendoDropDownList").value([])
                    }
                },
                success: function(n, t, u) {
                    var f = r.length ? r.data("kendoDropDownList").value() : null;
                    u.cancelClose = !0;
                    siberia.excelPreview.openExcelPreview(i, n, v, f)
                }
            })
        }
        function v(n, t) {
            n.refreshAction && n.refreshAction(t);
            siberia.notification.showSuccessNotification(n.successMessage, n.notificationElement);
            siberia.popup.close("#upload-excel-popup")
        }
        function y() {
            var t = n(".js-global-spinner-container");
            t.spinner(!0);
            n("#health-fund-list-grid").data("kendoGrid").dataSource.sync().always(function() {
                t.spinner(!1)
            })
        }
        function p(n) {
            siberia.popup.create("#health-fund-popup", {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addHealthFund,
                    width: "650"
                },
                clear: function() {
                    n.item.IsEditable = !0;
                    f(n.item)
                },
                success: function() {
                    r()
                },
                cancel: function() {
                    n.cancel()
                }
            })
        }
        function u(n) {
            siberia.popup.create("#health-fund-popup", {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.editHealthFund,
                    width: "650"
                },
                clear: function() {
                    f(n)
                },
                success: function() {
                    r()
                }
            })
        }
        function r() {
            n("#health-fund-list-grid").data("kendoGrid").dataSource.read()
        }
        function f(t) {
            n("#HealthFundList_Id").val(t.Id);
            n("#HealthFundList_Name").val(t.Name);
            n("#HealthFundList_Code").data("kendoMaskedTextBox").value(t.Code);
            n("#HealthFundList_MaxGapAmount").data("kendoNumericTextBox").value(t.MaxGapAmount);
            n("#HealthFundList_IsAHSAMember").prop("checked", t.IsAHSAMember);
            n("#HealthFundList_IsIMCTypeScheme").prop("checked", t.IsIMCTypeScheme);
            n("#HealthFundList_IsIMCTypeAgreement").prop("checked", t.IsIMCTypeAgreement);
            n("#HealthFundList_IsIMCTypePatientClaim").prop("checked", t.IsIMCTypePatientClaim);
            n("#HealthFundList_Name").prop("readonly", !t.IsEditable);
            n("#HealthFundList_Code").data("kendoMaskedTextBox").enable(t.IsEditable);
            n("#HealthFundList_IsAHSAMember").prop("disabled", !t.IsEditable);
            n("#HealthFundList_MaxGapAmount").data("kendoNumericTextBox").enable(t.IsEditable);
            siberia.address.set(n("#health-fund-popup"), t);
            siberia.address.readonly(n("#health-fund-popup"), !t.IsEditable);
            n("#HealthFundList_IsIMCTypeScheme").prop("disabled", !t.IsEditable);
            n("#HealthFundList_IsIMCTypeAgreement").prop("disabled", !t.IsEditable);
            n("#HealthFundList_IsIMCTypePatientClaim").prop("disabled", !t.IsEditable);
            n("#health-fund-popup .js-popup-submit").toggle(t.IsEditable)
        }
        var t;
        return {
            init: e
        }
    }();
    n(document).ready(function() {
        siberia.healthFundList.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.userSettings");
    siberia.userSettings = function() {
        function o() {
            n(window).on("rc-show-hpii-verify-success-message", y);
            n(window).on("rc-hide-hpii-verify-success-message", p);
            n(window).on("rc-show-hpii-verify-retired-warning", a);
            n(window).on("rc-hide-hpii-verify-retired-warning", v);
            n(window).on("rc-show-hpii-verify-deactivated-warning", c);
            n(window).on("rc-hide-hpii-verify-deactivated-warning", l);
            n(window).on("rc-show-hpii-verify-resolved-warning", s);
            n(window).on("rc-hide-hpii-verify-resolved-warning", h);
            n(window).on("rc-show-hpii-validation-failed-warning", w);
            n(window).on("rc-hide-hpii-validation-failed-warning", b);
            n(window).on("rc-show-hpii-verify-failed-warning", k);
            n(window).on("rc-hide-hpii-verify-failed-warning", d);
            n(window).on("rc-show-hpii-with-medical-registration-verify-failed-warning", g);
            n(window).on("rc-hide-hpii-with-medical-registration-verify-failed-warning", nt)
        }
        function s() {
            var t = n(".js-hpii-verify-resolved-summary")
              , i = n(".js-hpii-verify-resolved-summary .notification-item");
            t.length && (t.show(),
            i.show())
        }
        function h() {
            var t = n(".js-hpii-verify-resolved-summary")
              , i = n(".js-hpii-verify-resolved-summary .notification-item");
            t.length && (t.hide(),
            i.hide())
        }
        function c() {
            var t = n(".js-hpii-verify-deactivated-summary")
              , i = n(".js-hpii-verify-deactivated-summary .notification-item");
            t.length && (t.show(),
            i.show())
        }
        function l() {
            var t = n(".js-hpii-verify-deactivated-summary")
              , i = n(".js-hpii-verify-deactivated-summary .notification-item");
            t.length && (t.hide(),
            i.hide())
        }
        function a() {
            var t = n(".js-hpii-verify-retired-summary")
              , i = n(".js-hpii-verify-retired-summary .notification-item");
            t.length && (t.show(),
            i.show())
        }
        function v() {
            var t = n(".js-hpii-verify-retired-summary")
              , i = n(".js-hpii-verify-retired-summary .notification-item");
            t.length && (t.hide(),
            i.hide())
        }
        function y() {
            var t = n(".js-hpii-verify-success-summary")
              , i = n(".js-hpii-verify-success-summary .notification-item");
            t.length && (t.show(),
            i.show())
        }
        function p() {
            var t = n(".js-hpii-verify-success-summary")
              , i = n(".js-hpii-verify-success-summary .notification-item");
            t.length && (t.hide(),
            i.hide())
        }
        function w() {
            var t = n(".js-hpii-luhn-check-failed-summary")
              , i = n(".js-hpii-luhn-check-failed-summary .notification-item");
            t.length && (t.show(),
            i.show())
        }
        function b() {
            var t = n(".js-hpii-luhn-check-failed-summary")
              , i = n(".js-hpii-luhn-check-failed-summary .notification-item");
            t.length && (t.hide(),
            i.hide())
        }
        function k() {
            var t = n(".js-hpii-verify-failed-summary")
              , i = n(".js-hpii-verify-failed-summary .notification-item");
            t.length && (t.show(),
            i.show())
        }
        function d() {
            var t = n(".js-hpii-verify-failed-summary")
              , i = n(".js-hpii-verify-failed-summary .notification-item");
            t.length && (t.hide(),
            i.hide())
        }
        function g() {
            var t = n(".js-hpii-with-medical-registration-verify-failed-summary")
              , i = n(".js-hpii-with-medical-registration-verify-failed-summary .notification-item");
            t.length && (t.show(),
            i.show())
        }
        function nt() {
            var t = n(".js-hpii-with-medical-registration-verify-failed-summary")
              , i = n(".js-hpii-with-medical-registration-verify-failed-summary .notification-item");
            t.length && (t.hide(),
            i.hide())
        }
        function tt() {
            var i, r, u, t;
            if ((n(".js-save-letters-to-create-settings").click(function(t) {
                t.preventDefault();
                var i = n(this)
                  , r = i.closest("form");
                siberia.common.submitForm(r, i, text.global.status.lettersToCreateSettingsSaved, null)
            }),
            i = n(".js-letters-to-create-settings-content"),
            !(i.length <= 0)) && (r = i.find("#LettersToCreateSettings_ShowAll"),
            u = i.find("#LettersToCreateSettings_SelectedAppointmentTypeIds"),
            !(r.length <= 0) && !(u.length <= 0))) {
                t = u.data("kendoMultiSelect");
                t.enable(!r.prop("checked"));
                r.on("change", function() {
                    if (t.enable(!this.checked),
                    this.checked) {
                        var i = n.map(t.dataSource.data(), function(n) {
                            return n.Id
                        });
                        t.value(i)
                    }
                })
            }
        }
        function it() {
            n(".js-change-email").click(function(i) {
                i.preventDefault();
                var r = n(this).closest("form")
                  , u = n(this);
                siberia.common.submitForm(r, u, text.global.status.settingsEmailSaved, function() {
                    var i = n(t.changeEmail.userEmail).val();
                    n(t.info.approvalEmailContainer).show();
                    n(t.info.approvalEmailText).text(i);
                    n("#ChangeEmail_UserEmail").val("")
                })
            });
            n(t.changePassword.savePasswordButton).click(function(t) {
                t.preventDefault();
                var i = n(this).closest("form")
                  , r = n(this);
                siberia.common.submitForm(i, r, text.global.status.passwordChanged, function() {
                    n("#ChangePassword_CurrentPassword").val("");
                    n("#ChangePassword_NewPassword").val("");
                    n("#ChangePassword_ConfirmedPassword").val("");
                    siberia.passwordStrength.reset()
                })
            });
            n(".js-set-severity").click(function(t) {
                t.preventDefault();
                var i = n(this).closest("form")
                  , r = n(this);
                siberia.common.submitForm(i, r, text.global.status.severityLevelSaved, null)
            });
            n(".js-save-scheduler-settings").click(function(t) {
                t.preventDefault();
                var i = n(this)
                  , r = i.closest("form");
                siberia.common.submitForm(r, i, text.global.status.schedulerSettingsSaved, null)
            });
            n(".js-save-waiting-room-settings").click(function(t) {
                t.preventDefault();
                var i = n(this)
                  , r = i.closest("form");
                siberia.common.submitForm(r, i, text.global.status.defaultWaitingRoomSettingsChanged, null)
            });
            o();
            tt();
            n(".js-save-consult-default-tab-setting").click(function(t) {
                t.preventDefault();
                var i = n(this).closest("form")
                  , r = n(this);
                siberia.common.submitForm(i, r, text.global.status.consultDefaultTabSaved, null)
            });
            n(".js-assign-speech-magic-user").click(function(i) {
                i.preventDefault();
                var r = n(this).closest("form")
                  , u = n(this);
                siberia.common.submitForm(r, u, text.global.status.speechRecognitionUserIdAssigned, function(i) {
                    var r = i;
                    n(t.info.currentSpeechMagicUserId).text(r);
                    n(".js-remove-speech-magic-assignment").show();
                    n("#AssignSpeechMagicUserId_Username").val("");
                    n("#AssignSpeechMagicUserId_Password").val("");
                    n(".js-speech-training-period").show();
                    n("#speech-training-period").prop("checked", !1)
                })
            });
            n(".js-remove-speech-magic-assignment").click(function(i) {
                var r, u;
                i.preventDefault();
                r = n(this);
                r.blur();
                u = r.closest(".js-block-wrapper");
                u || (u = n(".js-global-spinner-container"));
                u.spinner(!0);
                n.ajax({
                    type: "POST",
                    url: r.data("remove-assignment-url"),
                    contentType: "application/json",
                    success: function() {
                        n(t.info.currentSpeechMagicUserId).text(text.global.labels.speechIdNotAssigned);
                        r.hide();
                        siberia.notification.showSuccessNotification(text.global.status.speechRecognitionUserIdRemoved, r);
                        n(".js-speech-training-period").hide()
                    },
                    complete: function() {
                        u.spinner(!1)
                    }
                })
            });
            n(".js-set-speech-training-period").click(function(t) {
                var i, r;
                t.preventDefault();
                i = n(this);
                i.blur();
                r = i.closest(".js-block-wrapper");
                r || (r = n(".js-global-spinner-container"));
                r.spinner(!0);
                n.ajax({
                    type: "POST",
                    url: i.data("speech-training-url") + "?userId=" + i.data("speech-training-userid") + "&isSpeechTrainingPeriod=" + Boolean(n("#speech-training-period").is(":checked")),
                    contentType: "application/json",
                    success: function() {
                        siberia.notification.showSuccessNotification("Speech training period status updated successfully", i)
                    },
                    complete: function() {
                        r.spinner(!1)
                    }
                })
            });
            n(".js-doctor-personal-settings").click(function(t) {
                t.preventDefault();
                var i = n(this).closest("form")
                  , r = n(this);
                siberia.common.submitForm(i, r, text.global.status.doctorSettingsSaved, function(t) {
                    !t.Errors && t.Data && t.Data[0] && (n("#rc-hpi-i-number").val(t.Data[0].Hpii),
                    n(window).trigger("rc-on-hpii-save"))
                })
            });
            n(".js-doctor-remittance-advice-settings").click(function(t) {
                t.preventDefault();
                var i = n(this).closest("form")
                  , r = n(this);
                siberia.common.submitForm(i, r, text.global.status.doctorSettingsSaved, null)
            });
            n(".js-print-settings-wrapper > a").click(function(t) {
                t.preventDefault();
                var r = n(this).attr("data_url")
                  , i = new Image;
                i.onload = function() {}
                ;
                i.onerror = function() {}
                ;
                i.src = r + "?nocache=" + (new Date).getTime()
            });
            n(".js-reset-two-factor-auth").click(function(t) {
                t.preventDefault();
                var i = n(this).closest("form")
                  , r = n(this);
                siberia.common.submitForm(i, r, text.global.status.resetTwoFactorAuthSuccess, function() {
                    window.location.href = window.location.href
                })
            })
        }
        function rt() {
            var u = n("#user-print-settings"), f = u.find(".js-block-wrapper"), o = n(".js-user-print-settings").attr("data_ping_url"), t, r, e;
            n(".js-user-print-settings").attr("href", navigator && navigator.platform && navigator.platform.indexOf("Mac") === 0 ? u.attr("data-installer-mac") : u.attr("data-installer-win"));
            t = !0;
            r = new Image;
            r.onload = function() {
                t && (t = !1,
                f.spinner(!1));
                i(!0)
            }
            ;
            r.onerror = function() {
                t && (t = !1,
                f.spinner(!1));
                i(!1);
                setTimeout(e, 1e3)
            }
            ;
            e = function() {
                r.src = o + "?nocache=" + (new Date).getTime()
            }
            ;
            f.spinner(!0);
            e()
        }
        function i(t) {
            t ? (n(".js-print-settings-warning").hide(),
            n(".js-print-settings-buttons").hide(),
            navigator && navigator.platform && navigator.platform.indexOf("Mac") === 0 ? n(".js-print-middleware-running").show() : n(".js-print-settings-wrapper").show()) : (n(".js-print-settings-warning").show(),
            n(".js-print-settings-buttons").show(),
            n(".js-print-settings-wrapper").hide(),
            n(".js-print-middleware-running").hide())
        }
        function r() {
            var i = n("#doctor-personal-settings .js-is-gp input:checked")
              , t = n("#fieldsOfSpeialty").data("kendoDropDownList")
              , r = n("#PersonalSettings_DoctorSpecialtyId").data("kendoDropDownList");
            i && i.val() == "false" ? (t.enable(!0),
            t.selectedIndex != 0 && r.enable(!0)) : (t.enable(!1),
            r.enable(!1))
        }
        function ut() {
            return {
                fieldId: n("#fieldsOfSpeialty").val()
            }
        }
        function ft() {
            var t = n("#MySettingsTabs").data("kendoTabStrip")
              , i = n("#ScheduleReviewCalendar");
            t && i.length > 0 && (u(i, n(t.select()[0]).hasClass("js-show-calendar")),
            t.bind("select", function(t) {
                u(i, n(t.item).hasClass("js-show-calendar"))
            }))
        }
        function et() {
            var t = n("#doctor-favorite-item-numbers-grid").data("kendoGrid");
            t && t.bind("edit", function(n) {
                n.container.find(".js-generic-grid-read-mode-buttons").hide();
                n.container.find(".js-generic-grid-edit-mode-buttons").show()
            })
        }
        function u(n, t) {
            t ? n.show() : n.hide()
        }
        function f() {
            let i = n(t.changePassword.newPassword).val()
              , r = n(t.changePassword.confirmedPassword).val()
              , u = i === r && i !== "" && siberia.passwordStrength.check(i);
            n(t.changePassword.savePasswordButton).toggleClass("btn-disabled", !u)
        }
        function ot() {
            var i, u, e;
            it();
            et();
            ft();
            siberia.passwordStrength.init(t.changePassword.newPassword);
            n(t.changePassword.newPassword).on("input", f);
            n(t.changePassword.confirmedPassword).on("input", f);
            i = n("#doctor-personal-settings").length != 0;
            i && (r(),
            n("#doctor-personal-settings .js-is-gp input").change(function() {
                r()
            }),
            siberia.uploadPicture && siberia.uploadPicture.init(n("#upload-logotype-container"), "#PersonalSettings_LogotypeFileId"),
            u = {
                pictureFilePopupSelector: "#upload-signature-popup",
                kendoUploaderName: "SignatureUploader"
            },
            siberia.uploadPicture && siberia.uploadPicture.init(n("#upload-signature-container"), "#PersonalSettings_SignatureFileId", u));
            e = n("#user-print-settings").length > 0;
            e && rt()
        }
        function e() {
            return n("#ConfigureSettingsUserId").length ? n("#ConfigureSettingsUserId").val() : 0
        }
        function st() {
            return {
                userId: e()
            }
        }
        var t = {
            changePassword: {
                passwordStatus: "#PasswordStatus",
                currentPassword: "#ChangePassword_CurrentPassword",
                newPassword: "#ChangePassword_NewPassword",
                confirmedPassword: "#ChangePassword_ConfirmedPassword",
                savePasswordButton: ".js-change-password"
            },
            changeEmail: {
                userEmail: "#ChangeEmail_UserEmail"
            },
            assignSpeechMagicUserId: {
                originspeechUsername: "#AssignSpeechMagicUserId_Username",
                originspeechPassword: "#AssignSpeechMagicUserId_Password"
            },
            info: {
                approvalEmailContainer: "#approval-email",
                approvalEmailText: "#approval-email .js-approval-email",
                currentSpeechMagicUserId: ".js-current-speech-magic-user-id"
            }
        };
        return {
            doInit: ot,
            getUserId: e,
            getUserData: st,
            filterSpecialties: ut
        }
    }();
    n(document).ready(function() {
        siberia.userSettings.doInit()
    })
}(jQuery),
function(n) {
    function lt() {
        (t = n(".js-user-list-container"),
        i = n("#user-item-popup"),
        t.length !== 0) && (siberia.grid.initClientGrid({
            gridSelector: "#user-list-grid",
            saveAndCloseSelector: null,
            saveSelector: null,
            customSelector: ".js-lock-button",
            customAction: ri,
            addAction: ei,
            editAction: rt,
            isCustomEditing: !0
        }),
        v = t.data("reset-two-factor-auth-url"),
        y = t.data("lock-url"),
        p = t.data("unlock-url"),
        w = t.data("verify-new-provider-individual-familyname"),
        o = n("#user-list-grid").data("kendoGrid"),
        o.bind("dataBound", ii),
        b = n("#UserItem_RoomRoleId").val(),
        d = n("#UserItem_RegistrarRoleId").val(),
        g = n("#UserItem_DoctorRoleId").val(),
        nt = n("#UserItem_PracticeManagerId").val(),
        tt = n("#UserItem_PracticeOwnerId").val(),
        n('[name$="IsRoom"]').change(function(t) {
            var i = n(t.currentTarget);
            ct(i.val().toLowerCase() == "true")
        }),
        n("#UserItem_RoleIds").data("kendoMultiSelect").bind("change", ni),
        n("#UserItem_LicenceId").data("kendoDropDownList").bind("change", ti),
        h = n("#UserItem_ChosenPracticeFavoritePrescriptionIds").data("kendoMultiSelect"),
        c = n("#UserItem_ChosenPracticeFavoriteImagingRequestIds").data("kendoMultiSelect"),
        l = n("#UserItem_ChosenPracticeFavoritePathologyRequestIds").data("kendoMultiSelect"),
        dt(),
        at(),
        siberia.uploadPicture.init(i, "#UserItem_PhotoFileId"))
    }
    function at() {
        n(window).on("rc-hpii-verify-new-name-modal-submitted", vt);
        n(window).on("rc-hpii-verify-new-name-modal-closed", yt)
    }
    function vt() {
        k = n("#UserItem_FirstName").val();
        u = n("#UserItem_Surname").val();
        var t = n("#SaveAndConfigureUserBtn").hasClass("clicked") ? "#SaveAndConfigureUserBtn" : "#SaveUserBtn";
        s = !0;
        n(t).click()
    }
    function yt() {
        n("#CancelUserBtn").click();
        pt()
    }
    function pt() {
        var t = n(".js-hpii-changes-canceled-summary")
          , i = n(".js-hpii-changes-canceled-summary .notification-item");
        t.length && (t.show(),
        i.show(),
        kt())
    }
    function wt() {
        var t = n(".js-hpii-changes-canceled-summary")
          , i = n(".js-hpii-changes-canceled-summary .notification-item");
        t.length && (t.hide(),
        i.hide())
    }
    function bt() {
        var t = n(".js-hpii-changes-submitted-summary")
          , i = n(".js-hpii-changes-submitted-summary .notification-item");
        t.length && (t.show(),
        i.show(),
        wt())
    }
    function kt() {
        var t = n(".js-hpii-changes-submitted-summary")
          , i = n(".js-hpii-changes-submitted-summary .notification-item");
        t.length && (t.hide(),
        i.hide())
    }
    function dt() {
        n("#SaveAndConfigureUserBtn").click(function() {
            f(!0)
        });
        n("#user-item-popup").on("click", "#confirm-and-force-save-changes", function(t) {
            t.preventDefault();
            var i = n("#SaveAndConfigureUserBtn").hasClass("clicked") ? "#SaveAndConfigureUserBtn" : "#SaveUserBtn";
            gt(i)
        })
    }
    function f(t) {
        n("#SaveAndConfigureUserBtn").toggleClass("clicked", t)
    }
    function gt(t) {
        n("#UserItem_WarningsConfirmed").val(!0);
        n(t).click()
    }
    function ni() {
        var n = this.value();
        ht(n)
    }
    function ti() {
        var n = this.value();
        st(n)
    }
    function ii() {
        n(".js-reset-two-factor-auth").click(function() {
            var t = n(this).closest("tr").data("uid")
              , i = o.dataSource.getByUid(t);
            ui(i.Id)
        })
    }
    function ri(t) {
        var r = !1
          , i = t.IsLocked
          , u = i ? "#unlock-user-confirmation" : "#lock-user-confirmation"
          , f = !t.IsRoom && n(u).length > 0;
        f ? siberia.confirmationPopup.open(u, function() {
            a(t, i, r)
        }) : a(t, i, r)
    }
    function a(i, r, u) {
        function f() {
            n.ajax({
                type: "POST",
                url: r ? p : y,
                data: {
                    userId: i.Id,
                    forceSave: u
                },
                success: function(t) {
                    if (siberia.validation.processGridActionAjaxErrors(t.Errors, !0)) {
                        var u = t.Data;
                        u.WarningMessage ? (fi(u.WarningMessage, i, r),
                        n("div#warning-popup div").show()) : (i.set("IsLocked", !r),
                        i = null)
                    }
                },
                error: function() {
                    siberia.validation.showGridNetworkError(!0)
                },
                complete: function() {
                    t.spinner(!1);
                    e()
                }
            })
        }
        function o() {
            t.spinner(!1);
            e()
        }
        t.spinner(!0);
        r ? rt(i, f, o) : f()
    }
    function ui(i) {
        t.spinner(!0);
        n.ajax({
            type: "POST",
            url: v,
            data: {
                userId: i
            },
            success: function(n) {
                n.Success ? siberia.notification.showSuccessNotification(text.global.status.resetTwoFactorAuthCompleted) : n.WarningMessage != null ? siberia.notification.showErrorNotification(n.WarningMessage) : siberia.notification.showErrorNotification(text.global.status.resetTwoFactorAuthNotCompleted)
            },
            error: function() {
                siberia.notification.showErrorNotification(text.global.status.resetTwoFactorAuthNotCompleted)
            },
            complete: function() {
                t.spinner(!1)
            }
        })
    }
    function fi(n, t, i) {
        siberia.warningsPopup.show("#warning-popup", n, function() {
            a(t, i, !0)
        })
    }
    function it(t) {
        return {
            dataUrl: i.data("get-user-details-options-url"),
            data: {
                registrarId: t
            },
            dataType: "json",
            preLoadSuccess: function(t) {
                n("#UserItem_RegistrarDoctorIds").data("kendoMultiSelect").dataSource.data(t.Doctors);
                n("#UserItem_LicenceId").data("kendoDropDownList").dataSource.data(t.Addons || []);
                n("#UserItem_FeatureIds").data("kendoMultiSelect").dataSource.data(t.Features || []);
                n("#UserItem_BypassCompliance").val(t.BypassCompliance)
            }
        }
    }
    function ei(t) {
        siberia.popup.create("#user-item-popup", {
            submitText: text.global.labels.create,
            preLoadOptions: it(),
            windowOptions: {
                title: text.global.titles.addUser,
                width: "600"
            },
            clear: function() {
                var r = n.map(h.dataSource.data(), function(n) {
                    return n.Id
                })
                  , u = n.map(c.dataSource.data(), function(n) {
                    return n.Id
                })
                  , e = n.map(l.dataSource.data(), function(n) {
                    return n.Id
                });
                et(t.item, r, u, e);
                i.find(".js-user-type-container").show();
                n("#UserItem_WarningsConfirmed").val(!1);
                f(!1)
            },
            success: function(n, t) {
                ut(n, t);
                e()
            },
            cancel: function() {
                t.cancel()
            }
        })
    }
    function rt(t, r, o) {
        siberia.popup.create("#user-item-popup", {
            submitText: text.global.labels.update,
            preLoadOptions: it(t.Id),
            windowOptions: {
                title: text.global.titles.editUser
            },
            clear: function() {
                ft(t.MainLocation, !1);
                var r = t.ChosenPracticeFavoritePrescriptionIds
                  , u = t.ChosenPracticeFavoriteImagingRequestIds
                  , e = t.ChosenPracticeFavoritePathologyRequestIds;
                et(t, r, u, e);
                i.find(".js-user-type-container").hide();
                n("#UserItem_WarningsConfirmed").val(!1);
                f(!1)
            },
            preSubmit: function() {
                function f() {
                    u = n("#UserItem_Surname").val();
                    var t = n("#SaveAndConfigureUserBtn").hasClass("clicked") ? "#SaveAndConfigureUserBtn" : "#SaveUserBtn";
                    n(t).click()
                }
                function i() {
                    n(window).trigger("rc-open-hpii-verify-new-name-modal")
                }
                var r = n("#UserItem_Surname").val() !== u, t;
                return r ? (t = n("#user-item-popup"),
                t.spinner(!0),
                n.ajax({
                    type: "POST",
                    url: w,
                    data: {
                        UserId: n("#UserItem_Id").val(),
                        Surname: n("#UserItem_Surname").val()
                    },
                    success: function(n) {
                        if (!n.Result || typeof n.Result != "object") {
                            i();
                            return
                        }
                        var t = n.Result.SpecifiedHpii !== null || n.Result.SpecifiedRegistrationId !== null;
                        n.ErrorCode !== 0 || t && n.Result.HpiiStatus !== "Active" ? i() : f()
                    },
                    error: i,
                    complete: function() {
                        t.spinner(!1)
                    }
                }),
                !1) : !0
            },
            success: function(n, t) {
                ut(n, t);
                typeof r == "function" ? r() : e();
                s && (bt(),
                s = !1)
            },
            close: function() {
                ft(t.MainLocation, !0);
                typeof o == "function" && o()
            },
            opened: function() {
                k = n("#UserItem_FirstName").val();
                u = n("#UserItem_Surname").val()
            }
        })
    }
    function ut(t, i) {
        n(i.currentTarget).attr("id") === "SaveAndConfigureUserBtn" && (n("#ConfigureSettingsDoctorId").val(t.Data[0].Id),
        n("#ConfigureDoctorSettingsBtn").trigger("click"))
    }
    function ft(t, i) {
        if (t) {
            var u = n("#UserItem_MainLocationId").data("kendoDropDownList")
              , r = n.grep(u.dataSource.data(), function(n) {
                return n.Id == t.Id
            })[0];
            r && r.IsDeactivated && i && u.dataSource.remove(r);
            r || i || (t.IsDeactivated = !0,
            u.dataSource.add(t))
        }
    }
    function e() {
        n("#user-list-grid").data("kendoGrid").dataSource.read()
    }
    function et(t, i, u, f) {
        n("#UserItem_Id").val(t.Id);
        n("#UserItem_Email").val(t.Email);
        n("#UserItem_SalutationId").data("kendoDropDownList").value(t.SalutationId);
        n("#UserItem_FirstName").val(t.FirstName);
        n("#UserItem_MiddleName").val(t.MiddleName);
        n("#UserItem_Surname").val(t.Surname);
        n("#UserItem_Room").val(t.Room);
        n("#UserItem_RoleIds").data("kendoMultiSelect").value(t.RoleIds ? t.RoleIds : []);
        n("#UserItem_MainLocationId").data("kendoDropDownList").value(t.MainLocationId);
        n("#UserItem_LicenceId").data("kendoDropDownList").value(t.LicenceId || "");
        n("#UserItem_FeatureIds").data("kendoMultiSelect").value(t.FeatureIds || "");
        n("#user-item-radio-room").prop("checked", t.IsRoom);
        n("#user-item-radio-user").prop("checked", !t.IsRoom);
        n("#UserItem_RegistrarDoctorIds").data("kendoMultiSelect").value(t.RegistrarDoctorIds ? t.RegistrarDoctorIds : []);
        siberia.requiredIf.checkRequired("#UserItem_BypassCompliance");
        h.value(i);
        c.value(u);
        l.value(f);
        var e = n("#UserItem_PartTimeUserTypeId").data("kendoDropDownList");
        e && e.value(t.PartTimeUserTypeId);
        r = t.RoleIds;
        ct(t.IsRoom);
        st(t.Licence);
        t.Id > 0 ? n("#SaveAndConfigureUserBtn").text(text.global.labels.updateAndConfigure) : n("#SaveAndConfigureUserBtn").text(text.global.labels.createAndConfigure);
        oi(t.PhotoFileId)
    }
    function oi(t) {
        t != null && t != "" ? (n("#UserItem_PhotoFileId").val(t),
        siberia.uploadPicture.updatePicture(i, t)) : siberia.uploadPicture.clearPicture(i, "#UserItem_PhotoFileId")
    }
    function ot(t, i, r) {
        n(".js-practice-growing-notification").toggleClass("hidden", t);
        n(".js-practice-growing-notification").toggleClass("hidden", t || r);
        n("#confirm-and-force-save-changes").closest(".js-validation-summary").toggleClass("hidden", t);
        n("#UserItem_SalutationId").closest(".control-grp").toggle(!t);
        n("#UserItem_FirstName").closest(".control-grp").toggle(!t);
        n("#UserItem_MiddleName").closest(".control-grp").toggle(!t);
        n("#UserItem_RoleIds").closest(".control-grp").toggle(!t);
        n("#UserItem_Surname").toggleClass("js-ignore-validation", t);
        n("#UserItem_Surname").closest(".control-grp").toggle(!t);
        n("#UserItem_FirstName").toggleClass("js-ignore-validation", t);
        n("#UserItem_FirstName").closest(".control-grp").toggle(!t);
        n("#UserItem_LicenceId").toggleClass("js-ignore-validation", t);
        n("#UserItem_LicenceId").closest(".control-grp").toggle(!t);
        n("#UserItem_FeatureIds").toggleClass("js-ignore-validation", t);
        n("#UserItem_FeatureIds").closest(".control-grp").toggle(!t);
        n("#UserItem_Room").toggleClass("js-ignore-validation", !t);
        n("#UserItem_Room").closest(".control-grp").toggle(t);
        n("#SaveAndConfigureUserBtn").toggle(!t);
        ht(i, t)
    }
    function st(t) {
        var i = n("#UserItem_RoleIds").data("kendoMultiSelect")
          , r = n("#UserItem_BypassCompliance").val();
        r && r !== "false" || t ? (i.readonly(!1),
        n(n("#UserItem_RoleIds").data("kendoMultiSelect").wrapper[0]).removeClass("k-state-disabled")) : (i.readonly(!0),
        n(i.wrapper[0]).removeClass("multiselect__state-readonly"),
        n(i.wrapper[0]).addClass("k-state-disabled"),
        n(i.input[0]).css("background-color", "transparent"))
    }
    function ht(t, i) {
        var u = n.inArray(d, t) != -1, r;
        n("#UserItem_RegistrarDoctorIds").toggleClass("js-ignore-validation", !u);
        n("#UserItem_RegistrarDoctorIds").closest(".control-grp").toggle(u);
        r = !i && (n.inArray(g, t) != -1 || n.inArray(nt, t) != -1 || n.inArray(tt, t) != -1);
        n(".js-doctor-settings").toggle(r);
        r ? n("#SaveAndConfigureUserBtn").removeClass("btn-disabled") : (n("#SaveAndConfigureUserBtn").addClass("btn-disabled"),
        f(!1))
    }
    function ct(t) {
        var i = n("#UserItem_RoleIds").data("kendoMultiSelect");
        t ? (r = i.value().slice(),
        i.value(b),
        ot(t, null, !0)) : (i.value(r),
        ot(t, r, !1),
        r = null)
    }
    var t, v, y, p, w, o, r, b, k, u, d, g, nt, tt, s = !1, i, h, c, l;
    n(document).ready(function() {
        lt()
    })
}(jQuery),
function(n) {
    function l() {
        (t = n(".js-superadmin-list-container"),
        c = n("#superadmin-item-popup"),
        t.length !== 0) && (siberia.grid.initClientGrid({
            gridSelector: "#superadmin-list-grid",
            saveAndCloseSelector: null,
            saveSelector: null,
            addAction: w,
            editAction: b,
            isCustomEditing: !0
        }),
        o = t.data("reset-two-factor-auth-url"),
        f = t.data("lock-url"),
        e = t.data("unlock-url"),
        r = n("#superadmin-list-grid").data("kendoGrid"),
        r.bind("dataBound", a))
    }
    function a() {
        n(".js-lock-button").click(function() {
            var t = n(this).closest("tr").data("uid");
            i = r.dataSource.getByUid(t);
            v(!1)
        });
        n(".js-reset-two-factor-auth").click(function() {
            var t = n(this).closest("tr").data("uid")
              , i = r.dataSource.getByUid(t);
            y(i.Id)
        })
    }
    function v(t) {
        var r = i.IsLocked
          , f = r ? "#unlock-user-confirmation" : "#lock-user-confirmation"
          , e = !i.IsRoom && n(f).length > 0;
        e ? siberia.confirmationPopup.open(f, function() {
            u(r, t)
        }) : u(r, t)
    }
    function u(r, u) {
        t.spinner(!0);
        n.ajax({
            type: "POST",
            url: r ? e : f,
            data: {
                userId: i.Id,
                forceSave: u
            },
            success: function(t) {
                if (siberia.validation.processGridActionAjaxErrors(t.Errors, !0)) {
                    var u = t.Data;
                    u.WarningMessage ? (p(u.WarningMessage),
                    n("div#warning-popup div").show()) : (i.set("IsLocked", !r),
                    i = null)
                }
            },
            error: function() {
                siberia.validation.showGridNetworkError(!0)
            },
            complete: function() {
                t.spinner(!1)
            }
        })
    }
    function y(i) {
        t.spinner(!0);
        n.ajax({
            type: "POST",
            url: o,
            data: {
                superAdminId: i
            },
            success: function(n) {
                n.Success ? siberia.notification.showSuccessNotification(text.global.status.resetTwoFactorAuthCompleted) : n.WarningMessage != null ? siberia.notification.showErrorNotification(n.WarningMessage) : siberia.notification.showErrorNotification(text.global.status.resetTwoFactorAuthNotCompleted)
            },
            error: function() {
                siberia.notification.showErrorNotification(text.global.status.resetTwoFactorAuthNotCompleted)
            },
            complete: function() {
                t.spinner(!1)
            }
        })
    }
    function p(n) {
        siberia.warningsPopup.show("#warning-popup", n, u)
    }
    function w(n) {
        siberia.popup.create("#superadmin-item-popup", {
            submitText: text.global.labels.create,
            windowOptions: {
                title: text.global.titles.addUser,
                width: "600"
            },
            clear: function() {
                h(n.item)
            },
            success: function() {
                s()
            },
            cancel: function() {
                n.cancel()
            }
        })
    }
    function b(n) {
        siberia.popup.create("#superadmin-item-popup", {
            submitText: text.global.labels.update,
            windowOptions: {
                title: text.global.titles.editUser,
                width: "600"
            },
            clear: function() {
                h(n)
            },
            success: function() {
                s()
            },
            close: function() {}
        })
    }
    function s() {
        n("#superadmin-list-grid").data("kendoGrid").dataSource.read()
    }
    function h(t) {
        n("#SuperAdminItem_Id").val(t.Id);
        n("#SuperAdminItem_Email").val(t.Email);
        n("#SuperAdminItem_FirstName").val(t.FirstName);
        n("#SuperAdminItem_Surname").val(t.Surname);
        t.IsConcierge ? (n("#Concierge").prop("checked", !0),
        n("#SuperAdmin").prop("checked", !1)) : (n("#Concierge").prop("checked", !1),
        n("#SuperAdmin").prop("checked", !0));
        n("#SuperAdminItem_Role").val(t.Role)
    }
    var t, f, e, o, r, i = null, c;
    n(document).ready(function() {
        l()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.demographic");
    siberia.demographic = function() {
        function s() {
            var p, g, s, t, e, l;
            document.getElementById("ctlDemographicContainer") && (siberia.tabs(),
            siberia.tabs.selection.init(".js-patient-form-tabs"),
            siberia.tabs.selection.initSideMenu("#demographic-side-menu .js-tab-item"),
            d(),
            ft(),
            p = n("#demographic-create-mode").length > 0,
            g = n("#demographic-edit-mode").length > 0,
            r = siberia.common.toBoolean(n("#IsMyHrEnabled").val()),
            (p || g) && (siberia.common.addUnloadRule(function() {
                return !1
            }, "ignore-demographic-unload"),
            n(".identity-user-container").each(function(n) {
                f(this, n)
            })),
            n(".js-save-checklist").click(function() {
                siberia.checklistTemplate.serializeChecklist(".js-patient-checklist", "#ChecklistSerialized")
            }),
            n("#appointment-history-button").click(nt),
            tt(),
            ut(),
            rt(),
            it(),
            n('button.js-unlock[type="submit"]').click(function() {
                n(".js-global-spinner-container").spinner(!0)
            }),
            n(".js-open-invoice-history").click(function(t) {
                var i = n(t.currentTarget).attr("data-patient-id");
                i && n(window).trigger("rc-open-invoice-history-panel", [i])
            }),
            siberia.common.setUnloadCanceledCallback(function() {
                n(".js-global-spinner-container").spinner(!1)
            }),
            s = n("#PreferredMethodOfContactId").data("kendoDropDownList"),
            s && (o(),
            s.bind("change", o)),
            u(),
            siberia.requiredIf.checkRequired(n("#PreferredMethodOfContactId")),
            siberia.common.initWarningConfrimarionEvent("body", "#confirm-and-force-save-changes", "#ForceSave", ".js-client-grid-save-and-close"),
            n(".js-private-patient-switch").siberiaOnOffToggler(".js-private-patient", ".js-non-private-patient"),
            t = n("#NextOfKinName").data("kendoAutoComplete"),
            typeof t != "undefined" && t && t.bind("change", k),
            n("#btnImportData").click(function(t) {
                t.preventDefault();
                a(n(t.currentTarget).attr("data-import-url")).then(v).then(y).fail(b).always(w)
            }),
            n("[name=SexId]").change(u),
            n("[name=SendMagicLink]")[0] && (i = n(n("[name=SendMagicLink]")[0]),
            i.change(c)),
            e = n("#AccountInfo_Medicare_NumberFirst").data("kendoMaskedTextBox"),
            typeof e != "undefined" && e && e.bind("change", h),
            siberia.demographic.verification.init(),
            r === !0 && (l = n("#ctlDemographicContainer form"),
            l.submit(function(t) {
                t.originalEvent && t.originalEvent.submitter && t.originalEvent.submitter.value === "saveunlock" && (t.preventDefault(),
                n(window).trigger("rc-validate-ihi", [function() {
                    l.submit()
                }
                , function() {
                    n(".js-global-spinner-container").spinner(!1)
                }
                ]))
            })))
        }
        function h() {
            r === !0 && n(window).trigger("rc-on-medicare-number-change")
        }
        function c() {
            i.is(":checked") && !n(".identity-user-container")[0] && siberia.popup.create("#identity-user-popup", {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: "Patient Portal Access",
                    width: "500"
                },
                clear: function() {
                    n("#IdentityUserId").val("");
                    n("#IdentityUserEmail").val(n("#Email").val());
                    n("#IdentityUserName").val(n("#FirstName").val());
                    n("#IdentityUserSurname").val(n("#LastName").val());
                    n("#IdentityUserMobileNumber").val(n("#MobilePhone").val());
                    n("#IsNewUser").val(!1);
                    n("#IsActivated").val(!1)
                },
                success: function(t) {
                    var u = l(n(".identity-user-container").length, t), i = n("#identity-user-containers"), r;
                    i.append(u);
                    r = i.children().last();
                    f(r, i.length - 1)
                },
                cancel: function() {
                    n("input[name='SendMagicLink']").prop("checked", !1)
                }
            })
        }
        function l(n, t) {
            return '<div class="control-grp"><label class="control-label"><\/label><div class="identity-user-container control"><span class="js-identity-user-edit identity-user-edit-link">Edit Patient Portal Access<\/span><a href="#" class="k-button k-button-icon js-identity-user-delete" title="Delete"><i class="icon icon-trash"><\/i><\/a><div><input data-val="true" id="SharedWithIdentityUsers_' + n + '__IdentityUserId" name="SharedWithIdentityUsers[' + n + '].IdentityUserId" type="hidden" value="' + t.IdentityUserId + '"><input data-val="true" data-val-required="Email is required." id="SharedWithIdentityUsers_' + n + '__IdentityUserEmail" name="SharedWithIdentityUsers[' + n + '].IdentityUserEmail" type="hidden" value="' + t.IdentityUserEmail + '"><input data-val="true" data-val-required="Name is required." id="SharedWithIdentityUsers_' + n + '__IdentityUserName" name="SharedWithIdentityUsers[' + n + '].IdentityUserName" type="hidden" value="' + t.IdentityUserName + '"><input data-val="true" id="SharedWithIdentityUsers_' + n + '__IdentityUserSurname" name="SharedWithIdentityUsers[' + n + '].IdentityUserSurname" type="hidden" value="' + t.IdentityUserSurname + '"><input id="SharedWithIdentityUsers_' + n + '__IdentityUserMobileNumber" name="SharedWithIdentityUsers[' + n + '].IdentityUserMobileNumber" type="hidden" value="' + (t.IdentityUserMobileNumber || "") + '"><input id="SharedWithIdentityUsers_' + n + '__IsNewUser" name="SharedWithIdentityUsers[' + n + '].IsNewUser" type="hidden" value="' + t.IsNewUser + '"><input id="SharedWithIdentityUsers_' + n + '__IsActivated" name="SharedWithIdentityUsers[' + n + '].IsActivated" type="hidden" value="' + t.IsActivated + '"><\/div><span class="identity-user-fullname js-identity-user-edit">' + t.IdentityUserName + " " + t.IdentityUserSurname + " has access now<\/span><\/div><\/div>"
        }
        function f(t, r) {
            n(t).find(".js-identity-user-delete").click(function() {
                siberia.popup.create("#delete-identity-user-popup", {
                    submitText: "Remove",
                    ajax: {
                        enabled: !1
                    },
                    windowOptions: {
                        title: "Remove Patient Portal Access",
                        width: "400"
                    },
                    clear: function() {
                        n(".js-confirmation-title").html('<div style="float: left; padding-right: 20px;"><i class="icon icon-warning-large" style="color: orange; font-size: 24px;" /><\/div><div style="display: table-cell;">By removing ' + n("#SharedWithIdentityUsers_" + r + "__IdentityUserName").val() + " " + n("#SharedWithIdentityUsers_" + r + "__IdentityUserSurname").val() + "’s Patient Portal Access, they will not receive any access to the patient’s medical record.<br><br>If you would like to proceed, click Remove<\/div>")
                    },
                    success: function() {
                        n(t).remove();
                        n(".identity-user-container").length == 0 && i.prop("checked", !1)
                    }
                })
            });
            n(t).find(".js-identity-user-edit").click(function() {
                siberia.popup.create("#identity-user-popup", {
                    submitText: text.global.labels.update,
                    windowOptions: {
                        title: "Patient Portal Access",
                        width: "500"
                    },
                    clear: function() {
                        n("#IdentityUserId").val(n("#SharedWithIdentityUsers_" + r + "__IdentityUserId").val());
                        n("#IdentityUserEmail").val(n("#SharedWithIdentityUsers_" + r + "__IdentityUserEmail").val());
                        n("#IdentityUserName").val(n("#SharedWithIdentityUsers_" + r + "__IdentityUserName").val());
                        n("#IdentityUserSurname").val(n("#SharedWithIdentityUsers_" + r + "__IdentityUserSurname").val());
                        n("#IdentityUserMobileNumber").val(n("#SharedWithIdentityUsers_" + r + "__IdentityUserMobileNumber").val());
                        n("#IsNewUser").val(n("#SharedWithIdentityUsers_" + r + "__IsNewUser").val());
                        n("#IsActivated").val(n("#SharedWithIdentityUsers_" + r + "__IsActivated").val())
                    },
                    success: function(i) {
                        n("#SharedWithIdentityUsers_" + r + "__IdentityUserId").val(i.IdentityUserId);
                        n("#SharedWithIdentityUsers_" + r + "__IdentityUserEmail").val(i.IdentityUserEmail);
                        n("#SharedWithIdentityUsers_" + r + "__IdentityUserName").val(i.IdentityUserName);
                        n("#SharedWithIdentityUsers_" + r + "__IdentityUserSurname").val(i.IdentityUserSurname);
                        n("#SharedWithIdentityUsers_" + r + "__IdentityUserMobileNumber").val(i.IdentityUserMobileNumber || "");
                        n("#SharedWithIdentityUsers_" + r + "__IsNewUser").val(i.IsNewUser);
                        n("#SharedWithIdentityUsers_" + r + "__IsActivated").val(i.IsActivated);
                        n(n(t).children(".identity-user-fullname")[0]).text(i.IdentityUserName + " " + i.IdentityUserSurname + " has access now")
                    },
                    cancel: function() {}
                })
            })
        }
        function a(t) {
            return n.ajax({
                type: "POST",
                url: t,
                contentType: "application/json"
            })
        }
        function v(t) {
            return "Errors"in t ? n.Deferred().reject(t) : t
        }
        function t(t, i) {
            var r = kendo.widgetInstance(t);
            r != null ? r.value(i) : t.is('[type="radio"]') ? t.filter('[value="' + i + '"]').prop("checked", !0) : t.is('[type="checkbox"]') ? t.prop("checked", n.isArray(i) ? i.indexOf(t.val()) != -1 : i == t.val()) : t.val(i)
        }
        function y(i) {
            var r = n("#ctlDemographicContainer form");
            t(r.find('[name$="SalutationId"]'), i.SalutationId);
            t(r.find('[name$="FirstName"]'), i.FirstName);
            t(r.find('[name$="MiddleName"]'), i.MiddleName);
            t(r.find('[name$="LastName"]'), i.LastName);
            t(r.find('[name$="MaidenName"]'), i.MaidenName);
            t(r.find('[name$="DateOfBirth"]'), i.DateOfBirth);
            t(r.find('[name$="MaritalStatusId"]'), i.MaritalStatusId);
            t(r.find('[name$="GuardianName"]'), i.GuardianName);
            t(r.find('[name$="GuardianContact"]'), i.GuardianContact);
            t(r.find('[name$="HomePhone"]'), i.HomePhone);
            t(r.find('[name$="WorkPhone"]'), i.WorkPhone);
            t(r.find('[name$="MobilePhone"]'), i.MobilePhone);
            t(r.find('[name$="PreferredMethodOfContactId"]'), i.PreferredMethodOfContactId);
            t(r.find('[name$="AccountInfo.HealthFundId"]'), i.HealthFundId);
            t(r.find('[name$="AccountInfo.HealthFundMembershipNumber"]'), i.HealthFundMembershipNumber);
            t(r.find('[name$="AccountInfo.HealthFundPositionOnCard"]'), i.HealthFundPositionOnCard);
            t(r.find('[name$="AccountInfo.HealthFundExpiryDate"]'), i.HealthFundExpiryDate);
            t(r.find('[name$="AccountInfo.DvaCardNumber"]'), i.DvaCardNumber);
            t(r.find('[name$="AccountInfo.DvaCardExpiryDate"]'), i.DvaCardExpiryDate);
            t(r.find('[name$="AccountInfo.DvaCardColourId"]'), i.DvaCardColourId);
            t(r.find('[name$="AccountInfo.IhiNumber"]'), i.IhiNumber);
            t(r.find('[name$="AccountInfo.PensionCardNumber"]'), i.PensionCardNumber);
            t(r.find('[name$="AccountInfo.PensionCardExpiryDate"]'), i.PensionCardExpiryDate);
            t(r.find('[name$="AccountInfo.HccCardNumber"]'), i.HccCardNumber);
            t(r.find('[name$="AccountInfo.HccCardExpiryDate"]'), i.HccCardExpiryDate);
            t(r.find('[name$="AccountInfo.Medicare.NumberFirst"]'), i.MedicareNumber);
            t(r.find('[name$="AccountInfo.Medicare.NumberSecond"]'), i.MedicareReferenceNumber);
            t(r.find('[name$="AccountInfo.Medicare.ExpiryDate"]'), i.MedicareExpiryDate);
            t(r.find('[name$="SexId"]'), i.SexId);
            u();
            t(r.find('[name$="GenderTypeId"]'), i.GenderTypeId);
            i.Checklist && p(i.Checklist);
            siberia.address.set(n("#js-residential-address-container"), i.ResidentialAddress);
            n("#PostalAddress_SameAsResidentialAddress").prop("checked", i.PostalAddress.SameAsResidentialAddress);
            n("#PostalAddress_SameAsResidentialAddress").trigger("change");
            i.IsPostalAddressSameAsResidentialAddress || siberia.address.set(n("#js-postal-address-container"), i.PostalAddress)
        }
        function p(i) {
            function o(i) {
                var r = "0_" + i.SortOrder
                  , u = n('[name="' + r + '"]');
                t(u, i.SelectedValueIds)
            }
            function s(i) {
                i.Values.forEach(function(r, u) {
                    var f = "0_" + i.SortOrder + "_" + u
                      , e = n("#" + f);
                    t(e, i.SelectedValueIds)
                })
            }
            function h(i) {
                var r = "0.0_" + i.SortOrder
                  , u = n('[name="' + r + '"]');
                t(u, i.SelectedValueIds)
            }
            function c(i) {
                var r = "0.0_" + i.SortOrder
                  , u = n('[name="' + r + '"]');
                t(u, i.Values[0].Text)
            }
            var r = [1, 2]
              , u = 3
              , f = 4
              , e = [5, 6];
            i.Items.forEach(function(n) {
                r.indexOf(n.ControlType) != -1 ? o(n) : n.ControlType == u ? s(n) : n.ControlType == f ? h(n) : e.indexOf(n.ControlType) != -1 && c(n)
            })
        }
        function w() {
            n("#btnImportData").hide();
            n('[name="submitAction"]').show()
        }
        function b(n) {
            var t = siberia.notification.getFirstError(n.Errors) || text.global.status.networkError;
            siberia.notification.showErrorNotification(t)
        }
        function k() {
            var i = n("#NextOfKinName").data("kendoAutoComplete")
              , t = i.dataItem();
            typeof t != "undefined" && t && (t.AddressInfo != null ? n("#NextOfKinAddress").val(t.AddressInfo) : n("#NextOfKinAddress").val(""),
            t.ContactPhone != null ? n("#NextOfKinContactPhone").val(t.ContactPhone) : n("#NextOfKinContactPhone").val(""))
        }
        function d() {
            n("#PhotoFileId").length > 0 && !n("#PhotoFileId").val() && (n("#ClearPatientPhoto").hide(),
            n("#ChangePatientPhoto").html('<i class="icon icon-upload"><\/i>' + text.global.titles.addPhoto));
            n("#ClearPatientPhoto").on("click", function(n) {
                n.preventDefault();
                e("")
            });
            n("#ChangePatientPhoto").on("click", function(n) {
                n.preventDefault();
                g()
            })
        }
        function g() {
            siberia.popup.create("#patient-photo-popup", {
                windowOptions: {
                    title: text.global.titles.addFile,
                    width: "400"
                },
                ajax: {
                    enabled: !0
                },
                clear: function() {
                    var t = n("#patientPhotoUploader").data("kendoUpload").wrapper;
                    t.find('input:not([id="patientPhotoUploader"]), ul').each(function() {
                        n(this).remove()
                    });
                    t.first().addClass("k-upload-empty")
                },
                success: function(n) {
                    e(n)
                }
            })
        }
        function e(t) {
            var i, r;
            n("#PhotoFileId").val(t);
            var u = n("#PatientPhotoContainer img")
              , f = n("#PatientPhotoCropArea")
              , e = n("#ClearPatientPhoto")
              , o = n("#ChangePatientPhoto");
            t ? (e.show(),
            o.html('<i class="icon icon-upload"><\/i>' + text.global.titles.editPhoto),
            i = kendo.format(n("#PatientPhotoContainer").attr("data-get-photo-url"), t),
            u.attr("src", i),
            f.css("background-image", 'url("' + i + '")')) : (e.hide(),
            o.html('<i class="icon icon-upload"><\/i>' + text.global.titles.addPhoto),
            r = n("#PatientPhotoContainer").attr("data-default-photo-url"),
            u.attr("src", r),
            f.css("background-image", 'url("' + r + '")'))
        }
        function nt(t) {
            t.preventDefault();
            n(this).blur();
            var i = {
                CanEditPatient: !1,
                PatientId: n("#PatientId").val(),
                PatientFullName: n("#PatientName").val(),
                PatientDateOfBirth: n("#PatientDateOfBirth").val()
            };
            siberia.appointmentsHistory.initAppointmentsHistoryPopup(i)
        }
        function o() {
            var t = n(":focus");
            siberia.validation.initValidationFor(n("#ctlDemographicContainer").find("form"), n("#ctlDemographicContainer").find("form .js-validate"));
            siberia.windows.initTabNavigation({
                tabstrip: "#PatientTabs"
            });
            t.focus()
        }
        function tt() {
            var i = n("#ClinicalPartnerId").data("kendoMultiSelect"), t;
            if (i && i.dataItems().length === 0) {
                var r = n("#ValidationPartnerId").text()
                  , u = n("#ValidationPartnerFullName").text()
                  , f = n("#ValidationPartnerDateOfBirth").text()
                  , e = n("#ValidationPartnerNumber").text()
                  , o = n("#ValidationHighlightedFullName").text();
                r && u && f && e && (t = [],
                t.push({
                    PatientId: r,
                    PatientFullName: u,
                    PatientDateOfBirth: f,
                    PatientNumber: e,
                    HighlightedFullName: o
                }),
                siberia.multiSelect.attachValue("#ClinicalPartnerId", t, "PatientId"))
            }
        }
        function it() {
            var i = n("#SuburbId").data("kendoMultiSelect"), t;
            if (i && i.dataItems().length === 0) {
                var r = n("#ValidationSuburbId").text()
                  , u = n("#ValidationSuburbDisplayName").text()
                  , f = n("#ValidationSuburbPostCode").text()
                  , e = n("#ValidationSuburbSuburbName").text();
                r && u && f && e && (t = [],
                t.push({
                    Id: r,
                    DisplayName: u,
                    PostCode: f,
                    SuburbName: e
                }),
                siberia.multiSelect.attachValue("#SuburbId", t, "Id"))
            }
        }
        function rt() {
            var t = n("#AccountInfo_AccountHolderId").data("kendoMultiSelect"), i = n("#AccountInfo_AccountHolderId").attr("data-previous-account-holder-id"), r;
            t && i && (!t.dataItem() || t.value()[0] !== i) && (r = n("#AccountInfo_AccountHolderId").data("get-account-holder-url"),
            n.post(r, {
                accountHolderId: i
            }, function(n) {
                siberia.multiSelect.attachValue("#AccountInfo_AccountHolderId", [n], "Id", !0)
            }))
        }
        function ut() {
            var r = n("#UsualGpId").data("kendoMultiSelect"), t, i;
            r && r.dataItems().length === 0 && (t = n("#ValidationUsualGpJson").text(),
            i = t ? JSON.parse(t) : null,
            t && i && siberia.multiSelect.attachValue("#UsualGpId", [i], "Id"))
        }
        function ft() {
            function u(n) {
                var t = siberia.address.get(n);
                siberia.address.set(n, t)
            }
            var i = n("#js-residential-address-container")
              , t = n("#js-postal-address-container")
              , r = n("#PostalAddress_SameAsResidentialAddress");
            i.length && t.length && (u(i),
            u(t),
            r.change(function(i) {
                i.currentTarget.checked ? (t.hide(),
                siberia.address.clear(t)) : (siberia.requiredIf.checkRequired(this, n("#js-postal-address-section")),
                t.show())
            }),
            r.trigger("change"))
        }
        function u() {
            var t = n("#GenderTypeId")
              , i = t.data("kendoDropDownList");
            if (i) {
                var r = n("[name=SexId]:checked").val()
                  , u = t.data("gender-types")[r]
                  , f = new kendo.data.DataSource({
                    data: u
                });
                i.setDataSource(f)
            }
        }
        function et() {
            var t = n("#PatientId").val();
            return {
                text: n("#ClinicalPartnerId").data("kendoMultiSelect").input.val(),
                patientId: t
            }
        }
        function ot() {
            return {
                text: n("#NextOfKinName").val()
            }
        }
        function st() {
            return {
                text: n("#practices-multiselect").getKendoAutoComplete().value()
            }
        }
        var i = null
          , r = !1;
        return {
            init: s,
            onLoadingPartners: et,
            onLoadNextOfKin: ot,
            onLoadingAutocomplete: st
        }
    }();
    n(document).ready(function() {
        siberia.demographic.init()
    })
}(jQuery),
function(n) {
    function e() {
        function t() {
            n(window).on("rc-show-hpio-validation-failed-summary", c);
            n(window).on("rc-hide-hpio-validation-failed-summary", i);
            n(window).on("rc-show-hpio-validation-success-summary", l);
            n(window).on("rc-hide-hpio-validation-success-summary", r)
        }
        n("#savePractice").click(function(t) {
            var f = n(this), r, u;
            t.preventDefault();
            f.blur();
            r = n(".js-global-spinner-container");
            r.spinner(!0);
            u = f.closest("form");
            u.ajaxSubmit({
                success: function(t) {
                    r.spinner(!1);
                    i();
                    n(".js-hpio-validation-success-summary").length && n(".js-hpio-validation-success-summary").is(":visible") && h();
                    siberia.validation.processAjaxErrors(u, t.Errors) && siberia.notification.showSuccessNotification(text.global.status.practiceDetailsSaved, f)
                },
                error: function() {
                    r.spinner(!1);
                    siberia.validation.showFormNetworkError(u)
                }
            })
        });
        t();
        y();
        w();
        siberia.uploadPicture.init(n("#PracticeDetails"), "#LogotypeFileId");
        s();
        a();
        v();
        p();
        n(".js-printing-mw-switch").siberiaOnOffToggler(".js-setting-on", ".js-setting-off");
        n(".js-etask-setting-switch").siberiaOnOffToggler(".js-setting-on", ".js-setting-off");
        n("#getPracticeMedicareLocationIdBtn").on("click", o);
        siberia.common.initWarningConfrimarionEvent("body", "#confirm-and-force-save-changes", "#WarningsConfirmed", "#savePractice")
    }
    function o(t) {
        var i, r, u;
        t.preventDefault();
        i = n(this);
        i.blur();
        r = i.closest("form");
        u = i.data("get-medicare-id-url");
        u && (n("body").spinner(!0),
        n.ajax({
            type: "POST",
            url: u,
            success: function(t) {
                siberia.validation.processAjaxErrors(r, t.Errors) && t && n("#PracticeDetails_MedicareLocationId").text(t)
            },
            error: function() {
                siberia.validation.showFormNetworkError(r)
            },
            complete: function() {
                n("body").spinner(!1)
            }
        }))
    }
    function s() {
        n(".js-practice-details-appt-types:data(kendoDropDownList)").each(function() {
            var t = n(this).data("kendoDropDownList")
              , i = t.value();
            t.dataSource.filter({
                logic: "or",
                filters: [{
                    field: "IsDisabled",
                    operator: "eq",
                    value: !1
                }, {
                    field: "Id",
                    operator: "eq",
                    value: i
                }]
            });
            t.value(i)
        })
    }
    function h() {
        var t = n(".js-hpio-save-success-summary")
          , i = n(".js-hpio-save-success-summary .notification-item");
        t.length && (t.show(),
        i.show(),
        r())
    }
    function c() {
        var t = n(".js-hpio-validation-failed-summary")
          , i = n(".js-hpio-validation-failed-summary .notification-item");
        t.length && (t.show(),
        i.show(),
        r(),
        u())
    }
    function l() {
        var t = n(".js-hpio-validation-success-summary")
          , r = n(".js-hpio-validation-success-summary .notification-item");
        t.length && (t.show(),
        r.show(),
        i(),
        u())
    }
    function i() {
        var t = n(".js-hpio-validation-failed-summary")
          , i = n(".js-hpio-validation-failed-summary .notification-item");
        t.length && (t.hide(),
        i.hide())
    }
    function r() {
        var t = n(".js-hpio-validation-success-summary")
          , i = n(".js-hpio-validation-success-summary .notification-item");
        t.length && (t.hide(),
        i.hide())
    }
    function u() {
        var t = n(".js-hpio-save-success-summary")
          , i = n(".js-hpio-save-success-summary .notification-item");
        t.length && (t.hide(),
        i.hide())
    }
    function a() {
        var t = n("#AllowProcedureManagement")
          , i = n("#AllowOperatingList")
          , r = n("#ShowOperatingListUnderProcedureManagement");
        if (r.length && t.length && i.length) {
            t.on("change", function() {
                i.prop("checked") && r.prop("checked", !1).attr("disabled", !this.checked)
            });
            i.on("change", function() {
                t.prop("checked") && r.prop("checked", !1).attr("disabled", !this.checked)
            })
        }
    }
    function v() {
        var r = n("#AllowWeeklyView")
          , t = n("#HideSundayOnScheduler")
          , i = n("#HideSaturdayOnScheduler");
        r.on("change", function() {
            t.prop("checked", !1).attr("disabled", !this.checked);
            i.prop("checked", !1).attr("disabled", !0)
        });
        t.on("change", function() {
            i.prop("checked", !1).attr("disabled", !this.checked)
        })
    }
    function y() {
        var r = n("#QuoteSettings_CanDisplayAnaesthetist"), u, i, f;
        r.length === 1 && (u = n("#QuoteSettings_CanDisplayAnaesthetistPhone"),
        t(r, u),
        r.change(function() {
            t(r, u)
        }));
        i = n("#QuoteSettings_CanDisplayAssistingSurgeon");
        i.length === 1 && (f = n("#QuoteSettings_CanDisplayAssistingSurgeonPhone"),
        t(i, f),
        i.change(function() {
            t(i, f)
        }))
    }
    function p() {
        var t = n("#IsHtmlTemplateEnabled")
          , i = n("#IsDevExpressTemplateEnabled");
        t.on("change", f);
        i.on("change", f)
    }
    function f() {
        var t = n("#IsHtmlTemplateEnabled")
          , i = n("#IsDevExpressTemplateEnabled");
        t.prop("checked") || i.prop("checked") || t.prop("checked", !0)
    }
    function w() {
        var t = n("#TwoFactorAuthOn")
          , i = n("#TwoFactorAuthTypeContainer");
        t.on("change", function() {
            i.toggle(t.prop("checked"))
        });
        i.toggle(t.prop("checked"))
    }
    function t(n, t) {
        var i = n.prop("checked");
        i ? t.prop("disabled", !1) : (t.prop("checked", !1),
        t.prop("disabled", !0))
    }
    n(function() {
        e()
    })
}(jQuery),
function(n) {
    function i() {
        n("#print-label-setting-favorites").length !== 0 && (siberia.grid.initClientGrid({
            gridSelector: "#print-label-setting-favorites",
            addAction: r,
            editAction: u,
            deleteAction: o,
            isCustomEditing: !0
        }),
        n("#savePrintingTemplates").click(function(t) {
            var u = n(this), i, r;
            t.preventDefault();
            u.blur();
            i = n(".js-global-spinner-container");
            i.spinner(!0);
            r = u.closest("form");
            r.ajaxSubmit({
                success: function(n) {
                    i.spinner(!1);
                    siberia.validation.processAjaxErrors(r, n.Errors) && siberia.notification.showSuccessNotification(text.global.status.printingSettingsSaved, u)
                },
                error: function() {
                    i.spinner(!1);
                    siberia.validation.showFormNetworkError(r)
                }
            })
        }))
    }
    function r(n) {
        t(n)
    }
    function u(n) {
        t({
            item: n
        })
    }
    function t(n) {
        siberia.popup.create("#favorite-print-label-setting-popup", {
            windowOptions: {
                title: text.global.titles.popupFavoritePrintLabelSetting,
                width: "800"
            },
            clear: function() {
                f(n.item)
            },
            success: function() {
                e()
            },
            cancel: function() {
                n.cancel && n.cancel()
            }
        })
    }
    function f(t) {
        n("#FavoritePrintLabelSetting_Id").val(t.Id);
        n("#FavoritePrintLabelSetting_Name").val(t.Name);
        n('#printLabelSettings input[type="checkbox"]').each(function(t, i) {
            n(i).prop("checked", !1)
        });
        t.Settings && n.each(t.Settings, function(t, i) {
            var r = n("#FavoritePrintLabelSetting_Settings_" + t);
            r.length > 0 && r.prop("checked", i)
        })
    }
    function e() {
        n("#print-label-setting-favorites").data("kendoGrid").dataSource.read()
    }
    function o() {
        n("#print-label-setting-favorites").data("kendoGrid").dataSource.sync()
    }
    n(i)
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.practiceList");
    siberia.practiceList = function() {
        function u() {
            n(document.body).on("click", ".js-show-invoice-history", function(t) {
                var i = n(t.currentTarget).attr("data-patient-id");
                i && n(window).trigger("rc-open-invoice-history-panel", [i])
            });
            n(document.body).on("click", ".js-superadmin-practicelist-publishpractice", function() {
                var r = n("#practice-adm-publishpractice-popup")
                  , u = n(this).data("practiceid")
                  , f = r.attr("data-title");
                siberia.popup.create(r, {
                    windowOptions: {
                        title: f,
                        width: "430"
                    },
                    preLoadOptions: {
                        dataUrl: r.attr("data-get-popup-content-url"),
                        data: {
                            practiceid: u
                        },
                        preLoadSuccess: function(n) {
                            r.find(".js-content-container").html(n);
                            siberia.validation.initValidationFor(r.find("form"), r.find(".js-validate"))
                        }
                    },
                    clear: function() {},
                    success: function() {
                        i.data("kendoGrid").dataSource.read();
                        t.data("kendoGrid").dataSource.read()
                    }
                })
            });
            n(document.body).on("click", ".js-superadmin-practicelist-archivepractice", function() {
                var r = n("#practice-adm-archivepractice-popup")
                  , u = n(this).data("practiceid")
                  , f = r.attr("data-title");
                siberia.popup.create(r, {
                    windowOptions: {
                        title: f,
                        width: "430"
                    },
                    preLoadOptions: {
                        dataUrl: r.attr("data-get-popup-content-url"),
                        data: {
                            practiceid: u
                        },
                        preLoadSuccess: function(n) {
                            r.find(".js-content-container").html(n);
                            siberia.validation.initValidationFor(r.find("form"), r.find(".js-validate"))
                        }
                    },
                    clear: function() {},
                    success: function() {
                        i.data("kendoGrid").dataSource.read();
                        t.data("kendoGrid").dataSource.read()
                    }
                })
            });
            t = n("#practice-adm-item-grid-demo");
            i = n("#practice-adm-item-grid-live");
            siberia.grid.initClientGrid({
                gridSelector: "#practice-adm-item-grid-live",
                saveAndCloseSelector: null,
                saveSelector: null,
                addAction: function(n) {
                    r(n, "live")
                }
            });
            siberia.grid.initClientGrid({
                gridSelector: "#practice-adm-item-grid-demo",
                saveAndCloseSelector: null,
                saveSelector: null,
                addAction: r
            })
        }
        function r(r) {
            siberia.popup.create("#practice-adm-item-popup", {
                windowOptions: {
                    title: text.global.titles.addPractice,
                    width: "430"
                },
                clear: function() {
                    n("#NewPracticeItem_SalutationId").data("kendoDropDownList").value("");
                    n("#NewPracticeItem_Name").val("");
                    n("#NewPracticeItem_AdminFirstName").val("");
                    n("#NewPracticeItem_AdminSurname").val("");
                    n("#NewPracticeItem_AdminEmail").val("");
                    n("#NewPracticeItem_StateId").data("kendoDropDownList").value([]);
                    n("#NewPracticeItem_IsDemo").removeAttr("checked")
                },
                success: function() {
                    i.data("kendoGrid").dataSource.read();
                    t.data("kendoGrid").dataSource.read()
                },
                cancel: function() {
                    r.cancel()
                }
            })
        }
        function f(n) {
            n.kendoNumericTextBox({
                format: "0",
                max: 99999999
            })
        }
        function e() {
            return {
                SelectedCountryId: n("#NewPracticeItem_CountryId").data("kendoDropDownList") ? n("#NewPracticeItem_CountryId").data("kendoDropDownList").value() : null
            }
        }
        var t, i;
        return {
            init: u,
            publicIdFilter: f,
            filterStatesByCountryIdParameter: e
        }
    }();
    n(document).ready(function() {
        siberia.practiceList.init()
    })
}(jQuery),
function(n) {
    function r() {
        if (t = n("#practice-middleware-info"),
        t.length != 0) {
            n(".js-middleware-warning").hide();
            i = t.data("delete-service-account-url");
            var f = navigator.platform.indexOf("Mac") === 0
              , r = n(".js-middleware-link")
              , e = f ? r.attr("data-installer-mac") : r.attr("data-installer-win");
            r.attr("href", e);
            n(".js-delete-service-account").each(function() {
                var t = n(this)
                  , i = t.data("id");
                n(this).on("click", function() {
                    u(i)
                })
            })
        }
    }
    function u(r) {
        var u = confirm(text.global.confirms.turnOffPracticeMW);
        u == !0 && (t.spinner(!0),
        n.ajax({
            type: "POST",
            data: {
                id: r
            },
            url: i,
            success: function(t) {
                t && t == !0 ? (n("#js-middleware-error-info-" + r).remove(),
                n(".js-service-account-error").fadeOut(500),
                siberia.notification.showInfoNotification(text.global.status.practiceMiddlewareSwitchedOff)) : n(".js-service-account-error").fadeIn(500)
            },
            error: function() {
                n(".js-service-account-error").fadeIn(500)
            },
            complete: function() {
                t.spinner(!1)
            }
        }))
    }
    var t, i;
    n(document).ready(function() {
        r()
    })
}(jQuery),
function(n) {
    function o() {
        var t = n(".js-report-grid").data("kendoGrid");
        t && (r = t.dataSource.pageSize())
    }
    function s() {
        var t = n(".js-report-grid").data("kendoGrid"), i;
        t && (i = t.dataSource.pageSize(),
        r !== 0 && r !== i && t.dataSource.pageSize(r))
    }
    function u(i, r) {
        var u = n(t + " " + i).data("kendoDropDownList");
        u && u.value(r)
    }
    function i(i, r) {
        var u = n(t + " " + i).data("kendoDropDownList");
        return u ? u.value() : r
    }
    function f(i) {
        var r = n(t + " " + i).data("kendoDropDownList");
        return r ? r.dataItem().Text : ""
    }
    function e(i, r) {
        var u = n(t + " " + i).data("kendoDatePicker");
        return u ? u.value() : r
    }
    function h() {
        function r(t) {
            var i = n(".js-global-spinner-container");
            i.spinner(!0);
            o();
            t.ajaxSubmit({
                data: {
                    HealthFundName: f("#HealthFundId")
                },
                success: function(r) {
                    var f, e, u;
                    r.Errors && siberia.validation.processAjaxErrors(t, r.Errors);
                    f = n(".js-report-grid-container");
                    f ? (f.empty(),
                    f.append(r),
                    e = n(".js-report-paged-grid"),
                    e.length ? (u = e.data("kendoGrid"),
                    u && (u.dataSource.bind("requestEnd", function(t) {
                        var r = this.filter() && this.filter().filters && this.filter().filters.length;
                        t.response && (t.response.Data.length || r) ? (n(".js-no-data").hide(),
                        n(".js-no-data .notification-item").hide(),
                        n(".js-report-grid-area").show()) : (n(".js-no-data").show(),
                        n(".js-no-data .notification-item").show(),
                        n(".js-report-grid-area").hide());
                        i.spinner(!1)
                    }),
                    u.dataSource.bind("error", function() {
                        n(".js-no-data").show();
                        n(".js-report-grid-area").hide();
                        i.spinner(!1)
                    }),
                    u.dataSource.read())) : i.spinner(!1),
                    s()) : i.spinner(!1)
                },
                error: function() {
                    i.spinner(!1);
                    siberia.validation.showFormNetworkError(t)
                }
            })
        }
        var i = n(t);
        i.length != 0 && (siberia.reportDateFilter.init({
            containerSelector: t
        }),
        n(".js-get-report").click(function(t) {
            var i = n(this);
            t.preventDefault();
            i.blur();
            r(i.closest("form"))
        }),
        n(".js-reset").click(function() {
            siberia.reportDateFilter.resetSelectedState();
            u("#HealthFundId", 0);
            u("#StateId", 0);
            u("#PracticeId", 0);
            u("#LocationId", 0);
            n("#From").data("kendoDatePicker").value("");
            n("#To").data("kendoDatePicker").value("")
        }))
    }
    siberia.ensureObject("siberia.reports");
    var t = "#healthfund-report-filter"
      , r = 0;
    siberia.reports.getHealthFundReportGridFilter = function() {
        return {
            HealthFundId: i("#HealthFundId"),
            HealthFundName: f("#HealthFundId"),
            StateId: i("#StateId"),
            PracticeId: i("#PracticeId"),
            LocationId: i("#LocationId"),
            From: e("#From"),
            To: e("#To")
        }
    }
    ;
    siberia.reports.getLocationsFilter = function() {
        return {
            practiceId: i("#PracticeId")
        }
    }
    ;
    n(function() {
        h()
    })
}(jQuery),
function(n) {
    function a() {
        var t = n(".js-report-grid").data("kendoGrid");
        t && (f = t.dataSource.pageSize())
    }
    function v() {
        var t = n(".js-report-grid").data("kendoGrid"), i;
        t && (i = t.dataSource.pageSize(),
        f !== 0 && f !== i && t.dataSource.pageSize(f))
    }
    function o() {
        n(".js-get-report").show();
        n(".js-period-filter").show();
        n(".date-range").show();
        n(".js-locations").show();
        n(".js-export-report-to-excel").show();
        n(".js-report-favorites").show();
        n(".js-procedure-types").hide();
        n(".js-type-of-patient-filter").hide();
        n(".js-null-location").hide();
        n(".js-contacts").hide();
        n(".js-specialty").hide();
        n(".orSpecialtyWrap").hide();
        n(".js-invoice-finalized").hide();
        n(".js-item-number-types").hide();
        n(".js-ui-payment-types").hide();
        n(".js-show-payment-details").hide();
        n(".js-company-name").hide();
        n(".js-period-filter-aged-debtors").hide();
        n(".js-Insurance-Company").hide();
        n(".js-injury-illness").hide();
        n(".js-workcover-claim-type").hide();
        n(".js-shorten-invoice-number").hide();
        c("#InsuranceCompanyIds", null)
    }
    function s() {
        var i, t;
        siberia.validation.clearValidationErrors(r);
        i = siberia.common.currentLocationDate();
        siberia.reportDateFilter.resetSelectedState();
        n("#DoctorsIds").data("kendoMultiSelect").value([]);
        n("#LocationsIds").data("kendoMultiSelect").value([]);
        n("#ProcedureTypeIds").data("kendoMultiSelect").value([]);
        n("#UIPaymentTypeIds").data("kendoMultiSelect").value([]);
        n("#ContactIds").data("kendoMultiSelect").value([]);
        n("#SpecialtyIds").data("kendoMultiSelect").value([]);
        n("#ItemNumbers").data("kendoMultiSelect").value([]);
        n("#From").data("kendoDatePicker").value("");
        n("#To").data("kendoDatePicker").value("");
        t = n("#AsAt").data("kendoDatePicker");
        t && t.value(kendo.toString(i, siberia.config.formats.dateFormat));
        n("#DateRangeOption").val("0");
        l.children("input:radio").prop("checked", !0);
        n('input[name="ItemNumberType"]').prop("checked", !1);
        n("#ExcludeItemNumbers").prop("checked", !1);
        n("#InjuryIllnessIds").data("kendoMultiSelect").value([]);
        n("#InsuranceCompanyIds").data("kendoMultiSelect").value([]);
        n("#OpenClaim").prop("checked", !0);
        n("#ClosedClaim").prop("checked", !0);
        n("#ItemNumberTypeMbs").prop("checked", !1);
        n("#ItemNumberTypeNonMbs").prop("checked", !1);
        n("#ItemNumberTypeStock").prop("checked", !1);
        n("#AlliedHealthItems").prop("checked", !1);
        n("#ShowPaymentDetails").prop("checked", !1);
        n("#Finalized").prop("checked", !1);
        n("#Unlinked").prop("checked", !1)
    }
    function h() {
        var i, f, e;
        if (siberia.validation.clearValidationErrors(r),
        i = u.dataItem(),
        i != null) {
            o();
            n("#reportFilterTooltip").attr("title", i.Tooltip || "").toggle(!!i.Tooltip);
            f = parseInt(i.Id);
            e = "";
            e = f === t.Referrers ? n(".js-doctor-label").attr("data-referringTo") : n(".js-doctor-label").attr("data-doctor");
            n(".js-doctor-label").text(e + ":");
            switch (f) {
            case t.Items:
                n(".js-item-number-types").show();
                n(".js-show-payment-details").show();
                n(".js-ui-payment-types").show();
                n("#ItemNumberTypeMbs").prop("checked", !0);
                break;
            case t.ItemsPayments:
                n(".js-item-number-types").show();
                n(".js-ui-payment-types").show();
                n("#ItemNumberTypeMbs").prop("checked", !0);
                break;
            case t.DailyTransactions:
                n(".js-daily-report").show();
                n(".js-monthly-report").hide();
                n(".js-weekly-report").hide();
                n(".js-interval-component").hide();
                n(".js-today-report").children("input:radio").prop("checked", !0);
                siberia.reportDateFilter.applyToday();
                break;
            case t.WeeklyTransactions:
                n(".js-daily-report").hide();
                n(".js-monthly-report").hide();
                n(".js-weekly-report").show();
                n(".js-interval-component").show();
                n(".js-current-week-report").children("input:radio").prop("checked", !0);
                siberia.reportDateFilter.applyCurrentWeek();
                break;
            case t.MonthlyTransactions:
                n(".js-daily-report").hide();
                n(".js-monthly-report").show();
                n(".js-weekly-report").hide();
                n(".js-interval-component").show();
                n(".js-current-month-report").children("input:radio").prop("checked", !0);
                siberia.reportDateFilter.applyCurrentMonth();
                break;
            case t.AccountHoldersDebt:
                n(".js-period-filter").hide();
                n(".date-range").show();
                n(".js-locations").show();
                n(".js-company-name").show();
                n(".js-period-filter-aged-debtors").show();
                siberia.reportDateFilter.setAsAtDateWithToday();
                break;
            case t.UnlinkedQuotes:
                n(".js-procedure-types").show();
                n(".js-type-of-patient-filter").show();
                break;
            case t.PatientsWithNearEDD:
                n(".js-null-location").show();
                break;
            case t.UsualProviderAndGP:
                n(".js-period-filter").hide();
                n(".js-locations").hide();
                n(".js-contacts").show();
                break;
            case t.Referrers:
                n(".js-contacts").show();
                n(".orSpecialtyWrap").show();
                n(".js-specialty").show();
                break;
            case t.GstInvoiceItems:
                n(".js-invoice-finalized").show();
                break;
            case t.WorkcoverClaimsReport:
                n(".js-locations").show();
                n(".js-Insurance-Company").show();
                n(".js-injury-illness").show();
                n(".js-workcover-claim-type").show();
                break;
            case t.WorkCoverInvoicesReport:
                n(".js-locations").show();
                n(".js-Insurance-Company").show();
                n(".js-shorten-invoice-number").show();
                n(".js-get-report").hide();
                n(".js-report-favorites").hide();
                n(".js-report-grid-container").empty();
                c("#InsuranceCompanyIds", 1);
                break;
            case t.PendingReferrals:
                n(".js-locations").hide()
            }
        }
    }
    function y() {
        if (n(".js-report-grid-container").length > 0) {
            var t = function() {
                var t = n("#uninvoiced-appointments-report-grid").data("kendoGrid");
                t && t.dataSource.read()
            };
            n(".js-report-grid-container").on("click", ".js-create-invoice", function(i) {
                i.preventDefault();
                siberia.invoicePopup.initInvoicePopup(n(i.currentTarget).attr("href"), !0, t)
            })
        }
    }
    function p(t) {
        var u = function() {
            var i = {}, r = t.find(".control-grp:visible, .checkbox-grp:visible"), u, f;
            return r.find("input, textarea, select").each(function() {
                var t = n(this).attr("id")
                  , r = n(this).attr("type");
                r === "checkbox" || r === "radio" ? t && n(this).is(":checked") && (i[t] = n(this).val() || !0) : t && t.toLowerCase() !== "favoritereportfilters" && t.toLowerCase() !== "from" && t.toLowerCase() !== "to" && t.toLowerCase() !== "fromdate" && t.toLowerCase() !== "todate" && t.toLowerCase() !== "asat" && n(this).val() && (i[t] = n(this).val())
            }),
            i.ReportTypeId = i.ReportTypeId || 0,
            u = r.find(".js-date-range-report-grp input:checked").val(),
            u && (i.DatePeriod = u),
            f = r.find("#js-as-at-grp input:checked").val(),
            f && (i.AsAtPeriod = f),
            i
        }
          , r = function(n, t) {
            n.dataSource.options.serverFiltering && t !== 0 && Array.isArray(t) && t.length ? (n.dataSource.data([]),
            t.forEach(function(t) {
                t.selected = !0;
                n.dataSource.add(t)
            }),
            n.dataSource.options.serverFiltering = !1,
            n.dataSource.filter({}),
            n.value(t),
            n.dataSource.options.serverFiltering = !0) : n.value(t)
        }
          , f = function(n) {
            var r, t;
            if (n) {
                for (r in n.FavoriteReportFilterData)
                    (t = r.toLowerCase(),
                    t !== "id" && t !== "name" && t !== "contactids" && t !== "specialtyids" && t !== "itemnumbers" && t !== "insurancecompanyids" && t !== "reporttypeid") && i(r, n.FavoriteReportFilterData[r]);
                i("ItemNumbers", n.Items);
                i("ContactIds", n.Contacts);
                i("InsuranceCompanyIds", n.InsuranceCompanies);
                i("SpecialtyIds", n.Specialties)
            }
        }
          , i = function(i, u) {
            var e = t.find(".control-grp:visible, .checkbox-grp:visible")
              , f = e.find("#" + i)
              , o = u === null;
            typeof f.data("kendoDropDownList") != "undefined" ? r(f.data("kendoDropDownList"), o ? 0 : u) : typeof f.data("kendoMultiSelect") != "undefined" ? r(f.data("kendoMultiSelect"), u) : f.is('[type="checkbox"]') ? f.prop("checked", !!u) : f.is('[type="radio"]') ? (f = e.find('[name="' + i + '"]'),
            f.filter(function() {
                return n(this).val() === u
            }).prop("checked", !0)) : i.toLowerCase() === "dateperiod" ? o ? e.find(".js-date-range-report-grp input:checked").prop("checked", !1) : e.find('.js-date-range-report-grp:visible input[value="' + u + '"]').prop("checked", !0).trigger("synteticChange") : i.toLowerCase() === "asatperiod" && (o ? e.find("#js-as-at-grp input:checked").prop("checked", !1) : e.find('#js-as-at-grp input[value="' + u + '"]').prop("checked", !0).trigger("synteticChange"));
            f.trigger("synteticChange")
        };
        siberia.favorites.init(e, {
            suppressInitialLoading: !0,
            saveFavoriteUrl: t.find(".js-save-favorite").attr("data-save-favorite-url"),
            dataSourcePOSTParamsRelatedFields: {
                ReportTypeId: t.find("#ReportTypeId")
            },
            getFavoriteDataAction: function() {
                return u()
            },
            setFavoriteDataAction: f,
            clearFavoriteDataAction: s
        })
    }
    function w() {
        function k(t) {
            var r;
            if (t.preventDefault(),
            r = n(t.currentTarget).closest('[data-role="grid"]').data("kendoGrid"),
            r) {
                var i = r.dataItem(n(t.currentTarget).closest("tr"))
                  , u = {
                    PatientId: i.PatientId,
                    PatientFullName: i.Name,
                    HighlightedFullName: i.Name,
                    PatientDateOfBirth: i.DateOfBirth,
                    HighlightedDateOfBirth: i.DateOfBirth,
                    PatientNumber: i.PatientNumber,
                    HighlightedPatientNumber: i.PatientNumber,
                    PatientIsInactive: i.PatientIsInactive
                }
                  , f = n(t.currentTarget).data("send-sms-url");
                siberia.sms.showPopup({
                    patients: [u]
                }, f, null, !0)
            }
        }
        function d(t) {
            var r;
            if (t.preventDefault(),
            r = n(t.currentTarget).closest('[data-role="grid"]').data("kendoGrid"),
            r) {
                var i = r.dataItem(n(t.currentTarget).closest("tr"))
                  , u = {
                    PatientId: i.PatientId,
                    PatientFullName: i.PatientFullName,
                    HighlightedFullName: i.PatientFullName,
                    PatientDateOfBirth: i.PatientDateOfBirth,
                    HighlightedDateOfBirth: i.PatientDateOfBirth,
                    PatientNumber: i.PatientNumber,
                    HighlightedPatientNumber: i.PatientNumber,
                    PatientIsInactive: i.PatientIsInactive
                }
                  , f = n(t.currentTarget).data("send-sms-url");
                siberia.sms.showPopup({
                    patients: [u]
                }, f, null, !0)
            }
        }
        function g(t) {
            var r, i, u;
            t.preventDefault();
            r = n(t.currentTarget).closest('[data-role="grid"]').data("kendoGrid");
            r && (i = r.dataItem(n(t.currentTarget).closest("tr")),
            u = {
                Id: i.PatientId,
                FullName: i.Name,
                DateOfBirth: i.DateOfBirth,
                PatientIsInactive: i.PatientIsInactive
            },
            siberia.todoList.addToDoForPatient(u, text.global.labels.upcomingEDD))
        }
        function nt(t) {
            var r, i, u;
            t.preventDefault();
            r = n(t.currentTarget).closest('[data-role="grid"]').data("kendoGrid");
            r && (i = r.dataItem(n(t.currentTarget).closest("tr")),
            u = {
                Id: i.PatientId,
                FullName: i.PatientFullName,
                DateOfBirth: i.PatientDateOfBirth,
                PatientIsInactive: i.PatientIsInactive
            },
            siberia.todoList.addToDoForPatient(u, text.reports.pendingReferralEtaskSubject(i.ReferringDoctorFullName)))
        }
        function tt(t) {
            var i, u, r;
            t.preventDefault();
            i = n("#pending-referrals-report-grid").data("kendoGrid");
            i && (u = i.dataItem(n(t.currentTarget).closest("tr")),
            confirm(text.global.confirms.deleteReferral) && (r = n(".js-global-spinner-container"),
            r.spinner(!0),
            n.post(n(i.element).attr("data-delete-referral-url"), {
                id: u.ReferralId
            }).done(function(n) {
                siberia.validation.processGridActionAjaxErrors(n.Errors, !0);
                i.dataSource.read()
            }).fail(function() {
                siberia.validation.showGridNetworkError(!0)
            }).always(function() {
                r.spinner(!1)
            })))
        }
        function it() {
            n("#patients-with-near-edd-grid").on("click", ".js-send-sms-from-report", k);
            n("#patients-with-near-edd-grid").on("click", ".js-create-etask-btn", g);
            n("#pending-referrals-report-grid").on("click", ".js-send-sms-from-report", d);
            n("#pending-referrals-report-grid").on("click", ".js-create-etask-btn", nt);
            n("#pending-referrals-report-grid").on("click", ".js-client-grid-delete", tt)
        }
        function f(t, i, r) {
            var u = n(t).data("kendoChart"), f;
            u && (f = 350 + r / 8 * 13,
            u.setOptions({
                chartArea: {
                    height: f
                }
            }),
            u.setDataSource(i))
        }
        function w(i) {
            var r = n(".js-global-spinner-container");
            r.spinner(!0);
            a();
            i.ajaxSubmit({
                success: function(u) {
                    var o, s, e, h;
                    u.Errors && siberia.validation.processAjaxErrors(i, u.Errors);
                    o = n(".js-report-grid-container");
                    o ? (o.empty(),
                    o.append(u),
                    s = n(".js-report-paged-grid"),
                    s.length ? (it(),
                    e = s.data("kendoGrid"),
                    e && (e.dataSource.bind("requestEnd", function(i) {
                        var u, e, o;
                        if (!i.response)
                            return n(".js-report-grid-area").hide(),
                            n(".js-charts-area").hide(),
                            r.spinner(!1),
                            u = new kendo.data.DataSource({
                                data: []
                            }),
                            f("#items-report-chart-quantity", u, 0),
                            f("#items-report-chart-amount", u, 0),
                            siberia.validation.showGridNetworkError(!0);
                        n(".js-update-charts-by-grid-data").length && i.response.AdditionalData && (e = new kendo.data.DataSource({
                            data: i.response.AdditionalData.Items
                        }),
                        f("#items-report-chart-quantity", e, i.response.AdditionalData.Items.length),
                        f("#items-report-chart-amount", e, i.response.AdditionalData.Items.length),
                        n("#item-number-footer").text(i.response.AdditionalData.ItemsAmount || ""),
                        n("#total-amount-footer").text(i.response.AdditionalData.TotalAmount || ""),
                        n("#total-gst-amount-footer").text(i.response.AdditionalData.TotalGstAmount || ""),
                        n("#total-owing-footer").text(i.response.AdditionalData.TotalOwing || ""),
                        n("#total-payment-footer").text(i.response.AdditionalData.TotalPayment || ""),
                        n("#total-refund-footer").text(i.response.AdditionalData.TotalRefund || ""),
                        n("#total-acceptnbalance-footer").text(i.response.AdditionalData.TotalAcceptAndBalance || ""));
                        n(".js-update-workcover-report-totals").length && i.response.AdditionalData && (n("#workcover-paid-footer").text(i.response.AdditionalData.TotalPaid || ""),
                        n("#workcover-owing-footer").text(i.response.AdditionalData.TotalOwing || ""));
                        o = this.filter() && this.filter().filters && this.filter().filters.length;
                        n("#ReportTypeId").val() == t.Items && n("#ItemNumberTypeMbs")[0].checked == !1 && n("#ItemNumberTypeNonMbs")[0].checked == !1 && n("#ItemNumberTypeStock")[0].checked == !1 && n("#AlliedHealthItems")[0].checked == !1 ? rt() : b(i.response && (i.response.Data.length || o));
                        r.spinner(!1)
                    }),
                    e.dataSource.bind("error", function() {
                        n(".js-no-data").show();
                        n(".js-report-grid-area").hide();
                        r.spinner(!1)
                    }),
                    e.dataSource.read())) : (h = n(".js-report-grid").data("kendoGrid"),
                    b(h),
                    r.spinner(!1)),
                    v()) : r.spinner(!1)
                },
                error: function() {
                    r.spinner(!1);
                    siberia.validation.showFormNetworkError(i)
                }
            })
        }
        function b(t) {
            t ? (n(".js-no-data").hide(),
            n(".js-no-data .notification-item").hide(),
            n(".js-report-grid-area").show(),
            n(".js-charts-area").show()) : (n(".js-no-data").show(),
            n(".js-no-data .notification-item").show(),
            n(".js-report-grid-area").hide(),
            n(".js-charts-area").hide())
        }
        function rt() {
            n(".js-no-data-item-number").show();
            n(".js-no-data-item-number .notification-item").show();
            n(".js-report-grid-area").hide();
            n(".js-charts-area").hide()
        }
        var c = n(e), l;
        if (c.length != 0) {
            if (r = c.closest("form"),
            y(),
            p(c),
            siberia.reportDateFilter.init({
                containerSelector: e
            }),
            u = n("#ReportTypeId").data("kendoDropDownList"),
            u != null) {
                u.select(0);
                n("#ReportTypeId").on("change synteticChange", h);
                h()
            }
            n(".js-get-report").click(function(t) {
                var i = n(this);
                t.preventDefault();
                i.blur();
                w(i.closest("form"))
            });
            n(".js-export-report-to-excel").click(function(n) {
                if (siberia.validation.clearValidationErrors(r),
                u.value() == t.WorkCoverInvoicesReport) {
                    var f = i("#InsuranceCompanyIds", []);
                    f.length !== 1 && (n.preventDefault(),
                    siberia.validation.showFormValidationError(r, text.reports.validation.insuranceCompanyRequired))
                }
            });
            n(".js-reset").click(function(t) {
                var i = n("#ReportTypeId").data("kendoDropDownList");
                i && i.value(0);
                s();
                n("#ReportTypeId").trigger("change");
                o();
                t.preventDefault()
            });
            l = n(".js-get-report.js-auto-load-report").closest("form");
            l.length && w(l)
        }
    }
    function i(t, i) {
        var r = n(t).data("kendoMultiSelect");
        return r ? r.value() : i
    }
    function c(t, i) {
        var r = n(t).data("kendoMultiSelect");
        r && r.options && (r.options.maxSelectedItems = i,
        i && r.value() && r.value().length > i && r.value([]))
    }
    function b() {
        var i = {
            From: n("#From").data("kendoDatePicker").value(),
            To: n("#To").data("kendoDatePicker").value()
        }
          , r = n("#ReportTypeId").data("kendoDropDownList");
        return r && r.value() == t.DailyTransactions && (i.To = i.From),
        i
    }
    function k() {
        var t = n("#AsAt").data("kendoDatePicker");
        return t ? t.value() : ""
    }
    siberia.ensureObject("siberia.reports");
    var r, e = ".js-report-filter", u, l = n(".js-all-type-of-patient"), f = 0, t = {
        None: 0,
        ReceiptBilling: 1,
        Items: 2,
        CancellationReasons: 4,
        UnpaidInvoices: 8,
        DailyTransactions: 16,
        WeeklyTransactions: 32,
        MonthlyTransactions: 64,
        Appointments: 128,
        ReferrersOld: 256,
        AccountHolders: 512,
        AccountHoldersDebt: 1024,
        DepositHistory: 2048,
        UninvoicedAppointments: 4096,
        LabRequestsWithNoResults: 8192,
        UnlinkedQuotes: 16384,
        GstInvoiceItems: 32768,
        PatientsWithNearEDD: 65536,
        UsualProviderAndGP: 131072,
        Referrers: 262144,
        WorkcoverClaimsReport: 524288,
        PendingReferrals: 1048576,
        AdjustmentPayment: 2097152,
        RefundReport: 4194304,
        ItemsPayments: 8388608,
        WorkCoverInvoicesReport: 16777216,
        Transactions: this.DailyTransactions | this.WeeklyTransactions | this.MonthlyTransactions
    };
    siberia.reports.itemsPaymentsGridRequestEnd = function(t) {
        t.response && t.response.AdditionalData && (n("#total-items-count-footer").text(t.response.AdditionalData.TotalCount || ""),
        n("#total-paid-amount-footer").text(t.response.AdditionalData.TotalPaidAmount || ""),
        n("#total-refund-amount-footer").text(t.response.AdditionalData.TotalRefundAmount || ""))
    }
    ;
    siberia.reports.onLoadingItemNumbers = function() {
        return {
            text: n("#ItemNumbers").data("kendoMultiSelect").input.val()
        }
    }
    ;
    siberia.reports.getReportGridFilter = function() {
        var t = b()
          , r = n('input[name="ItemNumberType"]:checked').val()
          , u = n("#ItemNumbers").data("kendoMultiSelect") ? n("#ItemNumbers").data("kendoMultiSelect").value() : [];
        return {
            DoctorsIds: i("#DoctorsIds", []),
            LocationsIds: i("#LocationsIds", []),
            ProcedureTypeIds: i("#ProcedureTypeIds", []),
            UIPaymentTypeIds: i("#UIPaymentTypeIds", []),
            From: t.From,
            To: t.To,
            TypeOfPatient: n('input[name="TypeOfPatient"]:checked').val(),
            ItemNumberType: r,
            ItemNumbers: u,
            ItemNumberTypeMbs: n("#ItemNumberTypeMbs").prop("checked"),
            ItemNumberTypeNonMbs: n("#ItemNumberTypeNonMbs").prop("checked"),
            ItemNumberTypeStock: n("#ItemNumberTypeStock").prop("checked"),
            AlliedHealthItems: n("#AlliedHealthItems").prop("checked"),
            ExcludeItemNumbers: n("#ExcludeItemNumbers").prop("checked"),
            ContactIds: i("#ContactIds", []),
            SpecialtyIds: i("#SpecialtyIds", []),
            ShowLocationNullResults: n('input[name="ShowLocationNullResults"]:checked').val(),
            Unlinked: n('input[name="Unlinked"]:checked').val(),
            Finalized: n('input[name="Finalized"]:checked').val(),
            DateRangeOption: n(".js-date-range-option").val(),
            InjuryIllnessIds: i("#InjuryIllnessIds", []),
            InsuranceCompanyIds: i("#InsuranceCompanyIds", []),
            OpenClaim: n("#OpenClaim").prop("checked"),
            ClosedClaim: n("#ClosedClaim").prop("checked"),
            AsAt: k()
        }
    }
    ;
    siberia.reports.referrersOnDataBoundReferringGpDetails = function(t) {
        for (var f, e, o, s, u = 0, h = "#" + n(t.sender.element).closest("div")[0].id, c = n(h).data("kendoGrid").dataSource, i = c.data(), l = i.length, r = 0; r < i.length; r++)
            f = i[r],
            e = f.IncomeGenerated,
            u += e;
        o = n(t.sender.element).find(".referrersPatientsCount");
        n(o).text("" + l);
        s = n(t.sender.element).find(".referrersPatientsIncome");
        n(s).text("$" + u.toFixed(2))
    }
    ;
    n(function() {
        w()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.procedureManagementReport");
    siberia.procedureManagementReport = function() {
        function a() {
            n(".js-get-procedure-management-report").on("click", rt);
            n(".js-print-theatre-list").on("click", w);
            v();
            var i = t();
            if (i) {
                i.dataSource.bind("requestEnd", it);
                i.dataSource.bind("error", tt);
                i.element.on("click", ".js-client-grid-delete", p);
                i.element.on("click", ".js-client-grid-delete-appointment", et);
                i.element.on("click", ".js-client-grid-appointment-history", g);
                i.element.on("click", ".js-client-grid-send-sms", nt);
                i.element.on("click", ".js-create-invoice", y)
            }
            siberia.common.initWarningConfrimarionEvent("#DeleteApptWindow", "#confirm-and-force-save-changes", "#DeleteApptWindow [name$=ForceSave]", ".js-delete-appointment")
        }
        function v() {
            var t = n("#FromDate")
              , i = n("#ToDate");
            t.length > 0 && i.length > 0 && (t.data("kendoDatePicker").bind("change", f),
            i.data("kendoDatePicker").bind("change", f))
        }
        function f() {
            var t = n(".js-print-theatre-list"), i;
            t.length > 0 && (i = e("#FromDate", "#ToDate"),
            t.toggle(i))
        }
        function e(t, i) {
            var f = n(t).data("kendoDatePicker"), e = n(i).data("kendoDatePicker"), r, u;
            return f && e ? (r = f.value(),
            u = e.value(),
            r == null || u == null) ? !1 : r && u && r.valueOf() === u.valueOf() : !1
        }
        function r(i) {
            return t().dataItem(n(i.currentTarget).closest("tr"))
        }
        function o(n) {
            var t = r(n);
            return {
                PatientId: t.PatientId,
                PatientFullName: t.PatientFullName,
                HighlightedFullName: t.PatientFullName,
                PatientDateOfBirth: t.PatientDateOfBirth,
                HighlightedDateOfBirth: t.HighlightedDateOfBirth,
                PatientNumber: t.PatientNumber,
                HighlightedPatientNumber: t.HighlightedPatientNumber,
                PatientIsInactive: t.PatientIsInactive
            }
        }
        function y(t) {
            t.preventDefault();
            siberia.invoicePopup.initInvoicePopup(n(t.currentTarget).attr("href"), !0)
        }
        function p(i) {
            i.preventDefault();
            var u = r(i);
            siberia.popup.create("#fee-estimate-cancellation-popup", {
                windowOptions: {
                    title: text.global.titles.removeFromList,
                    width: "450"
                },
                clear: function() {
                    n("#FeeEstimatePatientName").text(u.PatientFullName);
                    n("#FeeEstimateName").text(u.Name);
                    n("#CancelFeeEstimate_FeeEstimateId").val(u.Id);
                    n("#CancelFeeEstimate_ReasonId").data("kendoDropDownList").value("");
                    n("#CancelFeeEstimate_Notes").val("")
                },
                success: function() {
                    t().dataSource.read()
                }
            })
        }
        function w() {
            siberia.popup.create("#new-operating-list-popup", {
                windowOptions: {
                    title: text.global.titles.addOperatingList,
                    width: "500"
                },
                clear: d,
                success: function(n) {
                    b(n, this.cancel)
                }
            })
        }
        function b(t, i) {
            var r = null
              , f = function() {
                r && r.close()
            }
              , u = function() {
                f();
                var t = n("#operating-lists-grid").data("kendoGrid");
                t && t.dataSource.read()
            };
            siberia.popup.create("#operating-list-popup", {
                submitUrlAttr: "data-submit-url",
                windowOptions: {
                    title: text.global.titles.popupOperatingList,
                    width: "800"
                },
                clear: function() {
                    k(t)
                },
                preSubmit: function() {
                    r = window.open("about:blank", "_blank")
                },
                success: function(n) {
                    r && n && (r.location.href = siberia.config.urls.showFile({
                        fileguid: n
                    }))
                },
                cancel: function() {
                    i && i()
                },
                ajaxError: u,
                error: u
            })
        }
        function k(t) {
            var r;
            n("#OperatingList_Id").val(t.Id);
            n("#OperatingList_LocationId").val(t.LocationId);
            n("#OperatingList_DoctorId").val(t.DoctorId);
            n("#OperatingList_Date").val(t.Date);
            n("#OperatingList_StartTime").val(t.StartTime);
            n("#OperatingList_EndTime").val(t.EndTime);
            r = kendo.template(n("#OperatingListHeaderTemplate").html());
            n("#OperatingListHeader").html(r(t));
            var i = n("#procedure-list-grid")
              , u = i.data("kendoGrid")
              , f = u.dataSource;
            i.off("click", ".js-toggle-detail-section");
            f.data([]);
            n.each(t.Procedures, function() {
                f.add(this)
            });
            i.on("click", ".js-toggle-detail-section", function(t) {
                var i = u.dataItem(n(t.currentTarget));
                i.set("ShowDetails", !i.ShowDetails)
            });
            siberia.grid.initClientGrid({
                gridSelector: "#procedure-list-grid",
                addSelector: null,
                editSelector: null,
                duplicateSelector: null,
                deleteSelector: null,
                saveAndCloseSelector: null
            })
        }
        function d() {
            function h() {
                var u = o.every(function(n) {
                    return n.val() !== "" && n.val() !== null
                }), n, t;
                u && (n = i.data("kendoMultiSelect").value()[0],
                t = r.data("kendoMultiSelect").value()[0],
                c(n, t, e.val()))
            }
            function c(t, i, r) {
                var e = n(".js-global-spinner-container"), o;
                e.spinner(!0);
                o = n("#new-operating-list-popup").data("get-startendtime");
                n.ajax({
                    type: "POST",
                    url: o,
                    data: {
                        LocationId: t,
                        DoctorId: i,
                        Date: r
                    },
                    success: function(n) {
                        u.value(n.StartTime);
                        f.value(n.EndTime)
                    },
                    error: a(),
                    complete: function() {
                        e.spinner(!1)
                    }
                })
            }
            function a() {
                u.value("00:00");
                f.value("23:59")
            }
            var i = n("#NewOperatingList_LocationId"), r = n("#NewOperatingList_DoctorId"), e = n("#NewOperatingList_Date"), o = [i, r, e], t = l(), s, u, f;
            t.LocationsIds != null && t.LocationsIds.length > 0 ? i.data("kendoMultiSelect").value([t.LocationsIds[0]]) : siberia.multiSelect.clearValue("#NewOperatingList_LocationId");
            t.DoctorsIds.length > 0 ? r.data("kendoMultiSelect").value([t.DoctorsIds[0]]) : siberia.multiSelect.clearValue("#NewOperatingList_DoctorId");
            t.FromDate != null && (s = n("#NewOperatingList_Date").data("kendoDatePicker"),
            s.value(t.FromDate));
            u = n("#NewOperatingList_StartTime").data("kendoTimePicker");
            f = n("#NewOperatingList_EndTime").data("kendoTimePicker");
            h();
            o.forEach(function(n) {
                n.on("change", h)
            })
        }
        function g(n) {
            n.preventDefault();
            var t = o(n);
            t.CanEditPatient = !1;
            siberia.appointmentsHistory.initAppointmentsHistoryPopup(t)
        }
        function nt(t) {
            t.preventDefault();
            var i = o(t)
              , r = {
                patients: [i]
            }
              , u = n(t.currentTarget).attr("data-send-sms-url");
            siberia.sms.showPopup(r, u, null, !0)
        }
        function tt() {
            s(!1)
        }
        function it(i) {
            var r = i.response && i.response.Total > 0, u;
            if (r && i.response.Data.length === 0) {
                h();
                return
            }
            u = i.response.AdditionalData.FeeTotal;
            s(r);
            t().one("dataBound", function() {
                n(".js-procedure-management-report-grid-container .js-fee-total").text(u)
            })
        }
        function s(t) {
            n(".js-no-data").toggle(!t);
            n(".js-no-data .notification-item").toggle(!t);
            n(".js-procedure-management-report-grid-container").toggle(t);
            u.spinner(!1)
        }
        function rt(t) {
            t.preventDefault();
            n(".js-incomplete-procedures-message").hide();
            h()
        }
        function h() {
            var n = t();
            n && (u.spinner(!0),
            n.dataSource.page(1))
        }
        function i(t) {
            var i = n(t).data("kendoMultiSelect");
            return i ? i.value() : []
        }
        function c(t) {
            var i = n(t).data("kendoDatePicker");
            return i ? i.value() : null
        }
        function t() {
            return n(".js-procedure-management-report-grid").data("kendoGrid")
        }
        function ut() {
            return {
                DoctorsIds: i("#DoctorsIds"),
                LocationsIds: i("#LocationsIds"),
                ProcedureTypesIds: i("#ProcedureTypesIds")
            }
        }
        function l() {
            return {
                DoctorsIds: i("#DoctorsIds"),
                LocationsIds: i("#LocationsIds"),
                FromDate: c("#FromDate"),
                ToDate: c("#ToDate")
            }
        }
        function ft() {
            var n = t();
            n.showColumn("Time");
            e("#FromDate", "#ToDate") || n.hideColumn("Time")
        }
        function et(i) {
            var u = r(i);
            siberia.popup.create("#DeleteApptWindow", {
                windowOptions: {
                    title: text.global.titles.deleteAppointment
                },
                clear: function() {
                    n("#DeleteAppointment_AppointmentId").val(0);
                    n("#DeleteAppointment_PatientName").text(u.PatientFullName);
                    n("#DeleteAppointment_RecurrenceId").val(u.AppointmentId);
                    n("#DeleteAppointment_CancellationReasonId").data("kendoDropDownList").select(0);
                    n("#DeleteAppointment_NeedKeepOnScheduler").prop("checked", !1);
                    n("#NeedKeepOnSchedulerCheckBoxContainer").show();
                    n("#DeleteAppointment_Notes").val("");
                    n("#DeleteAppointment_ForceSave").val(!1)
                },
                success: function() {
                    t().dataSource.read()
                }
            })
        }
        var u = n(".js-global-spinner-container");
        return {
            init: a,
            getPendingFeeEstimateFilter: ut,
            getBookedProceduresFilter: l,
            onBookedProceduresDataBound: ft
        }
    }();
    n(document).ready(function() {
        siberia.procedureManagementReport.init()
    })
}(jQuery),
function(n) {
    function t() {
        n("#deleted-items-list-grid").length !== 0 && siberia.grid.initClientGrid({
            gridSelector: "#deleted-items-list-grid",
            editSelector: ".js-client-grid-restore",
            editAction: i
        })
    }
    function i(t) {
        if (confirm(text.global.confirms.restoreItemGeneric)) {
            var i = n("#deleted-items-list-grid")
              , r = i.attr("data-restore-item-url");
            n.ajax({
                type: "POST",
                url: r,
                contentType: "application/json",
                data: JSON.stringify(t),
                success: function(n) {
                    siberia.validation.processGridActionAjaxErrors(n.Errors, !0) && i.data("kendoGrid").dataSource.remove(t)
                }
            })
        }
    }
    n(document).ready(function() {
        t()
    })
}(jQuery),
function(n) {
    function e() {
        (t = n("#custom-items-grid"),
        i = n("#BillingTabs").data("kendoTabStrip"),
        i && i.bind("select", r),
        t.length !== 0) && siberia.grid.initClientGrid({
            gridSelector: "#custom-items-grid",
            saveAndCloseSelector: null,
            saveSelector: null,
            addAction: o,
            editAction: s,
            deleteAction: h,
            isCustomEditing: !0
        })
    }
    function r(t) {
        (t && t.contentElement && t.contentElement.id) === "BillingTabs-3" && (n(window).trigger("rc-allied-health-render"),
        i.unbind("select", r))
    }
    function o(n) {
        siberia.popup.create("#custom-items-popup", {
            submitText: text.global.labels.create,
            windowOptions: {
                title: text.global.titles.addNonMBSItem,
                width: "610"
            },
            clear: function() {
                u(n.item)
            },
            success: function() {
                f()
            },
            cancel: function() {
                n.cancel()
            }
        })
    }
    function s(n) {
        siberia.popup.create("#custom-items-popup", {
            submitText: text.global.labels.update,
            windowOptions: {
                title: text.global.titles.editNonMBSItem,
                width: "610"
            },
            clear: function() {
                u(n)
            },
            success: function() {
                f()
            }
        })
    }
    function u(t) {
        n("#CustomItem_Id").val(t.Id);
        n("#CustomItem_ItemNumber").val(t.ItemNumber);
        n("#CustomItem_OldItemNumber").val(t.ItemNumber);
        n("#CustomItem_Description").val(t.Description);
        n("#CustomItem_PracticeFee").data("kendoNumericTextBox").value(t.PracticeFee)
    }
    function h() {
        t.data("kendoGrid").dataSource.sync()
    }
    function f() {
        t.data("kendoGrid").dataSource.read()
    }
    var t, i;
    n(document).ready(function() {
        e()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.scanning");
    siberia.scanning = function() {
        function a() {
            var rt, a, it, ut, ft, et;
            if (o.keypress(function(n) {
                n.which === 13 && w()
            }),
            rt = t(),
            rt) {
                i = siberia.infiniteScroll.create({
                    listViewSelector: "#scanned-documents-list",
                    tabWrapper: n(".js-scanned-documents-tab-wrapper"),
                    onItemSelected: tt,
                    getOlderItemsUrl: u.data("get-older-items-url"),
                    scrollWrapper: u.closest(".js-scroll-wrapper"),
                    doNotResizeViewer: !0,
                    getRequestAdditionalData: h
                });
                rt.bind("dataBound", function() {
                    n(".scanned-documents-empty-message").toggle(this.dataSource.data().length === 0);
                    c(null)
                });
                n(r).on("load", function() {
                    if (n(this).attr("src")) {
                        var t = n(".js-scanned-preview.js-scroll-wrapper");
                        t.spinner(!1)
                    }
                });
                a = n("#PatientId").data("kendoMultiSelect");
                a && (a.bind("change", function() {
                    l(this)
                }),
                l(a));
                it = n("#DocumentTypeId").data("kendoDropDownList");
                it && (it.bind("change", function() {
                    e(this)
                }),
                e(it));
                s.bind("change", function(n) {
                    d(n)
                });
                ut = n("#ReferralId").data("kendoMultiSelect");
                ut.bind("filtering", function(n) {
                    n.sender && n.sender.dataSource.data().length == 0 && n.preventDefault()
                });
                ut.bind("change", function(n) {
                    f(n.sender)
                });
                n(".js-link-scanned-document").click(g);
                n(".js-delete-scanned-document").click(nt);
                n("body").on("click", ".js-new-patient-referral", function(t) {
                    t.preventDefault();
                    n(this).blur();
                    siberia.referral.popup.openPopup(text.global.titles.addReferral, text.global.labels.create, b, k)
                });
                n(siberia.popup).bind("activated", y);
                n(siberia.popup).bind("closed", p);
                siberia.kendoTooltipWrapper("#scanned-documents-list", {
                    cssClass: "attached-by-patient-tooltip-content"
                });
                ft = v();
                et = ft ? "left" : undefined;
                siberia.kendoTooltipWrapper(".scanned-document-filter-types .k-dropdown-wrap", {
                    cssClass: "attached-by-patient-tooltip-content",
                    position: et
                });
                siberia.kendoTooltipWrapper("#ScannedDocumentFilterTypeId-list", {
                    cssClass: "attached-by-patient-tooltip-content"
                })
            }
        }
        function v() {
            return /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent)
        }
        function t() {
            return kendo.widgetInstance(u)
        }
        function h() {
            return {
                filterData: {
                    fileNamePart: o.val(),
                    typeFilter: s.val()
                },
                skip: t().dataSource.data().length
            }
        }
        function c(t) {
            var i = t != null
              , u = n("#Description")
              , f = kendo.widgetInstance(n("#PatientId"))
              , o = n("#FileName")
              , s = kendo.widgetInstance(n("#DocumentDate"))
              , r = kendo.widgetInstance(n("#DocumentTypeId"))
              , h = n("#DocumentId");
            u.enable(i);
            f.enable(i);
            n(".js-patient-new, .js-delete-scanned-document").toggleClass("btn-disabled", !i);
            o.enable(i);
            s.enable(i);
            r.enable(i);
            u.val(i ? t.FileDescription : "");
            f.value(i ? t.PatientId : "");
            o.val(i ? t.FileName : "");
            s.value(i ? t.RegistrationDate : "");
            r.value(i ? t.DocumentTypeId : "");
            e(r);
            h.val(i ? t.Id : "");
            i && t.Patient ? siberia.multiSelect.attachValue("#PatientId", [t.Patient], "PatientId", !0) : siberia.multiSelect.attachValue("#PatientId", [], "PatientId", !0);
            i && t.Warning ? siberia.warnings.container.showWarningWithMessage(n(".js-scanned-document-warning"), ".notification-item__text", t.Warning) : siberia.warnings.container.hideWarning(n(".js-scanned-document-warning"), ".notification-item__text")
        }
        function f(t) {
            var i = t.dataItem();
            siberia.multiSelect.isEnabled(t) && i && !i.IsValid ? (n(".js-expired-referral-warning").show(),
            n(".js-expired-referral-warning .notification-item").show()) : (n(".js-expired-referral-warning").hide(),
            n(".js-expired-referral-warning .notification-item").hide())
        }
        function y() {
            n(r).hide()
        }
        function p() {
            n(r).show()
        }
        function w() {
            var n = t();
            n.dataSource.read()
        }
        function b() {
            var t = n("#PatientId").data("kendoMultiSelect"), i, r;
            t && t.value().length && n("#Referral_PatientId").val(t.value()[0]);
            i = n("#Referral_DateOfReferral").data("kendoDatePicker");
            i && (r = siberia.common.currentLocationDate(),
            i.value(r))
        }
        function k(t) {
            var i = n("#ReferralId").data("kendoMultiSelect"), u, r;
            i && (u = {
                ContactFullName: t.Name,
                IsValid: t.IsValid,
                ReferralId: t.Id
            },
            r = i.dataSource.data().slice(),
            r.push(u),
            i.dataSource.data(r),
            i.value([t.Id]),
            f(i))
        }
        function e(t) {
            var i = t.dataItem(), r, u;
            n("#referral-container").toggle(i && i.CanAttachReferral);
            r = n("#PatientId").data("kendoMultiSelect");
            u = n("#ReferralId").data("kendoMultiSelect");
            u.enable(r && r.value().length > 0 && i && i.CanAttachReferral);
            f(u)
        }
        function d() {
            t().dataSource.read()
        }
        function l(t) {
            var r = t.value()
              , i = n("#ReferralId").data("kendoMultiSelect");
            r.length === 0 ? (i.value([]),
            i.input.val(""),
            siberia.multiSelect.attachValue("#ReferralId", [], "Id", !0)) : i.dataSource.read();
            i.enable(r.length > 0);
            n(".js-new-patient-referral, .js-link-scanned-document").toggleClass("btn-disabled", r.length === 0)
        }
        function g(t) {
            t.preventDefault();
            n(this).blur();
            n(".js-global-spinner-container").spinner(!0);
            var r = n("#link-scanned-document-form");
            r.length > 0 && r.ajaxSubmit({
                success: function(n) {
                    siberia.validation.processAjaxErrors(r, n.Errors) && (n.status && n.status !== "OK" && alert(n.status),
                    i.removeSelectedItem())
                },
                error: function() {
                    siberia.validation.showFormNetworkError(r)
                },
                complete: function() {
                    n(".js-global-spinner-container").spinner(!1)
                }
            })
        }
        function nt(r) {
            var u, f, s, e, o;
            r.preventDefault();
            n(this).blur();
            u = t();
            f = u.select();
            f && confirm(text.global.confirms.deleteDocument) && (s = u.dataSource.getByUid(f.data("uid")).Id,
            e = n("#scanned-documents-container").data("delete-document-url"),
            e && (o = n("#link-scanned-document-form"),
            n(".js-global-spinner-container").spinner(!0),
            n.ajax({
                type: "POST",
                url: e,
                contentType: "application/json",
                data: JSON.stringify({
                    Id: s
                }),
                success: function(n) {
                    siberia.validation.processAjaxErrors(o, n.Errors) && i.removeSelectedItem()
                },
                error: function() {
                    siberia.validation.showFormNetworkError(o)
                },
                complete: function() {
                    n(".js-global-spinner-container").spinner(!1)
                }
            })))
        }
        function tt(t) {
            c(t);
            siberia.documentViewer.previewFile(n(".js-scanned-preview"), t.CanBePreviewed ? t.PreviewUrl : "");
            var i = n("#link-scanned-document-form");
            siberia.validation.clearValidationErrors(i)
        }
        function it() {
            var i = null
              , t = n("#PatientId").data("kendoMultiSelect");
            return t && t.value().length && (i = t.value()[0]),
            {
                patientId: i
            }
        }
        var i, r = "#document-preview-iframe", o = n(".js-search-filter"), u = n("#scanned-documents-list"), s = n("#ScannedDocumentFilterTypeId");
        return {
            init: a,
            onLoadingPatientReferrals: it,
            getFilter: h
        }
    }();
    n(document).ready(function() {
        siberia.scanning.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.securemessages");
    siberia.securemessages = function() {
        function k() {
            var i = f(), o, r, u;
            if (i) {
                i.bind("change", yt);
                o = i.element.children().first();
                o && i.select(o);
                n(c).on("load", function() {
                    if (n(this).attr("src")) {
                        var i = n(".js-message-preview.js-scroll-wrapper");
                        i.spinner(!1);
                        t.isMessaageLoading = !1
                    }
                });
                n("#received-secure-messages-list").on("scroll", vt);
                r = n("#PatientId").data("kendoMultiSelect");
                r && (r.bind("change", function() {
                    e(this)
                }),
                e(r));
                u = n("#DoctorId").data("kendoMultiSelect");
                u && (u.bind("change", function() {
                    e(this)
                }),
                e(u));
                n(".js-link-message").click(ct);
                n(".js-delete-message").click(p);
                n("#received-secure-messages-list").on("click", ".js-accept-received-message", y);
                n("#received-secure-messages-list").on("click", ".js-create-etask", w);
                gt();
                a();
                d()
            }
        }
        function d() {
            n(".js-link-patient").click(rt);
            n(".js-accept-received-message").click(y);
            n(".js-new-patient-btn").click(it);
            n("#btnReqularAppointment").click(ft);
            n("#appointment-history-button").click(ut);
            n(".js-send-sms").click(lt);
            n(".js-todo-btn").click(w);
            n(".js-print-result-btn").click(at);
            n(".js-delete-btn").click(p)
        }
        function s(n) {
            n || (n = i());
            g(n);
            nt(n);
            a(n)
        }
        function a(t) {
            var i = !t
              , r = !t || !t.PatientId;
            n(".js-link-patient").toggleClass("btn-disabled", i);
            n(".js-accept-received-message").toggleClass("btn-disabled", r);
            n(".js-new-patient-btn").toggleClass("btn-disabled", i);
            n(".js-quick-consult").toggleClass("btn-disabled", i || r);
            n("#btnReqularAppointment").toggleClass("btn-disabled", i || r);
            n("#appointment-history-button").toggleClass("btn-disabled", i || r);
            n(".js-send-sms").toggleClass("btn-disabled", r);
            n(".js-todo-btn").toggleClass("btn-disabled", r);
            n(".js-print-result-btn").toggleClass("btn-disabled", i);
            n(".js-delete-btn").toggleClass("btn-disabled", i)
        }
        function g(t) {
            var i = n(".js-link-patient");
            i.attr("data-entity-id", t ? t.MessageId : "");
            i.attr("data-patient-first-name", t ? t.PatientFirstName : "");
            i.attr("data-patient-last-name", t ? t.PatientLastName : "");
            i.attr("data-patient-date-of-birth", t ? t.PatientDob : "")
        }
        function nt(t) {
            var i = n(".js-quick-consult");
            i.attr("data-patient-id", t ? t.PatientId : "")
        }
        function f() {
            return kendo.widgetInstance(n("#received-secure-messages-list"))
        }
        function i() {
            var n = f();
            return n.dataItem(n.select())
        }
        function v(n) {
            var t = f()
              , i = t.dataItems().find(function(t) {
                return t.MessageId === n.MessageId
            });
            t.select(t.element.find('[data-uid="' + i.uid + '"]'))
        }
        function tt() {
            var n = f()
              , r = i();
            n.dataSource.read().then(function() {
                v(r)
            });
            t.canContinueLoading = !0
        }
        function e(t) {
            var i = f()
              , r = i.select()
              , u = t.value();
            n(".js-link-message").toggleClass("btn-disabled", u.length === 0 || r.length === 0)
        }
        function it(n) {
            n.preventDefault();
            var t = i()
              , r = {
                name: t.PatientFirstName,
                surname: t.PatientLastName,
                sex: t.PatientSex,
                phone: t.PatientPhone,
                dateOfBirth: t.PatientDob,
                salutationId: t.PatientSalutationId
            }
              , u = {
                patientDetails: r,
                action: siberia.config.urls.createPatientAndLinkMessage({
                    messageId: t.MessageId
                }),
                successCallback: et
            };
            siberia.patientInfoPopup.openPatientPopupWindow(text.global.titles.addPatient, u)
        }
        function rt(n) {
            n.preventDefault();
            siberia.linkPatientPopup.init(ot)
        }
        function ut(n) {
            n.preventDefault();
            var r = null
              , t = i();
            t && (r = {
                CanEditPatient: !0,
                PatientId: t.PatientId,
                PatientFullName: t.PatientFullName,
                PatientDateOfBirth: t.PatientDob,
                PatientIsInactive: t.PatientIsInactive
            });
            siberia.appointmentsHistory.initAppointmentsHistoryPopup(r)
        }
        function ft(n) {
            n.preventDefault();
            var t = i();
            window.open(siberia.config.urls.createNewAppointment({
                patientId: t.PatientId,
                doctorId: t.DoctorId
            }), "_blank")
        }
        function et(t) {
            siberia.validation.processAjaxErrors(n(".js-error-message"), t.Errors) && (tt(),
            s())
        }
        function ot(n) {
            var t = i();
            ht(t, n)
        }
        function st(n, t) {
            n.set("PatientId", t.Id);
            n.set("PatientDob", t.DateOfBirthStr);
            n.set("PatientFirstName", t.FirstName);
            n.set("PatientLastName", t.LastName);
            n.set("PatientFullName", t.FirstName + " " + t.LastName);
            n.set("PatientPhone", t.Phone);
            n.set("PatientIsInactive", t.IsInactive);
            n.set("PatientSex", t.Sex);
            n.set("PatientSalutationId", t.SalutationId);
            v(n);
            s(n)
        }
        function ht(t, i) {
            if (n(this).blur(),
            t && i) {
                var r = n("#secure-messages-container").data("link-patient-url");
                r && (n(".js-global-spinner-container").spinner(!0),
                n.ajax({
                    type: "POST",
                    url: r,
                    contentType: "application/json",
                    data: JSON.stringify({
                        messageId: t.MessageId,
                        patientId: i.Id
                    }),
                    success: function(r) {
                        siberia.validation.processAjaxErrors(n("#secure-messages-container"), r.Errors) && st(t, i)
                    },
                    error: function() {
                        siberia.validation.showFormNetworkError(n("#secure-messages-container"))
                    },
                    complete: function() {
                        n(".js-global-spinner-container").spinner(!1)
                    }
                }))
            }
        }
        function ct(t) {
            t.preventDefault();
            n(this).blur();
            n(".js-global-spinner-container").spinner(!0);
            var i = n("#link-message-form");
            i.length > 0 && i.ajaxSubmit({
                success: function(t) {
                    siberia.validation.processAjaxErrors(n("#secure-messages-container"), t.Errors) && (t.status && t.status !== "OK" && alert(t.status),
                    l())
                },
                error: function() {
                    siberia.validation.showFormNetworkError(n("#secure-messages-container"))
                },
                complete: function() {
                    n(".js-global-spinner-container").spinner(!1)
                }
            })
        }
        function y(t) {
            var r, u;
            t.preventDefault();
            n(this).blur();
            r = i();
            r && confirm(text.global.confirms.acceptSMMessage) && (u = n("#secure-messages-container").data("accept-message-url"),
            u && (n(".js-global-spinner-container").spinner(!0),
            n.ajax({
                type: "POST",
                url: u,
                contentType: "application/json",
                data: JSON.stringify({
                    messageId: r.MessageId,
                    patientId: r.PatientId
                }),
                success: function(t) {
                    siberia.validation.processAjaxErrors(n("#secure-messages-container"), t.Errors) && (l(),
                    s())
                },
                error: function() {
                    siberia.validation.showFormNetworkError(n("#secure-messages-container"))
                },
                complete: function() {
                    n(".js-global-spinner-container").spinner(!1)
                }
            })))
        }
        function p(t) {
            var r, u, f;
            t.preventDefault();
            n(this).blur();
            r = i();
            r && confirm(text.global.confirms.deleteMessage) && (u = n("#secure-messages-container").data("delete-message-url"),
            u && (f = n("#link-message-form"),
            n(".js-global-spinner-container").spinner(!0),
            n.ajax({
                type: "POST",
                url: u,
                contentType: "application/json",
                data: JSON.stringify({
                    messageId: r.MessageId
                }),
                success: function(n) {
                    siberia.validation.processAjaxErrors(f, n.Errors) && l()
                },
                error: function() {
                    siberia.validation.showFormNetworkError(f)
                },
                complete: function() {
                    n(".js-global-spinner-container").spinner(!1)
                }
            })))
        }
        function l() {
            var u = null, t = f(), r, i, e;
            t && (r = t.select(),
            r && (i = r.next('div[role="option"]'),
            i.length === 0 && (i = r.prev('div[role="option"]')),
            i && i.length === 1 && (u = t.dataSource.getByUid(i.data("uid")).MessageId),
            e = t.dataSource.view()[r.index()],
            t.dataSource.remove(e)),
            u ? n.each(t.element.children(), function(n, i) {
                return t.dataSource.getByUid(i.dataset.uid).MessageId === u ? (t.select(i),
                !1) : !0
            }) : n(c).attr("src", ""));
            var o = n("#PatientId").data("kendoMultiSelect")
              , s = n("#DoctorId").data("kendoMultiSelect")
              , h = !(u != null && o && o.value().length > 0 || s && s.value().length > 0);
            n(".js-link-message").toggleClass("btn-disabled", h)
        }
        function w(t) {
            var r, u;
            t.preventDefault();
            n(this).blur();
            r = i();
            r && (u = {
                Id: r.PatientId,
                FullName: r.PatientFullName,
                DateOfBirth: r.PatientDob,
                UserId: r.DoctorId
            },
            siberia.todoList.addToDoForPatient(u, text.global.labels.secureMessage, ""))
        }
        function lt(t) {
            t.preventDefault();
            var u = n(t.currentTarget)
              , f = u.attr("data-send-sms-url")
              , r = i()
              , e = {
                patients: [{
                    PatientId: r.PatientId,
                    PatientFullName: r.PatientFullName,
                    HighlightedFullName: r.PatientFullName,
                    PatientDateOfBirth: r.PatientDob,
                    HighlightedDateOfBirth: r.PatientDob,
                    PatientNumber: r.PatientNumber,
                    HighlightedPatientNumber: r.PatientNumber,
                    PatientIsInactive: r.PatientIsInactive
                }]
            };
            siberia.sms.showPopup(e, f, null, !0)
        }
        function at() {
            var n = i();
            window.open(n.PrintUrl, "_blank")
        }
        function vt() {
            if (!t.isLoading) {
                var i = n(this).data("kendoListView")
                  , r = i.items().last();
                r.length !== 0 && i.wrapper.scrollTop() + i.wrapper.height() >= i.wrapper[0].scrollHeight - r.height() / 2 && pt(i)
            }
        }
        function yt(i) {
            var u, f, r, o;
            if (n("#PatientId").length > 0 ? e(n("#PatientId").data("kendoMultiSelect")) : n("#DoctorId").length > 0 && e(n("#DoctorId").data("kendoMultiSelect")),
            !t.isLoading) {
                if (u = n(".js-message-preview.js-scroll-wrapper"),
                t.isMessageLoading || u.spinner(!0),
                f = i.sender.select(),
                r = i.sender.dataItem(f),
                r == null) {
                    t.isMessageLoading || u.spinner(!1);
                    return
                }
                t.isMessageLoading = !0;
                s();
                n(c).attr("src", r.PreviewUrl);
                n("#MessageId").val(r.MessageId);
                o = n("#link-message-form");
                siberia.validation.clearValidationErrors(o)
            }
        }
        function pt(i) {
            var r, u;
            if (t.canContinueLoading && (r = n("#secure-messages-container").data("old-messages-scroll-url"),
            r)) {
                u = n("#received-secure-messages-list").closest(".js-scroll-wrapper");
                u.spinner(!0);
                t.isLoading = !0;
                var f = i.dataItem(i.items().last()).MessageId
                  , e = n("#ListMode").val()
                  , o = b().resultFilter
                  , s = {
                    currentMessageId: f,
                    listMode: e,
                    resultFilter: o
                };
                n.ajax({
                    type: "POST",
                    url: r,
                    cache: !1,
                    contentType: "application/json",
                    data: JSON.stringify(s),
                    success: function(r) {
                        var f, u, e, o;
                        t.canContinueLoading = r.HasMoreMessages;
                        u = i.select();
                        u && u.length === 1 && (f = i.dataItem(u).uid);
                        e = i.items().length;
                        n(r.Data).each(function(n, t) {
                            i.dataSource.insert(e, t);
                            e++
                        });
                        f && (o = n('[data-uid="' + f + '"]'),
                        o.length === 1 && (t.isManualChange = !0,
                        i.select(o),
                        t.isManualChange = !1))
                    },
                    complete: function() {
                        t.isLoading = !1;
                        u.spinner(!1)
                    }
                })
            }
        }
        function o(t) {
            var i = n(t).data("kendoDatePicker");
            return i ? i.value() : null
        }
        function wt() {
            return kendo.widgetInstance(n("#received-secure-messages-list"))
        }
        function h(t) {
            var i = n(t).data("kendoComboBox")
              , r = {
                id: null,
                value: null
            };
            return i && (r.id = i.value(),
            r.text = i.text()),
            r
        }
        function bt() {
            var n = h("#DoctorName")
              , t = h("#PatientName");
            u.FromDate = o("#FromDate");
            u.ToDate = o("#ToDate");
            u.PatientId = t.id;
            u.doctorId = n.id;
            u.patientBirthDate = o("#PatientBirthDate")
        }
        function kt() {
            var f = n("#DoctorName").data("kendoComboBox"), t, i, r, u;
            f && f.select(-1);
            t = n("#PatientName").data("kendoComboBox");
            t && t.select(-1);
            i = n("#PatientBirthDate").data("kendoDatePicker");
            i && i.value("");
            r = n("#FromDate").data("kendoDatePicker");
            r && r.value("");
            u = n("#ToDate").data("kendoDatePicker");
            u && u.value("")
        }
        function dt() {
            var e = n("#DoctorName").data("kendoComboBox"), t, i, u, f;
            e && e.bind("change", function() {
                r()
            });
            t = n("#PatientName").data("kendoComboBox");
            t && t.bind("change", function() {
                r()
            });
            i = n("#FromDate").data("kendoDatePicker");
            i && i.bind("change", function() {
                r()
            });
            u = n("#ToDate").data("kendoDatePicker");
            u && u.bind("change", function() {
                r()
            });
            f = n("#PatientBirthDate").data("kendoDatePicker");
            f && f.bind("change", function() {
                r()
            })
        }
        function r() {
            var u = !1, f = !1, e = n("#DoctorName").data("kendoComboBox"), t, i, r;
            e && (f = !0,
            t = h("#DoctorName"),
            t.id && t.id != "" && (u = !0));
            i = !1;
            r = h("#PatientName");
            r.id && r.id != "" && (i = !0);
            var s = o("#FromDate")
              , c = o("#ToDate")
              , l = o("#PatientBirthDate")
              , a = s ? !0 : !1
              , v = c ? !0 : !1
              , y = l ? !0 : !1
              , p = u || i || a || v || y;
            n(".js-btn-clear-received-message-filter").toggle(p)
        }
        function gt() {
            var t = n(".js-toolbar-received-message-filter-popup");
            n(".js-btn-show-toolbar-received-message-filter").click(function() {
                t.fadeToggle("fast")
            });
            ni(t);
            dt();
            r()
        }
        function ni(t) {
            var i = n(".js-toolbar-received-message-filter-popup form");
            if (i) {
                i.kendoValidator();
                n(".js-btn-cancel-received-message-filter").on("click", function() {
                    t.fadeOut("fast")
                });
                n(".js-btn-apply-received-message-filter").on("click", function(n) {
                    n.preventDefault();
                    i.valid() && (bt(),
                    wt().dataSource.read(),
                    t.fadeOut("fast"))
                });
                n(".js-btn-clear-received-message-filter").on("click", function() {
                    kt();
                    r()
                })
            }
        }
        var c = "#message-preview-iframe"
          , t = {
            isLoading: !1,
            isManualChange: !1,
            isMessageLoading: !1,
            canContinueLoading: !0
        }
          , u = {
            FromDate: undefined,
            ToDate: undefined,
            patientId: undefined,
            doctorId: undefined,
            patientBirthDate: undefined
        }
          , b = function() {
            return {
                resultFilter: u
            }
        }
          , ti = function(n) {
            t.canContinueLoading = n.response.HasMoreMessages === !0
        };
        return {
            init: k,
            getFilter: b,
            onMessagesRequestEnd: ti
        }
    }();
    n(document).ready(function() {
        siberia.securemessages.init()
    })
}(jQuery),
function(n) {
    function f() {
        (t = n("#stock-items-grid").data("kendoGrid"),
        t) && (s(),
        n("#stock-item-popup .js-new-company").click(o),
        siberia.grid.initClientGrid({
            gridSelector: "#stock-items-grid",
            addAction: h,
            editAction: c,
            deleteAction: l,
            isCustomEditing: !0
        }),
        siberia.searchBox.initSearch(i),
        siberia.multiSelect.fixServerFiltering("#StockItem_SupplierCompanyId", "CompanyName"),
        n("#StockItem_SupplierCompanyId").data("kendoMultiSelect").bind("change", e))
    }
    function e(t) {
        var i = t.sender.dataItem();
        i && n("#StockItem_SupplierContact").val(i.ContactPersonName)
    }
    function o(t) {
        t.preventDefault();
        siberia.rightSidePanel.setPanelsZIndex();
        n(window).trigger("rc-open-create-contact-panel", [undefined, function(n) {
            siberia.rightSidePanel.resetPanelsZIndex();
            var t = siberia.commonAddEntities.convertCompanyForCommonSearch(n);
            u(t.Id, t, !0)
        }
        , !0, !0])
    }
    function s() {
        n("#stock-item-popup .js-configure-practice-dictionary").on("click", function(t) {
            t.preventDefault();
            var i = n(t.currentTarget)
              , r = i.attr("data-practice-dictionary-name")
              , u = i.attr("data-practice-dictionary-type");
            siberia.popup.create("#practice-dictionary-popup", {
                windowOptions: {
                    title: r,
                    width: "870"
                },
                clear: function() {
                    n("#DictionaryType").val(u);
                    n("#dictionary-list-grid").data("kendoGrid").dataSource.page(1)
                },
                close: function() {
                    var n = i.parent().find('[data-role="combobox"]').data("kendoComboBox");
                    n && n.dataSource.read()
                }
            })
        })
    }
    function h(n) {
        siberia.popup.create("#stock-item-popup", {
            submitText: text.global.labels.create,
            windowOptions: {
                title: text.global.titles.addStockItem,
                width: "950"
            },
            clear: function() {
                r(n.item)
            },
            success: function() {
                i()
            },
            cancel: function() {
                n.cancel()
            }
        })
    }
    function c(n) {
        siberia.popup.create("#stock-item-popup", {
            submitText: text.global.labels.update,
            windowOptions: {
                title: text.global.titles.editStockItem,
                width: "950"
            },
            clear: function() {
                r(n)
            },
            success: function() {
                i()
            }
        })
    }
    function l() {
        t.dataSource.sync()
    }
    function i() {
        t.dataSource.read()
    }
    function r(t) {
        n("#StockItem_Id").val(t.Id);
        n("#StockItem_ItemNumber").val(t.ItemNumber);
        n("#StockItem_ItemName").val(t.ItemName);
        n("#StockItem_Category").data("kendoComboBox").value(t.Category);
        n("#StockItem_Storage").data("kendoComboBox").value(t.Storage);
        n("#StockItem_Description").val(t.Description);
        n("#StockItem_UnitMeasure").data("kendoComboBox").value(t.UnitMeasure);
        n("#StockItem_QuantityOrdered").data("kendoNumericTextBox").value(t.QuantityOrdered);
        n("#StockItem_SupplierContact").val(t.SupplierContact);
        n("#StockItem_UnitCurrency").data("kendoComboBox").value(t.UnitCurrency);
        n("#StockItem_Price").data("kendoNumericTextBox").value(t.Price);
        n("#StockItem_IsGstIncluded").prop("checked", t.IsGstIncluded).trigger("change");
        n("#StockItem_OrderPoint").data("kendoNumericTextBox").value(t.OrderPoint);
        n("#StockItem_QuantityOnHand").data("kendoNumericTextBox").value(t.QuantityOnHand);
        n("#StockItem_Comment").val(t.Comment);
        u(t.SupplierCompanyId, t.SupplierCompany, !1)
    }
    function u(n, t, i) {
        siberia.multiSelect.clearServerFilteringState("#StockItem_SupplierCompanyId");
        n ? siberia.multiSelect.attachValue("#StockItem_SupplierCompanyId", [t], "Id", i) : siberia.multiSelect.clearValue("#StockItem_SupplierCompanyId", i)
    }
    var t;
    n(document).ready(function() {
        f()
    })
}(jQuery),
function(n) {
    function t(n) {
        return n.Log.some(function(n) {
            return n.Level > 0 || t(n)
        })
    }
    function i(u) {
        return '<ul class="migration-log-item ' + r[u.Level] + " " + (t(u) && "migration-log-level-child-warning") + '"><li>' + n('<span class="migration-log-message">').text(u.Message).html() + (u.Log.length ? "<li>" + u.Log.map(i).join("") + "<\/li>" : "") + "<\/ul>"
    }
    var r = {
        "0": "migration-log-level-info",
        "1": "migration-log-level-warning",
        "2": "migration-log-level-error"
    };
    n.fn.migrationLog = function() {
        return this.each(function(t, r) {
            var u = n(r)
              , f = u.attr("data-migration-log-json-url")
              , e = u.attr("data-migration-log-warnings-toggler");
            n(e).change(function(n) {
                u.toggleClass("migration-log-show-only-warnings", n.target.checked)
            });
            u.spinner(!0);
            n.ajax({
                type: "POST",
                url: f,
                contentType: "application/json"
            }).then(function(n) {
                n && u.html(i(n))
            }).fail(function() {
                u.html(text.global.status.errorOccurred)
            }).done(function() {
                u.spinner(!1)
            });
            u.on("click", ".migration-log-message", function(t) {
                t.stopPropagation();
                n(t.currentTarget).closest("li").next().toggle()
            })
        })
    }
    ;
    n(document).ready(function() {
        n("#migration-log").migrationLog({
            toggleWarningsSelector: "#migration-log-warnings-checkbox"
        })
    })
}(jQuery),
function(n) {
    function i() {
        var r = n("#ScheduleReviewCalendar").data("kendoCalendar")
          , i = n("#StartDate").data("kendoDatePicker")
          , u = n("#EndDate").data("kendoDatePicker");
        r && (r.bind("change", function(t) {
            var r = t.sender.value(), f = siberia.userSchedule.getFirstOrLastDay(r, !0), e = i && i.value(), o;
            e && e.getTime() == f.getTime() || (i.value(kendo.toString(f, siberia.config.formats.dateFormat)),
            o = siberia.userSchedule.getFirstOrLastDay(r, !1),
            u.value(kendo.toString(o, siberia.config.formats.dateFormat)),
            n(".js-get-report").click())
        }),
        i.bind("change", t),
        u.bind("change", t))
    }
    function t() {
        var t = n("#ScheduleReviewCalendar").data("kendoCalendar");
        t && t.value("")
    }
    n(".js-report-grid-container").on({
        mouseenter: function(t) {
            var i = n(".scrollable-content .js-schedule-review-grid-tr")
              , r = n(".grid-locked .js-schedule-review-grid-tr")
              , u = i.index(n(t.currentTarget));
            r.eq(u).addClass("grid-row-hover")
        },
        mouseleave: function(t) {
            var i = n(".scrollable-content .js-schedule-review-grid-tr")
              , r = n(".grid-locked .js-schedule-review-grid-tr")
              , u = i.index(n(t.currentTarget));
            r.eq(u).removeClass("grid-row-hover")
        }
    }, ".scrollable-content .js-schedule-review-grid-tr");
    n(".js-report-grid-container").on({
        mouseenter: function(t) {
            var i = n(".scrollable-content .js-schedule-review-grid-tr")
              , r = n(".grid-locked .js-schedule-review-grid-tr")
              , u = r.index(n(t.currentTarget));
            i.eq(u).addClass("grid-row-hover")
        },
        mouseleave: function(t) {
            var i = n(".scrollable-content .js-schedule-review-grid-tr")
              , r = n(".grid-locked .js-schedule-review-grid-tr")
              , u = r.index(n(t.currentTarget));
            i.eq(u).removeClass("grid-row-hover")
        }
    }, ".grid-locked .js-schedule-review-grid-tr");
    n(document).ready(i)
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.smsReport");
    siberia.smsReport = function() {
        function f() {
            if (t = n("#sms-report-grid").data("kendoGrid"),
            t) {
                n("#getSmsReportBtn").on("click", o);
                n(".js-apply-sms-report-filter").on("click", i);
                n(".js-reset-sms-report-filter").on("click", s);
                siberia.validation.initValidationFor(n("#js-sms-report-filter").find("form"), n("#js-sms-report-filter").find("form .js-validate"));
                u();
                i()
            }
        }
        function u() {
            n("#js-sms-report-filter .js-today-report").children("input:radio").prop("checked", !0);
            siberia.reportDateFilter.applyToday()
        }
        function e() {
            n("#practiceIds").length > 0 && (r = n("#practiceIds").data("kendoMultiSelect").value())
        }
        function o(n) {
            n.preventDefault();
            e();
            i()
        }
        function i() {
            t.dataSource.filter({})
        }
        function s() {
            n("#practiceIds").length > 0 && n("#practiceIds").data("kendoMultiSelect").value("");
            u();
            i()
        }
        function h() {
            if (t) {
                var i = n("#js-sms-report-filter #From").val()
                  , u = n("#js-sms-report-filter #To").val();
                return {
                    practiceIds: r,
                    From: i,
                    To: u
                }
            }
        }
        var r, t;
        return {
            init: f,
            onLoadingSmsReport: h
        }
    }();
    n(document).ready(function() {
        siberia.smsReport.init()
    })
}(jQuery),
function(n) {
    function r(n) {
        var t, i;
        n != null ? i = n.AccountHolderSummary : (t = w(),
        i = (f.select() > 0 ? f.text() + " " : "") + (u.val() ? u.val() + " " : "") + (e.val() ? e.val() + "\n" : "") + (o.val() ? o.val() + " " : "") + (s.val() ? s.val() + "\n" : "") + (t ? "Phone: " + t + "\n" : ""));
        v.text(i)
    }
    function w() {
        switch (n("#PreferredMethodOfContactId").data("kendoDropDownList").value()) {
        case h.mobile:
            return a.val();
        case h.home:
            return c.val();
        case h.work:
            return l.val()
        }
        return ""
    }
    function k() {
        var u = i.value().length, t;
        u == 0 ? r() : (t = i.value()[0],
        n.each(i.dataSource.data(), function(n, i) {
            return i.Id == t ? (r(i),
            !1) : !0
        }))
    }
    function d() {
        var i = siberia.address.get(n("#ctlDemographicContainer"));
        siberia.address.set(n("#account-holder-popup"), i);
        t.Phone.val(w())
    }
    function b() {
        !y || (u.val() ? n("#BlockPortalAccessLabel").text("Block " + u.val() + "'s Patient Portal Access") : n("#BlockPortalAccessLabel").text("Block Patient Portal Access"))
    }
    function g() {
        (i = n("#AccountInfo_AccountHolderId").data("kendoMultiSelect"),
        i) && (siberia.multiSelect.fixServerFiltering("#NewAccountHolder_AccountHolderSuburbId", ["PostCode", "SuburbName"]),
        i.bind("change", k),
        t.SalutationId = n("#NewAccountHolder_AccountHolderSalutationId").data("kendoDropDownList"),
        t.Name = n("#NewAccountHolder_Name"),
        t.Surname = n("#NewAccountHolder_Surname"),
        t.DateOfBirth = n("#NewAccountHolder_AccountHolderDateOfBirth"),
        t.Phone = n("#NewAccountHolder_Phone"),
        t.Medicare = n("#NewAccountHolder_AccountHolderMedicare"),
        t.MedicareNumberFirst = n("#NewAccountHolder_Medicare_NumberFirst"),
        t.MedicareNumberSecond = n("#NewAccountHolder_Medicare_NumberSecond"),
        t.MedicareExpiry = n("#NewAccountHolder_Medicare_ExpiryDate"),
        t.AccountType = n("#NewAccountHolder_AccountHolderAccountTypeId").data("kendoDropDownList"),
        t.ExpiryDate = n("#NewAccountHolder_ExpiryDate"),
        t.PartnerName = n("#NewAccountHolder_PartnerName"),
        p.CompanyName = n("#NewAccountHolderCompany_CompanyName"),
        p.Phone = n("#NewAccountHolderCompany_Phone"),
        n(".js-autofill-account-holder").click(function() {
            d()
        }),
        siberia.popup.create("#account-holder-popup", {
            openPopupBtn: ".js-account-holder-new",
            windowOptions: {
                title: text.global.titles.popupAccountHolder,
                width: "500"
            },
            clear: function() {
                t.SalutationId.value("");
                t.Name.val("");
                t.Surname.val("");
                t.DateOfBirth.data("kendoDatePicker").value(null);
                t.Phone.val("");
                t.AccountType.value("");
                t.MedicareNumberFirst.val("");
                t.MedicareNumberSecond.val("");
                t.MedicareExpiry.data("kendoDatePicker").value(null);
                t.PartnerName.val("");
                siberia.address.clear(n("#account-holder-popup"))
            },
            success: function(n) {
                var t = [];
                t.push(n.Data[0]);
                siberia.multiSelect.attach(i, t, "Id", !0);
                r(n.Data[0])
            }
        }),
        n(".js-account-holder-company-new").click(function(t) {
            t.preventDefault();
            siberia.rightSidePanel.setPanelsZIndex();
            n(window).trigger("rc-open-create-contact-panel", [undefined, function(t) {
                siberia.rightSidePanel.resetPanelsZIndex();
                var f = [t.CompanyName || "", siberia.commonAddEntities.getCompanyAddressDetailsString(t.Address, "\r\n") || "", t.PhoneNo1 ? "Phone: " + t.PhoneNo1 : ""]
                  , u = {
                    Id: "Company_" + t.CompanyId,
                    FullName: t.CompanyName,
                    FullNameSearchSafe: t.CompanyName,
                    AccountHolderSummary: n.grep(f, Boolean).join("\r\n") || "",
                    IsCompany: !0
                };
                siberia.multiSelect.attach(i, [u], "Id", !0);
                r(u)
            }
            , !0, !0])
        }),
        v = n(".js-account-holder-info"),
        f = n("#SalutationId").data("kendoDropDownList"),
        u = n("#FirstName"),
        e = n("#LastName"),
        o = n("#AddressLine1"),
        s = n("#AddressLine2"),
        c = n("#HomePhone"),
        l = n("#WorkPhone"),
        a = n("#MobilePhone"),
        y = n("#BlockPortalAccessLabel"),
        u.change(function() {
            i.value().length == 0 && r();
            b()
        }),
        e.change(function() {
            i.value().length == 0 && r()
        }),
        o.change(function() {
            i.value().length == 0 && r()
        }),
        s.change(function() {
            i.value().length == 0 && r()
        }),
        c.change(function() {
            i.value().length == 0 && r()
        }),
        l.change(function() {
            i.value().length == 0 && r()
        }),
        a.change(function() {
            i.value().length == 0 && r()
        }),
        f.bind("change", function() {
            i.value().length == 0 && r()
        }),
        b())
    }
    var h = {
        mobile: "1",
        work: "2",
        home: "3"
    }, i, v, f, u, e, o, s, c, l, a, y, t = {
        SalutationId: undefined,
        Name: undefined,
        Surname: undefined,
        DateOfBirth: undefined,
        AccountType: undefined,
        Phone: undefined,
        Medicare: undefined,
        ExpiryDate: undefined,
        MedicareNumberFirst: undefined,
        MedicareNumberSecond: undefined,
        MedicareExpiry: undefined,
        PartnerName: undefined
    }, p = {
        CompanyName: undefined,
        Phone: undefined
    };
    n(document).ready(function() {
        g()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.contact");
    siberia.contact = function() {
        function t(t) {
            if (t) {
                var r = t.WorkLocations[t.WorkLocations.length - 1]
                  , u = t.Salutation || ""
                  , f = u + " " + t.FirstName + " " + t.LastName
                  , e = [r.ProviderNumber || "", t.Specialty ? t.Specialty.Text : ""]
                  , o = n.grep(e, Boolean).join(" . ") || ""
                  , s = [r.Company ? r.Company.Text : "", i(r.Address)]
                  , h = n.grep(s, Boolean).join(" . ") || "";
                return {
                    Id: r.Id,
                    FullName: f,
                    ProviderNumber: r.ProviderNumber || "",
                    Salutation: u,
                    FullNameWithoutSalutation: t.FirstName + " " + t.LastName,
                    DetailsLine1: o,
                    DetailsLine2: h
                }
            }
            return null
        }
        function i(t) {
            if (t) {
                var i = [t.AddressLine1 || "", t.AddressLine2 || ""]
                  , r = n.grep(i, Boolean).join(", ") || ""
                  , u = [(t.Suburb ? t.Suburb.Text : t.SuburbText) || "", (t.PostCode ? t.PostCode.Text : t.PostCodeText) || "", (t.State ? t.State.Text : t.StateText) || ""]
                  , f = n.grep(u, Boolean).join(" ") || "";
                return n.grep([r, f], Boolean).join(", ") || ""
            }
            return ""
        }
        function r(i, r) {
            var u = t(i), f;
            u && (f = n(r.target).closest("div.control-grp").find('select[data-role="multiselect"]'),
            siberia.commonAddEntities.addCreatedItemToMultiselect(f, u))
        }
        return n(".js-referral-person-new, .js-contact-person-new").click(function() {
            var t = n(this);
            siberia.rightSidePanel.setPanelsZIndex();
            n(window).trigger("rc-open-create-contact-panel", [undefined, function(n) {
                siberia.rightSidePanel.resetPanelsZIndex();
                r(n, {
                    target: t
                })
            }
            , !0, !1])
        }),
        {
            convertContactForCommonSearch: t
        }
    }();
    n(document).ready(function() {})
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.patientRefferal");
    siberia.patientRefferal = function() {
        function e() {
            var r = n(t), i;
            if (r.length !== 0) {
                i = n("#PatientId");
                i.length > 0 && n("#Referral_PatientId").val(i.val());
                siberia.grid.initClientGrid({
                    gridSelector: t,
                    saveAndCloseSelector: null,
                    saveSelector: ".js-referrals-save",
                    addAction: h,
                    editAction: c,
                    deleteAction: l,
                    confirmText: text.global.confirms.deleteReferral
                });
                r.on("click", ".js-client-grid-attachments", siberia.patientRefferal.uploadFileListPopup)
            }
        }
        function o() {
            return i
        }
        function s(u) {
            var f = n(t).data("kendoGrid").dataItem(n(u.currentTarget).closest("tr")), e;
            i = f;
            e = n("#upload-file-list-popup").find("[id^=upload-file-list-grid]").data("kendoGrid");
            siberia.popup.create("#upload-file-list-popup", {
                windowOptions: {
                    title: text.global.titles.popupAttachments,
                    width: "700"
                },
                ajax: {
                    enabled: !1
                },
                clear: function() {
                    var t, i;
                    if (n("#upload-file-list-popup #upload-file-list-container").hide(),
                    n("#upload-file-list-popup #upload-file-list-nodata").show(),
                    e.dataSource.data([]),
                    f.UploadedFiles && (t = f.UploadedFiles.Files),
                    t && t.length > 0)
                        for (n("#upload-file-list-popup #upload-file-list-container").show(),
                        n("#upload-file-list-popup #upload-file-list-nodata").hide(),
                        i = 0; i < t.length; i++)
                            e.dataSource.add({
                                Id: t[i].Id,
                                Guid: t[i].Guid,
                                FileName: t[i].FileName,
                                FullFileName: t[i].FullFileName,
                                Description: t[i].Description,
                                DocumentDateDisplay: t[i].DocumentDateDisplay,
                                IsReferralFile: t[i].IsReferralFile,
                                CssPostfix: t[i].CssPostfix
                            })
                },
                close: function() {
                    i = undefined;
                    r()
                }
            })
        }
        function h(n) {
            var t = function() {
                u(n.item)
            }
              , i = function() {
                n.cancel()
            };
            siberia.referral.popup.openPopup(text.global.titles.addReferral, text.global.labels.create, t, r, i)
        }
        function c(n) {
            var t = function() {
                u(n)
            };
            siberia.referral.popup.openPopup(text.global.titles.editReferral, text.global.labels.update, t, r)
        }
        function u(t) {
            var r, i, u, e, o;
            n("#Referral_Id").val(t.Id);
            r = n("#Referral_DoctorId").data("kendoMultiSelect");
            r.value(t.DoctorId);
            n("#Referral_Notes").val(t.Notes);
            i = [];
            t.ReferralPersonSearchContact && i.push(t.ReferralPersonSearchContact);
            siberia.multiSelect.attachValue("#Referral_ReferralPersonId", i, "Id");
            u = n("#Referral_ExpirationMonths").data("kendoDropDownList");
            t.ExpirationMonths == 0 && (t.ExpirationMonths = 12);
            u.value(t.ExpirationMonths);
            var s = n("#Referral_StartDate").data("kendoDatePicker")
              , f = n("#Referral_DateOfReferral").data("kendoDatePicker")
              , h = siberia.common.currentLocationDate();
            t.DateOfReferral != null && t.DateOfReferralStr ? (e = kendo.parseDate(t.DateOfReferralStr, siberia.config.formats.dateFormat),
            f.value(e)) : f.value(h);
            o = kendo.parseDate(t.StartDateStr, siberia.config.formats.dateFormat);
            s.value(o);
            n("#Referral_expirationDate").text(t.EndReferralDateStr)
        }
        function l() {
            f().dataSource.sync()
        }
        function r() {
            f().dataSource.read()
        }
        function f() {
            return n(t).data("kendoGrid")
        }
        var i, t = "#referral-list-grid";
        return {
            init: e,
            uploadFileListPopup: s,
            getSelectedReferralItem: o
        }
    }();
    n(document).ready(function() {
        siberia.patientRefferal.init()
    })
}(jQuery),
function(n) {
    function a() {
        if (n(t).length !== 0) {
            siberia.grid.initClientGrid({
                gridSelector: t,
                saveAndCloseSelector: null,
                saveSelector: ".js-workcover-save",
                customSelector: ".js-workcover-claim-complete",
                addAction: y,
                editAction: p,
                viewAction: b,
                customAction: w,
                deleteAction: k,
                confirmText: text.global.confirms.deleteWorkCoverClaim
            });
            n("#WorkCoverClaim_PatientId").val(n("#PatientId").val());
            n(t).on("click", ".js-open-certificate-list-popup", v);
            siberia.multiSelect.fixServerFiltering("#WorkCoverClaim_EmployerCompanyId", "CompanyName");
            siberia.multiSelect.fixServerFiltering("#WorkCoverClaim_InsuranceCompanyId", "CompanyName")
        }
    }
    function v(t) {
        t.preventDefault();
        var i = n(t.delegateTarget).data("kendoGrid")
          , r = i.dataItem(n(t.currentTarget).closest("tr"));
        siberia.certificateOfCapacity.openCertificatesListPopup(r.Id)
    }
    function y(n) {
        r("#workcover-popup", n.item, text.global.labels.create, text.global.titles.addWorkCoverClaim, l, function() {
            i(!0);
            o()
        }, s, function() {
            i(!1)
        }, function() {
            n.cancel()
        })
    }
    function p(n) {
        r("#workcover-popup", n, text.global.labels.update, text.global.titles.editWorkCoverClaim, l, function() {
            i(!0);
            o()
        }, s, function() {
            i(!1)
        })
    }
    function o() {
        var t = new Date
          , i = n("#WorkCoverClaim_InjuryIllnessDate").data("kendoDatePicker");
        i.setOptions({
            max: t
        })
    }
    function s() {
        h().dataSource.read()
    }
    function h() {
        return n(t).data("kendoGrid")
    }
    function w(i) {
        var r = n(t).data("complete-workcover-claim-url");
        n.ajax({
            type: "POST",
            data: {
                workCoverClaimId: i.Id
            },
            url: r,
            success: function(n) {
                siberia.validation.processGridActionAjaxErrors(n.Errors, !0) && (siberia.notification.showSuccessNotification(text.global.status.workCoverClaimCompleted),
                i.set("Completed", !0))
            }
        })
    }
    function b(n) {
        r("#workcover-popup-readonly", n, null, text.global.titles.viewWorkCoverClaim, g)
    }
    function r(n, t, i, r, u, f, e, o, s) {
        siberia.popup.create(n, {
            submitText: i,
            windowOptions: {
                title: r,
                width: "1100"
            },
            clear: function() {
                u(t);
                f && f()
            },
            success: e,
            close: o,
            cancel: s
        })
    }
    function k() {
        h().dataSource.sync()
    }
    function d(t, i, r) {
        n.ajax({
            type: "POST",
            url: t,
            async: !1,
            contentType: "application/json",
            data: JSON.stringify({
                companyId: i
            }),
            success: function(n) {
                r(n)
            },
            error: function() {}
        })
    }
    function i(t) {
        t === !0 ? (n("#WorkCoverClaim_EmployerCompanyId").data("kendoMultiSelect").bind("change", f),
        n("#WorkCoverClaim_InsuranceCompanyId").data("kendoMultiSelect").bind("change", e)) : (n("#WorkCoverClaim_EmployerCompanyId").data("kendoMultiSelect").unbind("change", f),
        n("#WorkCoverClaim_InsuranceCompanyId").data("kendoMultiSelect").unbind("change", e))
    }
    function c(t, i, r) {
        var f = n(t).data("kendoMultiSelect").dataItems()[0];
        u(f, i, r)
    }
    function u(t, i, r) {
        var u = n(i + " " + r + " .js-detail-section")
          , f = n(i + " " + r)
          , e = n(i).attr("data-get-company");
        t ? d(e, t.Id, function(n) {
            u.html(n);
            f.show()
        }) : (f.hide(),
        u.html(""))
    }
    function f() {
        c("#WorkCoverClaim_EmployerCompanyId", "#workcover-popup", "#workcover-employer-company-details")
    }
    function e() {
        c("#WorkCoverClaim_InsuranceCompanyId", "#workcover-popup", "#workcover-insurance-company-details")
    }
    function g(t) {
        n("#workcover-employer-company-name").text(t.EmployerCompanyName);
        n("#workcover-employer-representative").text(t.EmployerRepresentativeName);
        n("#workcover-claim-id").text(t.InsuranceClaimId);
        n("#workcover-insurance-company-name").text(t.InsuranceCompanyName);
        n("#workcover-claim-manager").text(t.InsuranceClaimManagerName);
        n("#workcover-claim-manager-phone").text(t.InsuranceClaimManagerPhone);
        n("#workcover-injury-illness-details").text(t.InjuryIllnessDetails);
        n("#workcover-injury-localization").text(t.InjuryLocalization);
        n("#workcover-injury-accident-location").text(t.InjuryAccidentLocation);
        n("#workcover-injury-date").text(kendo.toString(t.InjuryIllnessDate, siberia.config.formats.dateFormat));
        n("#workcover-injury-time").text(t.InjuryIllnessTime);
        u(t.SelectedEmployerCompanies && t.SelectedEmployerCompanies[0], "#workcover-popup-readonly", "#workcover-employer-company-details");
        u(t.SelectedInsuranceCompanies && t.SelectedInsuranceCompanies[0], "#workcover-popup-readonly", "#workcover-insurance-company-details")
    }
    function l(t) {
        siberia.multiSelect.clearServerFilteringState("#WorkCoverClaim_EmployerCompanyId");
        t.SelectedEmployerCompany ? siberia.multiSelect.attachValue("#WorkCoverClaim_EmployerCompanyId", [t.SelectedEmployerCompany], "Id") : siberia.multiSelect.clearValue("#WorkCoverClaim_EmployerCompanyId");
        siberia.multiSelect.clearServerFilteringState("#WorkCoverClaim_InsuranceCompanyId");
        t.SelectedInsuranceCompany ? siberia.multiSelect.attachValue("#WorkCoverClaim_InsuranceCompanyId", [t.SelectedInsuranceCompany], "Id") : siberia.multiSelect.clearValue("#WorkCoverClaim_InsuranceCompanyId");
        siberia.multiSelect.clearServerFilteringState("#WorkCoverClaim_InjuryIllnessId");
        siberia.multiSelect.attachValue("#WorkCoverClaim_InjuryIllnessId", t.SelectedInjuryIllness, "Id");
        n("#WorkCoverClaim_InjuryIllnessDate").data("kendoDatePicker").value(t.InjuryIllnessDate);
        n("#WorkCoverClaim_EmployerRepresentativeName").val(t.EmployerRepresentativeName);
        n("#WorkCoverClaim_InsuranceClaimId").val(t.InsuranceClaimId);
        n("#WorkCoverClaim_InsuranceClaimManagerName").val(t.InsuranceClaimManagerName);
        n("#WorkCoverClaim_InsuranceClaimManagerPhone").val(t.InsuranceClaimManagerPhone);
        n("#WorkCoverClaim_InjuryIllnessDetails").val(t.InjuryIllnessDetails);
        n("#WorkCoverClaim_InjuryLocalization").val(t.InjuryLocalization);
        n("#WorkCoverClaim_InjuryAccidentLocation").val(t.InjuryAccidentLocation);
        n("#WorkCoverClaim_InjuryIllnessTime").val(t.InjuryIllnessTime);
        n("#WorkCoverClaim_Id").val(t.Id);
        f();
        e()
    }
    var t = "#workcover-claims-grid";
    n(document).ready(function() {
        a()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.patientInfoPopup");
    siberia.patientInfoPopup = function() {
        function i(t, i) {
            var r = i ? i.successCallback : null;
            siberia.popup.create("#patient-info-popup", {
                windowOptions: {
                    title: t,
                    width: "500"
                },
                clear: function() {
                    s();
                    i && i.showWaitingListCheckbox == !0 ? n("#addToWaitingListSection").show() : n("#addToWaitingListSection").hide()
                },
                init: function() {
                    o(i)
                },
                cancel: h,
                success: function(n) {
                    c(n, r)
                }
            })
        }
        function o(t) {
            t && t.patientDetails && (n("#patient-info-popup form").attr("action", t.action),
            n("#PatientInfo_SalutationId").data("kendoDropDownList").value(t.patientDetails.salutationId),
            n("#PatientInfo_FirstName").val(t.patientDetails.name),
            n("#PatientInfo_LastName").val(t.patientDetails.surname),
            n("#PatientInfo_DateOfBirth").data("kendoDatePicker").value(t.patientDetails.dateOfBirth),
            n("#PatientInfo_Phone").val(t.patientDetails.phone),
            t.patientDetails.sex != null && (t.patientDetails.sex ? n('.js-sex input[value="Male"]').prop("checked", !0) : n('.js-sex input[value="Female"]').prop("checked", !0)))
        }
        function s() {
            n("#PatientInfo_FirstName").val("");
            n("#PatientInfo_LastName").val("");
            n("#PatientInfo_DateOfBirth").data("kendoDatePicker").value("");
            n("#PatientInfo_Phone").val("");
            n("#PatientInfo_SalutationId").data("kendoDropDownList").value("");
            n("#patient-info-popup .js-sex input:checked").prop("checked", !1);
            n("#PatientInfo_Email").val("");
            n("input[name='PatientInfo.AddToWaitingList']").prop("checked", !1);
            n("#PatientInfo_IdentityUserName").val("");
            n("#PatientInfo_IdentityUserSurname").val("");
            n("#PatientInfo_IdentityUserEmail").val("");
            n("#PatientInfo_IdentityUserMobileNumber").val("");
            var t = n("input[name='PatientInfo.SendMagicLink']")
              , i = n("input[name='PatientInfo.SendMagicLinkToOther']");
            t.prop("checked", !1);
            i.prop("checked", !1);
            n("#other-identity-user").hide();
            n("#send-magic-link-to-other-toggler").hide();
            n("#PatientInfo_PhoneTypeId").data("kendoDropDownList").value("1")
        }
        function h() {}
        function c(i, r) {
            var o = n(t).closest("div.control-grp").find('select[data-role="multiselect"]').data("kendoMultiSelect"), f = [], e;
            if (o != null) {
                var u = i.Data[0]
                  , h = n("#PatientInfo_SalutationId").data("kendoDropDownList").dataSource.data()
                  , s = "";
                n.each(h, function(n, t) {
                    return t.Id == u.SalutationId ? (s = t.Text,
                    !1) : !0
                });
                e = s + " " + u.FirstName + " " + u.LastName;
                f.push({
                    PatientId: u.PatientId.toString(),
                    PatientFullName: e,
                    HighlightedFullName: e,
                    PatientDateOfBirth: u.DateOfBirthString,
                    HighlightedDateOfBirth: u.DateOfBirthString,
                    PatientNumber: u.PatientNumber,
                    HighlightedPatientNumber: u.PatientNumber,
                    PatientSex: u.Sex,
                    PatientIsInactive: !1
                });
                siberia.multiSelect.empty("#QId", !0);
                siberia.multiSelect.empty("#RefId", !0);
                siberia.multiSelect.appendOrAttach(o, f, "PatientId", !0)
            }
            i.Data[0] != undefined && (i.Data[0].patientData = f.length > 0 ? f[0] : l(i.Data[0]),
            r && r(i),
            n("input[name='PatientInfo.AddToWaitingList']").prop("checked") && v(i.Data[0]))
        }
        function l(n) {
            var t = n.FirstName + " " + n.LastName;
            return {
                PatientId: n.PatientId.toString(),
                PatientFullName: t,
                HighlightedFullName: t,
                PatientDateOfBirth: n.DateOfBirthString,
                HighlightedDateOfBirth: n.DateOfBirthString,
                PatientNumber: n.PatientNumber,
                HighlightedPatientNumber: n.PatientNumber,
                PatientSex: n.Sex,
                PatientIsInactive: !1
            }
        }
        function a() {
            var r = n("#PatientInfo_PhoneOptional", "#patient-info-popup").val();
            r !== "True" && (n('label[for="PatientInfo_Phone"]').toggleClass("required", !0),
            n("#PatientInfo_Phone").attr("data-val-required", text.global.validation.phoneIsRequired),
            siberia.validation.initValidationFor(n("#patient-info-popup").find("form"), n("#patient-info-popup").find("form .js-validate")));
            n("body").on("click", ".js-patient-new", function(r) {
                r.preventDefault();
                n(this).blur();
                t = r.currentTarget;
                i(text.global.titles.addPatient)
            });
            n("body").on("click", ".js-partner-new", function(r) {
                u && (r.preventDefault(),
                n(this).blur(),
                t = r.currentTarget,
                i(text.global.titles.addPartner))
            });
            siberia.common.initWarningConfrimarionEvent("#patient-info-popup", "#confirm-and-force-save-changes", "#PatientInfo_ForceSave", "#patient-info-popup .js-popup-submit");
            n("body").on("click", ".js-patient-new-with-wl-option", function(r) {
                r.preventDefault();
                n(this).blur();
                t = r.currentTarget;
                i(text.global.titles.addPatient, {
                    successCallback: function() {},
                    showWaitingListCheckbox: !0
                })
            });
            n("body").find(".js-cc-tooltip").ccTooltip()
        }
        function v(t) {
            siberia.popup.create("#holding-list-edit-popup", {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addWaitingListItem,
                    width: "630"
                },
                clear: function() {
                    var i, r;
                    n("#HoldingList_Id").val("0");
                    n("#HoldingList_RecordAddedDate").val("");
                    n("#HoldingList_IsContacted").val(!1);
                    n("#HoldingList_Notes").val("");
                    t.patientData && siberia.multiSelect.attachValue("#HoldingList_PatientId", [t.patientData], "PatientId");
                    i = n("#LId").data("kendoMultiSelect");
                    i && n("#HoldingList_LocationId").data("kendoMultiSelect").value(i.value());
                    r = n("#DId").data("kendoMultiSelect");
                    r && n("#HoldingList_DoctorId").data("kendoMultiSelect").value(r.value())
                },
                success: function() {
                    n("#AddToWaitingList").prop("checked", !0).trigger("change")
                }
            })
        }
        function y(t) {
            u = t;
            n(".js-partner-new").attr("disabled", !t)
        }
        var t, u = !1, f = n("input[name='PatientInfo.SendMagicLink']"), r = n("input[name='PatientInfo.SendMagicLinkToOther']"), e = n("#send-magic-link-to-other-toggler");
        return f.change(function() {
            f.is(":checked") ? e.show() : (e.hide(),
            r.prop("checked", !1),
            n("#other-identity-user").hide())
        }),
        r.change(function() {
            r.is(":checked") ? n("#other-identity-user").show() : n("#other-identity-user").hide()
        }),
        {
            init: a,
            setCanAddPartner: y,
            openPatientPopupWindow: i
        }
    }();
    n(document).ready(function() {
        siberia.patientInfoPopup.init()
    })
}(jQuery),
function(n) {
    var t = 1e4;
    siberia.rightSidePanel = function() {
        function u() {
            n("#menu-panelbar .js-new-contact-menu-btn").click(function() {
                var t = n(this).data("link");
                f(t)
            })
        }
        function f(t) {
            var i = n("#rc-right-side-panel");
            i.length ? n(window).trigger("rc-open-create-contact-panel") : window.location.href = t
        }
        function r() {
            var t = n("#contact-list-grid");
            t.length && t.data("kendoGrid").dataSource.read()
        }
        function e() {
            u();
            n(window).on("rc-contact-created", r);
            n(window).on("rc-contact-edited", r)
        }
        function o() {
            n("#rc-right-side-panel").css("z-index", "999999998");
            n("#rc-toasts").css("z-index", "999999999");
            i && (clearTimeout(i),
            i = null)
        }
        function s() {
            n("#rc-right-side-panel").css("z-index", "");
            i = setTimeout(function() {
                n("#rc-toasts").css("z-index", "");
                i = null
            }, t)
        }
        var i = null;
        return {
            init: e,
            setPanelsZIndex: o,
            resetPanelsZIndex: s
        }
    }();
    n(document).ready(function() {
        siberia.rightSidePanel.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.practiceSelection");
    siberia.practiceSelection = function() {
        function f() {
            if (n(t).length !== 0) {
                siberia.multiSelect.fixServerFiltering("#Company_SuburbId", ["PostCode", "SuburbName"]);
                n(".js-event-switcher input").on("change", e);
                r.on("click", ".js-assign-secure-message-to-practice", c);
                siberia.searchBox.initSearch(o)
            }
        }
        function e(t) {
            n("#searchByPractice").toggle(t.target.value == 1);
            n("#searchByDoctor").toggle(t.target.value == 2)
        }
        function o() {
            var t = r.data("kendoGrid").dataSource
              , i = t.options.filter
              , n = [];
            i.length = 0;
            n.length = 0;
            n.push({
                field: "DoctorFullName",
                dir: "asc"
            });
            siberia.searchBox.applyFilterAndSort(t, i, n)
        }
        function s() {
            var n = siberia.searchBox.getSearchString();
            return {
                search: n.search
            }
        }
        function h(i) {
            var f = n("#unassigned-messages-grid").data("kendoGrid")
              , r = f.dataItem(n(i.currentTarget).closest("tr"));
            siberia.popup.create(t, {
                submitText: text.global.labels.assign,
                windowOptions: {
                    title: text.global.titles.assignMessageToPractice,
                    width: "830"
                },
                clear: function() {
                    n("#AssignMessage_MessageId").val(r.Id);
                    n("#AssignMessage_DeliveryMethodId").val(r.DeliveryMethodId)
                },
                success: function(t, i, r) {
                    r.cancelClose = !0;
                    u(n("#AssignMessage_PracticeId").val()[0], n("#AssignMessage_MessageId").val())
                }
            })
        }
        function u(r, u) {
            i.spinner(!0);
            var f = n("#unassigned-messages-grid").data("assign-secure-message-url");
            n.ajax({
                type: "POST",
                url: f,
                contentType: "application/json",
                data: JSON.stringify({
                    practiceId: r,
                    messageId: u
                }),
                success: function(i) {
                    siberia.validation.processAjaxErrors(n(t), i.Errors) && siberia.popup.close(t)
                },
                complete: function() {
                    i.spinner(!1);
                    l()
                }
            })
        }
        function c(t) {
            var i = n(t.currentTarget).data("practice-id")
              , r = n("#AssignMessage_MessageId").val();
            u(i, r)
        }
        function l() {
            var t = n("#unassigned-messages-grid").data("kendoGrid");
            t && t.dataSource.read()
        }
        function a() {
            return {
                deliveryMethodId: n("#AssignMessage_DeliveryMethodId").val()
            }
        }
        var i = n(".js-global-spinner-container")
          , t = "#assign-message-popup"
          , r = n("#users-grid");
        return n(document).ready(function() {
            f()
        }),
        {
            showAssignToPracticePopup: h,
            getDeliveryMethodId: a,
            getUsersFilter: s
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.reportDateFilter");
    siberia.reportDateFilter = function() {
        function d() {
            t.find(ot).attr("checked", !1)
        }
        function g(n) {
            var t = n.getDay();
            return n.getDate() - t + (t === 0 ? -6 : 1)
        }
        function nt() {
            var n = kendo.toString(siberia.common.currentLocationDate(), siberia.config.formats.dateFormat);
            r.value(n)
        }
        function tt(n, t) {
            switch (n) {
            case 0:
                return new Date(t,0,1);
            case 1:
                return new Date(t,3,1);
            case 2:
                return new Date(t,6,1);
            default:
                return new Date(t,9,1)
            }
        }
        function st(n, t) {
            switch (n) {
            case 0:
                return new Date(t,2,31);
            case 1:
                return new Date(t,5,30);
            case 2:
                return new Date(t,8,30);
            default:
                return new Date(t,11,31)
            }
        }
        function it() {
            var n = siberia.common.currentLocationDate()
              , t = kendo.toString(n, siberia.config.formats.dateFormat);
            i.value(t);
            r.value("")
        }
        function ht() {
            var n = siberia.common.currentLocationDate()
              , t = kendo.toString(n, siberia.config.formats.dateFormat);
            u.value(t);
            ft()
        }
        function ct() {
            var n = siberia.common.currentLocationDate(), t;
            n.setDate(n.getDate() - 1);
            t = kendo.toString(n, siberia.config.formats.dateFormat);
            i.value(t);
            r.value("")
        }
        function rt() {
            var n = siberia.common.currentLocationDate()
              , t = g(n)
              , r = new Date(n.setDate(t));
            i.value(kendo.toString(r, siberia.config.formats.dateFormat));
            nt()
        }
        function lt() {
            var n = siberia.common.currentLocationDate()
              , t = siberia.common.currentLocationDate()
              , u = g(n) - 7
              , f = g(n) - 1
              , e = new Date(t.setDate(u))
              , o = new Date(n.setDate(f));
            i.value(kendo.toString(e, siberia.config.formats.dateFormat));
            r.value(kendo.toString(o, siberia.config.formats.dateFormat))
        }
        function ut() {
            var n = siberia.common.currentLocationDate()
              , t = new Date(n.setDate(1));
            i.value(kendo.toString(t, siberia.config.formats.dateFormat));
            nt()
        }
        function at() {
            var n = siberia.common.currentLocationDate()
              , t = n.getMonth() > 0 ? new Date(n.getFullYear(),n.getMonth() - 1,1) : new Date(n.getFullYear() - 1,11,1)
              , u = new Date(n.getFullYear(),n.getMonth(),0)
              , f = kendo.toString(t, siberia.config.formats.dateFormat)
              , e = kendo.toString(u, siberia.config.formats.dateFormat);
            i.value(f);
            r.value(e)
        }
        function vt() {
            var n = siberia.common.currentLocationDate()
              , t = n.getMonth() + 1
              , r = n.getFullYear()
              , u = Math.floor(t / 4)
              , f = kendo.toString(tt(u, r), siberia.config.formats.dateFormat);
            i.value(f);
            nt()
        }
        function yt() {
            var n = siberia.common.currentLocationDate(), o = n.getMonth() + 1, s = n.getFullYear(), u = Math.floor(o / 4), t = u - 1, f, e;
            u === 0 && (t = 3,
            n.setYear(s - 1));
            f = kendo.toString(tt(t, n.getFullYear()), siberia.config.formats.dateFormat);
            e = kendo.toString(st(t, n.getFullYear()), siberia.config.formats.dateFormat);
            i.value(f);
            r.value(e)
        }
        function pt() {
            var t = siberia.common.currentLocationDate()
              , u = t.getFullYear()
              , n = u - 1
              , f = new Date(n,0,1)
              , e = new Date(n,11,31)
              , o = kendo.toString(f, siberia.config.formats.dateFormat)
              , s = kendo.toString(e, siberia.config.formats.dateFormat);
            i.value(o);
            r.value(s)
        }
        function wt() {
            var n = siberia.common.currentLocationDate()
              , t = siberia.common.currentLocationDate()
              , u = new Date(n.setDate(n.getDate() - 30));
            i.value(kendo.toString(u, siberia.config.formats.dateFormat));
            r.value(kendo.toString(t, siberia.config.formats.dateFormat))
        }
        function bt() {
            var n = siberia.common.currentLocationDate()
              , t = siberia.common.currentLocationDate()
              , u = new Date(t.setDate(t.getDate() - 31))
              , f = new Date(n.setDate(n.getDate() - 60));
            i.value(kendo.toString(f, siberia.config.formats.dateFormat));
            r.value(kendo.toString(u, siberia.config.formats.dateFormat))
        }
        function kt() {
            var n = siberia.common.currentLocationDate()
              , t = siberia.common.currentLocationDate()
              , u = new Date(t.setDate(t.getDate() - 61))
              , f = new Date(n.setDate(n.getDate() - 90));
            i.value(kendo.toString(f, siberia.config.formats.dateFormat));
            r.value(kendo.toString(u, siberia.config.formats.dateFormat))
        }
        function dt() {
            var n = siberia.common.currentLocationDate()
              , t = siberia.common.currentLocationDate()
              , u = new Date(t.setDate(t.getDate() - 91))
              , f = new Date(n.setDate(n.getDate() - 120));
            i.value(kendo.toString(f, siberia.config.formats.dateFormat));
            r.value(kendo.toString(u, siberia.config.formats.dateFormat))
        }
        function gt() {
            var n = siberia.common.currentLocationDate()
              , t = new Date(n.setDate(n.getDate() - 121));
            i.value("");
            r.value(kendo.toString(t, siberia.config.formats.dateFormat))
        }
        function ft() {
            i.value("");
            r.value(kendo.toString(u.value(), siberia.config.formats.dateFormat))
        }
        function f() {
            e.children("input:radio").prop("checked", !1);
            h.children("input:radio").prop("checked", !1);
            o.children("input:radio").prop("checked", !1);
            c.children("input:radio").prop("checked", !1);
            s.children("input:radio").prop("checked", !1);
            l.children("input:radio").prop("checked", !1);
            a.children("input:radio").prop("checked", !1);
            v.children("input:radio").prop("checked", !1);
            y.children("input:radio").prop("checked", !1);
            p.children("input:radio").prop("checked", !1);
            w.children("input:radio").prop("checked", !1);
            b.children("input:radio").prop("checked", !1);
            k.children("input:radio").prop("checked", !1)
        }
        function ni(g) {
            var nt = n.extend({}, et, g), tt, ot, st;
            if (t = n(nt.containerSelector),
            t.length !== 0) {
                tt = t.find(nt.dateFromSelector);
                tt.focus(function() {
                    d()
                });
                ot = t.find(nt.dateToSelector);
                ot.focus(function() {
                    d()
                });
                st = t.find(nt.dateAsAtSelector);
                st.focus(function() {
                    d()
                });
                i = tt.data("kendoDatePicker");
                i != null && i.bind("change", function() {
                    f()
                });
                r = ot.data("kendoDatePicker");
                r != null && r.bind("change", function() {
                    f()
                });
                u = st.data("kendoDatePicker");
                u != null && u.bind("change", function() {
                    n("#DateRangeOption").val("0");
                    f();
                    ft()
                });
                e = t.find(nt.currentWeekButtonSelector);
                e.on("change synteticChange", function() {
                    rt()
                });
                o = t.find(nt.currentMonthButtonSelector);
                o.on("change synteticChange", function() {
                    ut()
                });
                s = t.find(nt.currentQuarterButtonSelector);
                s.on("change synteticChange", function() {
                    vt()
                });
                h = t.find(nt.lastWeekButtonSelector);
                h.on("change synteticChange", function() {
                    lt()
                });
                c = t.find(nt.lastMonthButtonSelector);
                c.on("change synteticChange", function() {
                    at()
                });
                l = t.find(nt.lastQuarterButtonSelector);
                l.on("change synteticChange", function() {
                    yt()
                });
                lastYearButton = t.find(nt.lastYearButtonSelector);
                lastYearButton.on("change synteticChange", function() {
                    pt()
                });
                a = t.find(nt.todayTransactionReportSelector);
                a.on("change synteticChange", function() {
                    it()
                });
                v = t.find(nt.yesterdayTransactionReportSelector);
                v.on("change synteticChange", function() {
                    ct()
                });
                y = t.find(nt.currentToThirtyButtonSelector);
                y.on("change synteticChange", function() {
                    n(".js-date-range-option").val("1");
                    n("#AsAt").data("kendoDatePicker").value("");
                    wt()
                });
                p = t.find(nt.thirtyOneToSixtyButtonSelector);
                p.on("change synteticChange", function() {
                    n(".js-date-range-option").val("2");
                    n("#AsAt").data("kendoDatePicker").value("");
                    bt()
                });
                w = t.find(nt.sixtyOneToNinetyButtonSelector);
                w.on("change synteticChange", function() {
                    n(".js-date-range-option").val("3");
                    n("#AsAt").data("kendoDatePicker").value("");
                    kt()
                });
                b = t.find(nt.ninetyOneToOneTwentyButtonSelector);
                b.on("change synteticChange", function() {
                    n(".js-date-range-option").val("4");
                    n("#AsAt").data("kendoDatePicker").value("");
                    dt()
                });
                k = t.find(nt.oneTwentyPlusButtonSelector);
                k.on("change synteticChange", function() {
                    n(".js-date-range-option").val("5");
                    n("#AsAt").data("kendoDatePicker").value("");
                    gt()
                })
            }
        }
        var et = {
            containerSelector: null,
            dateFromSelector: "#From",
            dateToSelector: "#To",
            dateAsAtSelector: "#AsAt",
            currentWeekButtonSelector: ".js-current-week",
            currentMonthButtonSelector: ".js-current-month",
            currentQuarterButtonSelector: ".js-current-quarter",
            lastWeekButtonSelector: ".js-last-week",
            lastMonthButtonSelector: ".js-last-month",
            lastQuarterButtonSelector: ".js-last-quarter",
            lastYearButtonSelector: ".js-last-year",
            todayTransactionReportSelector: ".js-today-report",
            yesterdayTransactionReportSelector: ".js-yesterday-report",
            currentToThirtyButtonSelector: ".js-current-to-thirty",
            thirtyOneToSixtyButtonSelector: ".js-thirty-one-to-sixty",
            sixtyOneToNinetyButtonSelector: ".js-sixty-one-to-ninety",
            ninetyOneToOneTwentyButtonSelector: ".js-ninety-one-to-one-twenty",
            oneTwentyPlusButtonSelector: ".js-one-twenty-plus"
        }, ot = "input[name=dateFilter]", t, i, r, u, e, o, s, h, c, l, a, v, y, p, w, b, k;
        return {
            init: ni,
            resetSelectedState: f,
            applyToday: it,
            applyCurrentWeek: rt,
            applyCurrentMonth: ut,
            setAsAtDateWithToday: ht
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.newDictionaryItemPopup");
    siberia.newDictionaryItemPopup = function() {
        function t() {
            n(".js-new-practice-dictionary-item").on("click", i)
        }
        function i(t) {
            t.preventDefault();
            var i = n(t.currentTarget).attr("data-practice-dictionary-name")
              , u = n(t.currentTarget).attr("data-practice-dictionary-type")
              , f = n(t.currentTarget).closest(".js-practice-dictionary-control").find('[data-role="multiselect"]').data("kendoMultiSelect");
            siberia.popup.create("#new-practice-dictionary-item-popup", {
                windowOptions: {
                    title: text.global.titles.addDictionaryItem(i)
                },
                clear: function() {
                    n("#NewDictionaryItem_Text").val("");
                    n("#NewDictionaryItem_DictionaryType").val(u)
                },
                success: function(n) {
                    r(n, f)
                }
            })
        }
        function r(n, t) {
            var r = t.value(), i;
            r.push(n.Id);
            i = t.dataSource.data();
            i.push(n);
            t.dataSource.data(i);
            t.value(r)
        }
        return {
            init: t
        }
    }();
    n(document).ready(function() {
        siberia.newDictionaryItemPopup.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.dictionaryAdministration");
    siberia.dictionaryAdministration = function() {
        function d(n, t) {
            siberia.confirmationPopup.open("#delete-unused-item-confirmation-popup", function() {
                t.data("kendoGrid").dataSource.remove(n);
                r(n, t)
            })
        }
        function g(t) {
            var f;
            t.preventDefault();
            var r = n(t.target)
              , e = n(r.closest(".k-grid"))
              , i = e.data("kendoGrid")
              , o = i.dataItem(r.closest("tr"))
              , u = n(".js-global-spinner-container");
            u.spinner(!0);
            f = i.wrapper.attr("data-set-default-patient-account-type");
            i && n.ajax({
                type: "POST",
                url: f,
                contentType: "application/json",
                data: JSON.stringify({
                    id: o.Id
                }),
                success: function(n) {
                    siberia.validation.processGridActionAjaxErrors(n.Errors, !0);
                    i.dataSource.read()
                },
                complete: function() {
                    u.spinner(!1)
                }
            })
        }
        function nt(t) {
            t.preventDefault();
            var u = n(t.currentTarget)
              , i = n(u.closest(".k-grid"))
              , f = i.data("kendoGrid")
              , r = f.dataItem(u.closest("tr"))
              , e = r.IsDeactivated
              , s = e ? i.data("activate-item") : i.data("deactivate-item")
              , o = n(".js-global-spinner-container");
            o.spinner(!0);
            n.ajax({
                type: "POST",
                url: s,
                contentType: "application/json",
                data: JSON.stringify({
                    id: r.Id
                }),
                success: function(t) {
                    var u = !0;
                    t.Errors && (u = siberia.validation.processGridActionAjaxErrors(t.Errors, !0));
                    u && f.dataSource.pushUpdate(n.extend({}, r, {
                        IsDeactivated: !e
                    }));
                    t === !0 && d(r, i)
                },
                complete: function() {
                    o.spinner(!1)
                }
            })
        }
        function tt(n) {
            return n.map(function(n) {
                return {
                    ItemNumber: n
                }
            })
        }
        function it(n, t) {
            s(n, t, !0)
        }
        function rt(n, t) {
            s({
                item: n
            }, t, !1)
        }
        function s(i, r, u) {
            siberia.popup.create("#waiting-room-status-popup", {
                windowOptions: {
                    title: u ? text.global.titles.addWaitingRoomWorkflow : text.global.titles.editWaitingRoomWorkflow,
                    width: "580"
                },
                clear: function() {
                    var t = "#waiting-room-status-popup", r;
                    n(t + ' [name$="Id"]').val(i.item.Id);
                    n(t + ' [name$="Name"]').val(i.item.Name);
                    r = n(t + ' [name$="DefaultWaitingRoomStatusColor"]').val();
                    n(t + ' [name$="SelectedColor"]').data("kendoColorPicker").value(i.item.Color || r)
                },
                success: function() {
                    n(r.delegateTarget).data("kendoGrid").dataSource.read()
                },
                cancel: function() {
                    i.cancel && i.cancel()
                },
                close: function() {
                    t(n(r.delegateTarget).data("kendoGrid"), !0)
                }
            })
        }
        function ut(n, t) {
            h(n, t, !0)
        }
        function ft(n, t) {
            h({
                item: n
            }, t, !1)
        }
        function h(i, r, u) {
            siberia.popup.create("#appointment-type-popup", {
                windowOptions: {
                    title: u ? text.global.titles.addAppointmentType : text.global.titles.editAppointmentType,
                    width: "580"
                },
                clear: function() {
                    n("#AppointmentType_Id").val(i.item.Id);
                    n("#AppointmentType_Name").val(i.item.Name);
                    n("#AppointmentType_AppointmentInterval").data("kendoNumericTextBox").value(i.item.AppointmentInterval);
                    var t = n("#AppointmentType_DefaultAppointmentTypeColor").val();
                    n("#AppointmentType_Color").data("kendoColorPicker").value(i.item.Color || t);
                    n("#AppointmentType_IsGroupAppointmentType").prop("checked", i.item.IsGroupAppointmentType);
                    n("#AppointmentType_GroupAppointmentNonBillableItems").prop("checked", i.item.GroupAppointmentNonBillableItems);
                    n("#AppointmentType_GroupAppointmentMaxPatientNumber").data("kendoNumericTextBox").value(i.item.GroupAppointmentMaxPatientNumber);
                    siberia.multiSelect.attachValue("#AppointmentType_GroupAppointmentItemNumbers", tt(i.item.GroupAppointmentItemNumbers), "ItemNumber");
                    n("#appointment-type-popup .js-group-appointment-type-field").toggle(i.item.IsGroupAppointmentType)
                },
                init: function() {
                    siberia.requiredIf.checkRequired(n("#AppointmentType_GroupAppointmentMaxPatientNumber"))
                },
                success: function() {
                    n(r.delegateTarget).data("kendoGrid").dataSource.read()
                },
                cancel: function() {
                    i.cancel && i.cancel()
                },
                close: function() {
                    t(n(r.delegateTarget).data("kendoGrid"), !0)
                }
            })
        }
        function r(n, t) {
            t.data("kendoGrid").dataSource.sync()
        }
        function et(n, t) {
            c(n, t, !0)
        }
        function ot(n, t) {
            c({
                item: n
            }, t, !1)
        }
        function c(i, r, u) {
            siberia.popup.create("#scheduler-category-popup", {
                windowOptions: {
                    title: u ? text.global.titles.addSchedulerCategory : text.global.titles.editSchedulerCategory,
                    width: "580"
                },
                clear: function() {
                    var t = i.item.SelectedAppointmentTypeIds || [], r = n("#SchedulerCategory_SelectedAppointmentTypeIds").data("kendoMultiSelect"), f = r.dataSource.read({
                        ids: JSON.stringify(t)
                    }), u;
                    f.then(function() {
                        r.value(t)
                    });
                    n("#SchedulerCategory_Id").val(i.item.Id);
                    n("#SchedulerCategory_Name").val(i.item.Name);
                    u = n("#SchedulerCategory_DefaultSchedulerCategoryColor").val();
                    n("#SchedulerCategory_Color").data("kendoColorPicker").value(i.item.Color || u)
                },
                success: function() {
                    n(r.delegateTarget).data("kendoGrid").dataSource.read()
                },
                cancel: function() {
                    i.cancel && i.cancel()
                },
                close: function() {
                    t(n(r.delegateTarget).data("kendoGrid"), !0)
                }
            })
        }
        function st(n, t) {
            l(n, t, !0)
        }
        function l(i, r, u) {
            siberia.popup.create("#dictionary-billable-item-popup", {
                windowOptions: {
                    title: u ? text.global.titles.addBillableItem : text.global.titles.editBillableItem,
                    width: "580"
                },
                clear: function() {
                    n("#DictionaryBillableItem_Id").val(i.item.Id);
                    n("#DictionaryBillableItem_ItemNumber").val(i.item.ItemNumber);
                    n("#DictionaryBillableItem_Name").val(i.item.Name)
                },
                success: function() {
                    n(r.delegateTarget).data("kendoGrid").dataSource.read()
                },
                cancel: function() {
                    i.cancel && i.cancel()
                },
                close: function() {
                    t(n(r.delegateTarget).data("kendoGrid"), !0)
                }
            })
        }
        function ht(n, t) {
            l({
                item: n
            }, t, !1)
        }
        function ct(t) {
            var u = n(".js-global-spinner-container"), f, r, i;
            if (u.spinner(!0),
            f = n(".js-grid-container"),
            f.hide(),
            r = t.sender.dataItem(),
            i = n(r.GridContainerSelector),
            r && n(i).length) {
                n("#DictionaryType").val(r.Id);
                i.find('[data-role="grid"]').data("kendoGrid").dataSource.page(1);
                i.show();
                n(i).off("click", ".js-deactivate");
                n(i).on("click", ".js-deactivate", nt)
            }
            u.spinner(!1)
        }
        function a(t) {
            var r = n(t)
              , u = r.data("kendoGrid");
            if (u) {
                siberia.grid.initClientGrid({
                    gridSelector: t,
                    deleteAction: v,
                    customAction: i
                });
                u.bind("edit", b);
                u.dataSource.bind("requestEnd", p);
                r.on("keyup", "input.k-textbox", y);
                r.on("click", ".js-change-item-state", w)
            }
        }
        function lt(t) {
            var u = n(t)
              , r = u.data("kendoGrid");
            if (r) {
                siberia.grid.initClientGrid({
                    gridSelector: t,
                    deleteAction: v,
                    customAction: i
                });
                r.bind("edit", function(n) {
                    e(n, !1);
                    b(n)
                });
                r.dataSource.bind("requestEnd", p);
                u.on("keyup", "input.k-textbox", y);
                u.on("click", ".js-change-item-state", w);
                u.on("change", ".js-default-account-type-buttons", g);
                r.bind("save", function(n) {
                    e(n, !0)
                });
                r.bind("cancel", function(n) {
                    e(n, !0)
                })
            }
        }
        function e(t, i) {
            i ? n(".js-default-account-type-buttons").removeAttr("disabled") : n(".js-default-account-type-buttons").attr("disabled", !0)
        }
        function i(t, i) {
            var r = n(i.target)
              , e = n(i.delegateTarget)
              , o = e.data("kendoGrid")
              , f = n(".js-global-spinner-container");
            r.is(".js-client-grid-sort-az") && (f.spinner(!0),
            n.ajax({
                type: "POST",
                url: r.attr("data-param"),
                contentType: "application/json",
                data: JSON.stringify({
                    dictionaryType: u()
                }),
                success: function(n) {
                    n.Errors && siberia.validation.processGridActionAjaxErrors(n.Errors, !0)
                }
            }).then(function() {
                return o.dataSource.read()
            }).then(function() {
                f.spinner(!1)
            }))
        }
        function v(t, i) {
            var r = n(".js-global-spinner-container");
            r.spinner(!0);
            i.data("kendoGrid").dataSource.sync().always(function() {
                r.spinner(!1)
            })
        }
        function y(i) {
            if (i.keyCode == 13 || i.keyCode == 27) {
                var r = n(i.currentTarget).closest('[data-role="grid"]').data("kendoGrid");
                r && (i.keyCode == 13 && (n(i.currentTarget).trigger("blur"),
                r.saveRow()),
                i.keyCode == 27 && r.cancelRow(),
                t(r, !0))
            }
        }
        function p(n) {
            n && n.type == "create" && !n.response.Errors && n.sender.read()
        }
        function w(t) {
            var i = n(".js-global-spinner-container");
            i.spinner(!0);
            var r = n(t.delegateTarget)
              , e = r.data("kendoGrid")
              , o = kendo.format(r.attr("data-item-change-state-url"), u())
              , s = e.dataItem(n(t.currentTarget).closest("tr"));
            n.ajax({
                type: "POST",
                url: o,
                contentType: "application/json",
                data: JSON.stringify({
                    model: s,
                    practiceAdminMode: f()
                }),
                complete: function() {
                    e.dataSource.read();
                    i.spinner(!1)
                }
            })
        }
        function b(n) {
            n.container.find(".js-generic-grid-read-mode-buttons").hide();
            n.container.find(".js-generic-grid-edit-mode-buttons").show()
        }
        function at(n) {
            var i = n.data("kendoGrid");
            i.bind("edit", function(n) {
                t(n.sender, !1)
            });
            i.bind("cancel", function(n) {
                t(n.sender, !0)
            });
            i.bind("save", function(n) {
                n.sender.dataSource.hasChanges() || t(n.sender, !0)
            });
            i.dataSource.bind("requestEnd", function(n) {
                (n.type === "create" || n.type === "update") && n.response && !n.response.Errors && t(i, !0)
            });
            n.kendoSortable({
                filter: "table > tbody > tr:not(.k-grid-edit-row)",
                connectWith: n,
                cursor: "move",
                placeholder: function(n) {
                    return n.clone().addClass("k-state-hover").css("opacity", .5)
                },
                hint: function(n) {
                    var t = kendo.template('<div class="k-draggable">#: cellText #<\/div>');
                    return t({
                        cellText: n.text()
                    })
                },
                change: function(n) {
                    var r = n.newIndex
                      , t = i.dataSource.at(n.oldIndex);
                    i.dataSource.pushDestroy(t);
                    i.dataSource.insert(r, t);
                    vt(i)
                }
            })
        }
        function t(t, i) {
            var r = "#" + t.wrapper.attr("id")
              , u = n(r).data("kendoSortable");
            u && (u.options.disabled = i ? null : r + " tr")
        }
        function vt(t) {
            var i = n(".js-global-spinner-container"), r, f;
            i.spinner(!0);
            r = t.dataSource.data();
            f = t.wrapper.attr("data-save-items-order-url");
            n.ajax({
                type: "POST",
                url: f,
                contentType: "application/json",
                data: JSON.stringify({
                    items: r,
                    dictionaryType: u()
                }),
                success: function(n) {
                    siberia.validation.processGridActionAjaxErrors(n.Errors)
                },
                error: siberia.validation.showGridNetworkError,
                complete: function() {
                    t.dataSource.read();
                    i.spinner(!1)
                }
            })
        }
        function u() {
            return n("#DictionaryType").length > 0 ? n("#DictionaryType").val() : 0
        }
        function f() {
            return n("#DictionaryPaMode").val() != "" ? n("#DictionaryPaMode").val() : "false"
        }
        function yt(t) {
            var i = n(t).data("kendoGrid");
            if (i)
                return i.dataSource.skip()
        }
        function pt() {
            return {
                text: n(".js-client-multiselect .js-multiselect-dictonary-injury-illness").data("kendoMultiSelect").input.val(),
                dictionaryType: n(".js-DictionaryType-injury-illness").length > 0 ? n(".js-DictionaryType-injury-illness").val() : 0
            }
        }
        function wt() {
            var n = yt("#dictionary-list-grid");
            return n != undefined ? {
                dictionaryType: u(),
                insertAtPosition: n,
                practiceAdminMode: f()
            } : {
                dictionaryType: u(),
                practiceAdminMode: f()
            }
        }
        function bt(t) {
            return function() {
                return {
                    text: n(t).data("kendoMultiSelect").input.val()
                }
            }
        }
        function kt() {
            return {
                practiceAdminMode: f()
            }
        }
        function dt() {
            o != !0 && (o = !0,
            n("#doctor-dictionary-list-grid").data("kendoGrid").dataSource.bind("requestEnd", gt))
        }
        function gt(t) {
            t.type == "update" && n("#doctor-dictionary-list-grid").data("kendoGrid").dataSource.read()
        }
        var o = !1
          , k = function() {
            if (n("#dictionary-list-grid").length !== 0) {
                var t = n("#dictionary-list").data("kendoDropDownList");
                t && (t.bind("change", ct),
                t.dataItems().length === 1 && (t.select(1),
                t.trigger("change")));
                a("#dictionary-list-grid");
                lt("#patient-account-types-grid");
                siberia.grid.initClientGrid({
                    gridSelector: "#waiting-room-status-grid",
                    addAction: it,
                    editAction: rt,
                    deleteAction: r,
                    customAction: i,
                    isCustomEditing: !0
                });
                siberia.grid.initClientGrid({
                    gridSelector: "#appointment-types-grid",
                    addAction: ut,
                    editAction: ft,
                    deleteAction: r,
                    customAction: i,
                    isCustomEditing: !0
                });
                siberia.grid.initClientGrid({
                    gridSelector: "#scheduler-categories-grid",
                    addAction: et,
                    editAction: ot,
                    deleteAction: r,
                    customAction: i,
                    isCustomEditing: !0
                });
                siberia.grid.initClientGrid({
                    gridSelector: "#dictionary-billable-items-grid",
                    addAction: st,
                    editAction: ht,
                    deleteAction: r,
                    customAction: i,
                    isCustomEditing: !0
                });
                n(".js-sortable-grid").each(function(t, i) {
                    at(n(i))
                });
                n("#AppointmentType_IsGroupAppointmentType").on("change", function() {
                    n("#appointment-type-popup .js-group-appointment-type-field").toggle()
                })
            }
        };
        return {
            init: k,
            getMultiSelectText: bt("#AppointmentType_GroupAppointmentItemNumbers"),
            initDictionaryGrid: a,
            getDictionaryType: wt,
            getPaMode: kt,
            refreshOnEdit: dt,
            getDictionaryTypeInjuryIllness: pt
        }
    }();
    n(document).ready(function() {
        siberia.dictionaryAdministration.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.doctorDictionary");
    siberia.doctorDictionary = function() {
        function e() {
            var t = n("#doctor-dictionary-list-grid");
            if (t.length > 0) {
                siberia.dictionaryAdministration.initDictionaryGrid(t);
                n("body").on("click", ".js-configure-dictionary", o)
            }
        }
        function o(i) {
            i.preventDefault();
            var r = n(i.currentTarget)
              , u = r.data("doctor-dictionary-name")
              , f = r.data("field-multiline")
              , e = n("#doctor-dictionary-list-grid").data("kendoGrid");
            e.columns[0].editor = f ? kendo.template(n("#doctor-dictionary-list-grid-multiline-edit-template").html())({}) : kendo.template(n("#doctor-dictionary-list-grid-singleline-edit-template").html())({});
            siberia.popup.create("#doctor-dictionary-popup", {
                windowOptions: {
                    title: u,
                    width: "870"
                },
                clear: function() {
                    var t = r.data("doctor-dictionary-type");
                    n("#DictionaryType").val(t);
                    n("#doctor-dictionary-list-grid").data("kendoGrid").dataSource.page(1)
                },
                close: function() {
                    var u = r.parent().find('[data-role="multiselect"]'), i = u.data("kendoMultiSelect"), f, e;
                    if (i)
                        if (f = u.data("read-doctor-items"),
                        e = i.dataItems().slice(),
                        f)
                            n.ajax({
                                type: "POST",
                                async: !1,
                                url: f,
                                success: function(n) {
                                    i.dataSource.data(n);
                                    t(i, e)
                                }
                            });
                        else if (u[0] && u[0].id != "WorkCoverClaim_InjuryIllnessId") {
                            i.one("dataBound", function() {
                                t(i, e)
                            });
                            i.dataSource.read()
                        }
                }
            })
        }
        function t(t, i) {
            (siberia.multiSelect.clear(t),
            typeof i != "undefined" && i != null) && n.each(i, function(n, i) {
                h(t, i)
            })
        }
        function s(n, i) {
            if (!n._isBound() && n.dataSource.transport.options && n.dataSource.transport.options.read) {
                n.one("dataBound", function() {
                    t(n, i)
                });
                n.dataSource.read()
            } else
                t(n, i)
        }
        function r(n) {
            return n.match("^" + i)
        }
        function u(t) {
            n.each(n(t + '[data-role="multiselect"]'), function() {
                var t = n(this).data("kendoMultiSelect");
                t && t.bind("filtering", function(u) {
                    var f = u && u.filter && u.filter.value ? u.filter.value.toLowerCase() : ""
                      , e = n.grep(t.dataSource.data(), function(n) {
                        return r(n.Id)
                    })
                      , o = n.grep(t.value(), function(n) {
                        return r(n)
                    });
                    n.each(e, function(i, r) {
                        var u = !1;
                        n.each(o, function(n, t) {
                            return t === r.Id ? (u = !0,
                            !1) : !0
                        });
                        u || t.dataSource.remove(r)
                    });
                    f && (t.dataSource.add({
                        Id: i + f,
                        Text: f
                    }),
                    t.open())
                })
            })
        }
        function h(t, r) {
            var u, e, f;
            t && r && r.Id && (u = r.Id,
            e = u.match("^" + i) || n.grep(t.dataSource.data(), function(n) {
                return n.Id == u
            }).length === 0,
            e && t.dataSource.add({
                Id: u,
                Text: r.Text
            }),
            f = t.value().slice(),
            f.push(u),
            t.options.maxSelectedItems === 1 && (f = [u]),
            t.dataSource.filter({}),
            t.value(f))
        }
        function c(t) {
            var i = n('span[data-custom-item-span-id="' + t + '"]')
              , r = i.attr("class");
            r != null && i.parents("li").addClass(r)
        }
        var i = "_c_"
          , f = function() {
            e();
            u(".js-custom-doctor-multiselect")
        };
        return {
            init: f,
            initCustomMultiselects: u,
            changeItemColor: c,
            restoreItemsSelection: s
        }
    }();
    n(document).ready(function() {
        siberia.doctorDictionary.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.doctorDictionaryAutoComplete");
    siberia.doctorDictionaryAutoComplete = function() {
        function t(t) {
            var i = n(t);
            i && i.hasClass("js-custom-doctor-autocomplete") && i.data("doctor-autocomplete-cache", {})
        }
        function f(t) {
            var i = {
                debounce: 200,
                maxCount: siberia.config.filtering.maxItemsForOneSelection
            };
            n(t).parents("#operational-report-popup").length && (i.appendTo = n("#operational-report-popup"));
            n(t).parents("#message-to-receptionist-popup").length && (i.appendTo = n("#message-to-receptionist-popup"));
            n(t).textcomplete([{
                match: /(^|\S*)([^\u0000-\u007f]{2,}|\w{2,})$/,
                search: e,
                index: 2,
                replace: function(n) {
                    return n
                },
                context: function(n) {
                    return n.toLowerCase()
                }
            }], i)
        }
        function e(t, i) {
            var r = t
              , u = this.$el.data("doctor-autocomplete-cache")
              , f = r.substring(0, 2);
            if (u[f]) {
                i(u[f].filter(function(n) {
                    return n.toLowerCase().indexOf(r.toLowerCase()) === 0
                }));
                return
            }
            var e = this.$el
              , o = e.data("doctor-dictionary-type")
              , s = e.data("read-doctor-items-url");
            n.ajax({
                url: s,
                type: "POST",
                dataType: "json",
                data: {
                    text: r,
                    dictionaryType: o
                },
                success: function(n) {
                    r.length === 2 && (u[f] = n);
                    i(n)
                }
            })
        }
        function i(i) {
            var r = ".js-custom-doctor-autocomplete";
            i && (r = i + " " + r);
            n(r).each(function(i, r) {
                n(r).focusout(function() {
                    t(this)
                });
                t(r);
                f(r)
            })
        }
        var r = function() {
            i()
        }
          , u = function(n) {
            i(n)
        };
        return {
            init: r,
            reinit: u
        }
    }();
    n(document).ready(function() {
        siberia.doctorDictionaryAutoComplete.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.certificateOfCapacity");
    siberia.certificateOfCapacity = function() {
        function c(t) {
            siberia.popup.create(f, {
                windowOptions: {
                    title: text.global.titles.certificatesOfCapacityList,
                    width: "650"
                },
                init: function() {
                    var i = n(r, f);
                    i.attr("workCoverClaimId", t);
                    i.data("kendoGrid").dataSource.read()
                }
            })
        }
        function l() {
            siberia.grid.initClientGrid({
                gridSelector: r,
                editAction: a,
                deleteAction: v,
                customSelector: ".js-complete-certificate-of-capacity",
                isCustomEditing: !0
            })
        }
        function a(t) {
            var r = null
              , f = function() {
                r && r.close()
            };
            siberia.popup.create(i, {
                windowOptions: {
                    title: text.global.titles.editCertificateOfCapacity,
                    width: "960"
                },
                preLoadOptions: {
                    showSpinnerForParentPopup: !0,
                    dataUrl: n(i).attr("data-get-popup-content-url"),
                    data: {
                        certificateId: t.Id
                    },
                    preLoadSuccess: function(t) {
                        n(".js-popup-content-container", i).html(t);
                        n('input[type="radio"]', i).each(function() {
                            n(this).data(u, n(this).prop("checked"))
                        });
                        h(i)
                    }
                },
                preSubmit: function(t) {
                    n(t.currentTarget).hasClass("js-open-new-tab") && (r = window.open("about:blank", "_blank"))
                },
                success: function(t, i) {
                    if (n(i.currentTarget).hasClass("js-print-certificate-of-capacity")) {
                        var u = n(i.currentTarget).attr("data-print-certificate-of-capacity-url") + "?certificateId=" + t.Data[0].Id;
                        r.location.href = u
                    }
                },
                ajaxError: f,
                error: f
            })
        }
        function v() {
            var t = n(".js-global-spinner-container");
            t.spinner(!0);
            n(r).data("kendoGrid").dataSource.sync().always(function() {
                t.spinner(!1)
            })
        }
        function y(i) {
            var o = n(t), f, r, u;
            o.length && (f = n("#CreateCertificateOfCapacity_WorkcoverClaimId").data("kendoDropDownList"),
            f.dataSource.transport.options.read.data = {
                patientId: i.patientId
            },
            r = null,
            u = function() {
                r && r.close()
            }
            ,
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.createCertificateOfCapacity,
                    width: "960"
                },
                preLoadOptions: {
                    dataUrl: n(t).attr("data-get-popup-content-url"),
                    preLoadSuccess: function(i) {
                        n(".js-popup-content-container", t).html(i);
                        h(t)
                    }
                },
                extraData: function() {
                    return {
                        workcoverClaimId: n("#CreateCertificateOfCapacity_WorkcoverClaimId").data("kendoDropDownList").value(),
                        locationId: i.locationId,
                        doctorId: i.doctorId,
                        consultId: i.consultId
                    }
                },
                clear: function() {
                    n("#CreateCertificateOfCapacity_WorkcoverClaimId").data("kendoDropDownList").value("");
                    n("#CreateCertificateOfCapacity_CertificateOfCapacityFormId").data("kendoDropDownList").value(i.doctorFavouriteCertificateId || "");
                    e()
                },
                preSubmit: function(t) {
                    n(t.currentTarget).hasClass("js-open-new-tab") && (r = window.open("about:blank", "_blank"))
                },
                success: function(t, i) {
                    if (n(i.currentTarget).hasClass("js-print-certificate-of-capacity")) {
                        var u = n(i.currentTarget).attr("data-print-certificate-of-capacity-url") + "?certificateId=" + t.Data[0].Id;
                        r.location.href = u
                    }
                },
                ajaxError: u,
                error: u
            }))
        }
        function e() {
            var i = n("#CreateCertificateOfCapacity_CertificateOfCapacityFormId").data("kendoDropDownList").value();
            n(".js-certificate-of-capacity-form").hide();
            i && n('.js-certificate-of-capacity-form[data-form-id="' + i + '"]').show();
            siberia.popup.center(t)
        }
        function p() {
            n(t).on("click", 'input[type="radio"]', o);
            n(i).on("click", 'input[type="radio"]', o)
        }
        function o() {
            var t = n(this)
              , i = t.data(u) === !0;
            t.closest("form").find('input[type="radio"][name="' + this.name + '"]').data(u, !1);
            i ? t.prop("checked", !1).trigger("change") : t.data(u, !0)
        }
        function w() {
            var r = t + ", " + i;
            n(r).on("change", "[data-parent-value]", function(t) {
                var i = n(t.currentTarget).closest(".js-dependent-control-group");
                s(i)
            })
        }
        function s(t) {
            n("[data-dependent-value][data-role]", t).each(function() {
                var t = kendo.widgetInstance(n(this));
                t && t.enable(!1)
            });
            n("[data-dependent-value]:not([data-role])", t).prop("disabled", !0);
            n("[data-parent-value]", t).each(function(i, r) {
                var u = n(r).attr("data-parent-value")
                  , f = n(r).prop("checked");
                f && (n('[data-dependent-value~="' + u + '"][data-role]', t).each(function() {
                    var t = kendo.widgetInstance(n(this));
                    t && t.enable(!0)
                }),
                n('[data-dependent-value~="' + u + '"]:not([data-role])', t).prop("disabled", !1))
            })
        }
        function h(t) {
            n(".js-dependent-control-group", t).each(function(n, t) {
                s(t)
            })
        }
        function b() {
            return {
                workCoverClaimId: n(r).attr("workCoverClaimId")
            }
        }
        function k() {
            if (w(),
            p(),
            n(r).length && l(),
            n(t).length) {
                var i = n("#CreateCertificateOfCapacity_CertificateOfCapacityFormId").data("kendoDropDownList");
                i.bind("change", e);
                n(".js-create-certificate-of-capacity").on("click", function(t) {
                    t.preventDefault();
                    var r = n(t.currentTarget).attr("data-location-id")
                      , u = n(t.currentTarget).attr("data-doctor-id")
                      , f = n(t.currentTarget).attr("data-consult-id")
                      , i = n(t.currentTarget).attr("data-patient-id")
                      , e = n(t.currentTarget).attr("data-doctor-favourite-certificate-id");
                    i && y({
                        locationId: r,
                        doctorId: u,
                        consultId: f,
                        patientId: i,
                        doctorFavouriteCertificateId: e
                    })
                })
            }
        }
        var f = "#certificate-of-capacity-list-popup"
          , t = "#create-certificate-of-capacity-popup"
          , i = "#update-certificate-of-capacity-popup"
          , r = "#certificate-of-capacity-list-grid"
          , u = "waschecked";
        return {
            init: k,
            onCertificatesListRead: b,
            openCertificatesListPopup: c
        }
    }();
    n(document).ready(function() {
        siberia.certificateOfCapacity.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.itemFee");
    siberia.itemFee = function() {
        function gt() {
            n("#ItemFee_ItemNumber").change(b);
            n("#ItemFee_ItemNumber").keyup(function(n) {
                n.keyCode == 13 && b()
            });
            var i = n("#ItemFee_DateOfService").data("kendoDateTimePicker");
            if (i && i.bind("change", ci),
            y = n("#ItemFee_AssistantId").data("kendoMultiSelect"),
            y && y.bind("change", l),
            n(".js-associated-items").length == 0)
                n("#item-fee-popup").on("click", ".js-associated-items", ti);
            n("#item-fee-popup .js-item-number-button").on("click", si);
            ii();
            siberia.validation.initValidationFor(t.find("form"), t.find(".js-popup-submit"))
        }
        function ni() {
            if (p = n("#ItemFee_Total").data("kendoNumericTextBox"),
            v = n("#ItemFee_Rebate").data("kendoNumericTextBox"),
            g = n("#ItemFee_MbsScheduleFee").data("kendoNumericTextBox"),
            r = n("#ItemFee_DiscountAmount").data("kendoNumericTextBox"),
            r && r.bind("change", function() {
                e.value("");
                c()
            }),
            e = n("#ItemFee_DiscountPercent").data("kendoNumericTextBox"),
            e && e.bind("change", function() {
                r.value("");
                c()
            }),
            i = n("#ItemFee_Quantity").data("kendoNumericTextBox"),
            i && (i.bind("change", ct),
            i.bind("spin", ct)),
            o = n("#ItemFee_NumberOfFields").data("kendoNumericTextBox"),
            o) {
                o.bind("change", kt);
                o.one("spin", kt)
            }
            f = n("#ItemFee_NumberOfPatients").data("kendoDropDownList");
            f && f.bind("change", hi);
            ui()
        }
        function ti(n) {
            var t = n.target.value;
            b(t)
        }
        function ii() {
            n('input[name="ItemFee.SearchItemsType"]:radio').change(function() {
                l();
                switch (this.value) {
                case ht.MbsNonMbs:
                    n(".js-search-billable-item").removeAttr("disabled", "disabled");
                    break;
                case ht.Stock:
                    n(".js-search-billable-item").attr("disabled", "disabled");
                    break;
                default:
                    return
                }
            })
        }
        function ct() {
            i.value() || i.value(i.min());
            w();
            c()
        }
        function lt() {
            return i ? i.value() : null
        }
        function at() {
            return o ? o.value() : null
        }
        function vt() {
            return y ? y.value()[0] : null
        }
        function yt() {
            return n("#ExternalSurgeonContactId").length ? n("#ExternalSurgeonContactId").val() : null
        }
        function tt() {
            return f ? f.value() : null
        }
        function ri(t) {
            var i = n("label", n(t)), r = i.get(0), u;
            r && r.offsetWidth < r.scrollWidth && (u = i.text().trim(),
            i.attr("title", u))
        }
        function it(n, t) {
            if (t) {
                var i = n.value() - v.value();
                t.value(i < 0 ? 0 : i)
            }
        }
        function ui() {
            n(".js-payment-option", t).each(function(t, i) {
                ri(i);
                var r = n('[name^="user-fee-payment-option"]', i).data("kendoNumericTextBox")
                  , u = n(i).siblings(".js-out-of-pocket").find('[name^="out-of-pocket-fee-payment-option"]').data("kendoNumericTextBox");
                r && r.bind("change", function() {
                    ei();
                    w();
                    c();
                    it(r, u)
                });
                u && u.bind("change", function() {
                    var n = u.value() + v.value();
                    r.value(n);
                    w();
                    c()
                });
                it(r, u)
            });
            n('input[type="radio"][name="ItemFee.ItemPaymentOptionId"]').on("click", function(u) {
                var o = n(u.currentTarget).closest(".js-payment-option"), f;
                wt({
                    discountAmount: r,
                    discountPercent: e,
                    quantityTextBox: i,
                    totalFeeTextBox: p,
                    selectedPaymentSection: o,
                    containerSelector: t,
                    clearDiscounts: !0
                });
                f = n(u.currentTarget).val() == 1;
                f && c()
            })
        }
        function fi() {
            var i = n('[id="ItemFee_ItemPaymentOptionId"]:checked', t).length ? n('[id="ItemFee_ItemPaymentOptionId"]:checked', t) : n("#ItemFee_ItemPaymentOptionId", t);
            return i.closest(".js-payment-option")
        }
        function h(t) {
            t = t ? n(t) : fi();
            var i = t.find('[name^="user-fee-payment-option"]');
            return t.length && i.length ? i.data("kendoNumericTextBox") : null
        }
        function pt(t) {
            return n(t).siblings(".js-out-of-pocket").find('[id^="out-of-pocket-fee-payment-option"]').data("kendoNumericTextBox")
        }
        function wt(t) {
            var i = h(t.selectedPaymentSection), r, o;
            if (i) {
                r = i.element.attr("id");
                n(".js-payment-option", t.containerSelector).each(function(n, t) {
                    var i = h(t), u;
                    i && r !== i.element.attr("id") && (i.enable(!1),
                    u = pt(t),
                    u && u.enable(!1))
                });
                var u = pt(t.selectedPaymentSection)
                  , f = siberia.common.toBoolean(i.element.attr("data-is-editable"))
                  , e = siberia.common.toBoolean(i.element.attr("data-support-discount"));
                t.discountAmount && (o = i.value() * (t.quantityTextBox && t.quantityTextBox.value() || 1),
                t.discountAmount.max(o),
                t.discountAmount.enable(e),
                t.clearDiscounts === !0 && (t.discountAmount.value(""),
                siberia.safetyNet.discardDiscounts()));
                t.discountPercent && (t.discountPercent.enable(e),
                t.clearDiscounts === !0 && t.discountPercent.value(""));
                i.enable(f);
                u && u.enable(f);
                t.totalFeeTextBox && t.totalFeeTextBox.value(i.value());
                siberia.safetyNet.updateSafetyNetSection(i.element)
            }
        }
        function ei() {
            var n = h();
            n.value(n.value() * 1)
        }
        function w() {
            var t = h(), n;
            r && (n = t.value() * (i && i.value() || 1),
            r.value() > n && r.value(n),
            r.max(n))
        }
        function oi(i, r, u, e, o, c, v, y, p, w) {
            var k = i.item, it = i.cancel, g;
            a = r;
            st = siberia.invoiceFeeEstimateCommon.getItems(r);
            d = p;
            ot = w;
            ut = e;
            ft = o;
            et = c;
            g = function() {
                it != null && it()
            }
            ;
            siberia.popup.create("#item-fee-popup", {
                windowOptions: {
                    title: text.global.titles.addNewInvoiceItem,
                    width: "800"
                },
                init: function() {
                    y && (n(".js-item-number-containter").text(y),
                    n("#ItemFee_ItemNumber").val(y),
                    b(null, t.find(".js-popup-submit")))
                },
                ajax: {
                    enabled: !1
                },
                usability: {
                    submitOnEnter: !0,
                    cancelOnEscape: !0,
                    loopTabStops: !0
                },
                preLoadOptions: {
                    showSpinnerForParentPopup: !0,
                    dataUrl: u,
                    data: {
                        externalSurgeonContactId: yt()
                    },
                    preLoadSuccess: function(t) {
                        n("#item-fee-popup .js-popup-content-container").html(t);
                        gt();
                        l()
                    },
                    preLoadError: g
                },
                cancel: g,
                success: function(i, r, u) {
                    var y = t.find(".js-popup-submit").prop("disabled"), l = n("#ItemFee_ItemNumber").val(), c, a, v, e;
                    if (!t.find("form").valid() || !l || y) {
                        u.cancelClose = !0;
                        return
                    }
                    var o = n('[id="ItemFee_ItemPaymentOptionId"]:checked', t).length ? n('[id="ItemFee_ItemPaymentOptionId"]:checked', t) : n("#ItemFee_ItemPaymentOptionId", t)
                      , p = o.closest(".js-payment-option")
                      , s = h(p)
                      , w = s && siberia.common.toBoolean(s.element.attr("data-is-editable"));
                    w && k.set("UserFee", s.value());
                    c = n('input[type="radio"][name="ItemFee.RestrictiveOverrideTypeId"]:checked');
                    a = c.length > 0 ? c.val() : n("#ItemFee_RestrictiveOverrideTypeId").val();
                    k.set("ItemNumber", l);
                    k.set("DateOfService", bt());
                    k.set("AssistantId", vt());
                    k.set("NumberOfFields", at());
                    k.set("Quantity", lt());
                    k.set("DiscountAmount", n("#ItemFee_DiscountAmount").val());
                    k.set("DiscountPercent", n("#ItemFee_DiscountPercent").val());
                    k.set("ItemPaymentOptionId", o.val());
                    k.set("GenericScheduleId", o.attr("data-generic-schedule-id"));
                    k.set("IsAftercare", n("#ItemFee_IsAftercare").prop("checked"));
                    k.set("NotRelatedCarePlan", n("#ItemFee_NotRelatedCarePlan").prop("checked"));
                    k.set("Duration", n("#ItemFee_Duration").val());
                    k.set("Note", n("#ItemFee_Notes").val() || "");
                    k.set("ItemTypeId", n("#ItemFee_ItemTypeId").val());
                    k.set("ExtrasCoverItemPrivateFeeId", n("#ItemFee_ExtrasCoverItemPrivateFeeId").val());
                    k.set("ExtrasCoverItemServiceTypeId", n("#ItemFee_ExtrasCoverItemServiceTypeId").val());
                    k.set("IsGst", n("#ItemFee_IsGstIncluded").val());
                    k.set("CanApplyMpr", n("#ItemFee_CanApplyMpr").val());
                    k.set("RestrictiveOverrideTypeId", a);
                    k.set("AssociatedItemNumber", n("#ItemFee_AssociatedItemNumber").val());
                    k.set("NumberOfPatients", tt());
                    k.set("MedicareSafetyNet", siberia.safetyNet.getSafetyNetRebate());
                    k.set("MedicareSafetyNetTypeId", siberia.safetyNet.getSafetyNetRebateType());
                    f && (v = text.invoices.numberOfPatientsAttended(f.text()),
                    e = v + " " + k.get("Note"),
                    e.length > 256 && (e = e.substr(0, 256)),
                    k.set("Note", e))
                },
                close: function() {
                    n("#item-fee-popup .js-popup-content-container").html("");
                    v && v(k)
                },
                preSubmit: function() {
                    var t = f && !f.value();
                    return t ? (n(".js-patients-number-container").addClass("show-validation-error"),
                    !1) : s ? (nt = !0,
                    !1) : !0
                }
            })
        }
        function bt() {
            var t = n("#ItemFee_DateOfService").length ? n("#ItemFee_DateOfService").data("kendoDateTimePicker").value() : null;
            return t ? kendo.toString(t, siberia.config.formats.dateTimeFormat) : ""
        }
        function si(t) {
            n("#ItemFee_ItemNumber").val(n(t.currentTarget).val());
            d = n(t.currentTarget).data("item-type");
            k("", n(t.currentTarget))
        }
        function kt() {
            k(text.global.status.refreshingFees, o)
        }
        function hi() {
            n(".js-patients-number-container").removeClass("show-validation-error");
            var i = n(".js-patients-attended-number", t)
              , r = tt();
            r ? li().then(function(t) {
                t.ErrorMessage ? (siberia.warnings.container.showWarningWithMessage("#item-popup-warning", "#derived-item-warning", t.ErrorMessage),
                rt(!1)) : t.PaymentOptions && t.PaymentOptions.length && (t.PaymentOptions.forEach(function(t) {
                    var r = n("#user-fee-payment-option-" + t.ItemPaymentOptionId), i, u;
                    r.length && (i = r.data("kendoNumericTextBox"),
                    u = n("#out-of-pocket-fee-payment-option-" + t.ItemPaymentOptionId).data("kendoNumericTextBox"),
                    i.value(t.Fee),
                    it(i, u))
                }),
                i.text(text.invoices.numberOfPatientsAttended(f.text())),
                i.show())
            }) : (i.hide(),
            i.text(""))
        }
        function ci() {
            n("#ItemFee_ItemNumber").val() && k(text.global.status.lookingUpNumber, n("#ItemFee_DateOfService"))
        }
        function b(t, i) {
            k(text.global.status.lookingUpNumber, i || n("#ItemFee_ItemNumber"), t)
        }
        function k(i, r, f) {
            if (!s && t.find("form").valid()) {
                s = !0;
                u(i, !0);
                var e = n("#ItemFee_ItemNumber").val()
                  , c = dt(e, f)
                  , o = n.Deferred()
                  , v = t.find("form")
                  , a = t.find(".js-popup-submit");
                return n.ajax({
                    type: "POST",
                    contentType: "application/json",
                    url: c.findItemUrl,
                    data: c.jsonData
                }).done(function(i) {
                    if (n(".js-item-date-of-service-control").toggle(!!i),
                    !i) {
                        l();
                        n("#ItemFee_ItemNumber").val(e);
                        u(text.invoices.itemNotFound(e), !1);
                        return
                    }
                    if (i.ErrorMessage) {
                        l();
                        n("#ItemFee_ItemNumber").val(e);
                        siberia.warnings.container.showWarningWithMessage("#item-popup-warning", "#derived-item-warning", i.ErrorMessage);
                        return
                    }
                    siberia.warnings.container.hideWarning("#item-popup-warning", "#derived-item-warning");
                    n(".js-item-details-container").html(i);
                    siberia.popup.center(t);
                    ni();
                    w();
                    siberia.safetyNet.initSafetyNet(h);
                    u("", !1);
                    rt(!0);
                    siberia.popup.reInitUsability("#item-fee-popup");
                    o.resolve(i)
                }).fail(function(n) {
                    l();
                    u(text.global.status.ajaxError, !1);
                    o.reject(n)
                }).always(function() {
                    s = !1;
                    n("#item-fee-popup .js-item-details-container").length > 0 && (siberia.validation.initValidationFor(v, a, !0),
                    nt && a.click());
                    r.focus();
                    nt = !1
                }),
                o.promise()
            }
        }
        function li() {
            var t = n.Deferred(), r, i;
            return s ? t.promise() : (s = !0,
            u("Recalculating item...", !0),
            r = n("#ItemFee_ItemNumber").val(),
            i = dt(r),
            n.ajax({
                type: "POST",
                contentType: "application/json",
                url: i.getMbsItemDataUrl,
                data: i.jsonData
            }).done(function(n) {
                u("", !1);
                t.resolve(n)
            }).fail(function(n) {
                u(text.global.status.ajaxError, !1);
                t.reject(n)
            }).always(function() {
                s = !1
            }),
            t.promise())
        }
        function dt(n, t) {
            return {
                findItemUrl: ut,
                getMbsItemDataUrl: et,
                jsonData: JSON.stringify({
                    settings: ai(n, t),
                    items: st
                })
            }
        }
        function c() {
            u(text.global.status.updatingTotal, !0);
            n.ajax({
                type: "POST",
                contentType: "application/json",
                url: ft,
                data: JSON.stringify({
                    itemNumber: n("#ItemFee_ItemNumber").val(),
                    price: h().value(),
                    discountAmount: r ? r.value() : null,
                    discountPercent: e ? e.value() : null,
                    quantity: lt(),
                    rebate: v ? v.value() : null,
                    mbsScheduleFee: g ? g.value() : null
                }),
                success: function(n) {
                    u("", !1);
                    var t = 0 + n.Total;
                    p && p.value(t);
                    siberia.safetyNet.updateExtendedSafetyNet({
                        amount: 0 + n.ExtendedMedicareSafetyNet || 0,
                        amountString: n.ExtendedMedicareSafetyNetString
                    })
                },
                error: function() {
                    u(text.global.status.ajaxError, !1)
                }
            })
        }
        function l() {
            u("", !1);
            rt(!1);
            n("#ItemFee_ItemNumber").val("");
            n("#ItemFee_ItemNumber").prop("disabled", !1);
            n(".js-item-details-container").html("");
            siberia.warnings.container.hideWarning("#item-popup-warning", "#derived-item-warning")
        }
        function u(i, r) {
            n(".js-item-fee-status").length > 0 ? (n(".js-item-fee-status").text(i),
            n(".js-item-fee-spinner").toggle(r)) : t.spinner(r)
        }
        function rt(i) {
            n(".js-item-save", t).prop("disabled", !i)
        }
        function ai(t, i) {
            var r = {
                ItemNumber: t,
                ItemNumberType: d,
                NumberOfFields: at(),
                AssistantId: vt(),
                SurgeonContactId: yt(),
                DateOfService: bt(),
                ManualPatientsNumber: tt(),
                AssociatedItemNumber: i,
                ExtrasCoverItemPrivateFeeId: ot,
                SerializedSurgeonItems: n("#SerializedSurgeonItems").val()
            }, f = a.wrapper.find(".js-mpr-rule"), u;
            return f.length && (r.IsMpr = f.prop("checked"),
            r.MprTypeId = a.wrapper.find('.js-mpr-rule-type[data-role="dropdownlist"]').data("kendoDropDownList").value(),
            u = a.wrapper.find(".js-mpr-for-private-fees"),
            u.length && (r.IsMprForPrivateFeesApplied = u.prop("checked"))),
            n(".opreport-location input").length ? (r.LocationId = n(".opreport-location input").data("kendoDropDownList").value(),
            r.DoctorId = n("#OperationalReport_DoctorId").attr("value")) : r.LocationId = a.wrapper.parent(".js-items-grid-container").find(".js-current-location-id").val(),
            r
        }
        var t = n("#item-fee-popup"), ut, ft, et, d = null, ot = null, a, st = [], r, e, p, v, g, i, o, y, f, s = !1, nt = !1, ht = {
            MbsNonMbs: "1",
            Stock: "2"
        };
        return {
            initFeePopup: oi,
            onPaymentOptionChanged: wt
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.accountHolder");
    siberia.accountHolder = function() {
        function i() {
            t = n("#AccountInfo_AccountHolderId").data("kendoMultiSelect");
            siberia.multiSelect.fixServerFiltering("#AccountInfo_AccountHolderId", "FullNameSearchSafe");
            siberia.common.initWarningConfrimarionEvent("#account-holder-popup", "#confirm-and-force-save-changes", "#NewAccountHolder_ForceSave", "#account-holder-popup .js-popup-submit")
        }
        function r() {
            return t ? {
                text: t.input.val()
            } : {}
        }
        var t;
        return {
            init: i,
            onLoadingAccountHolders: r
        }
    }();
    n(document).ready(function() {
        siberia.accountHolder.init()
    })
}(jQuery),
function(n) {
    function i() {
        function i(n) {
            this.parents(".js-invoice-container").length !== 0 && ((n.length === 0 && [].push.call(n, {}),
            n[0].popup) || (n[0].popup = {
                appendTo: t
            }))
        }
        var r = n.fn.kendoDatePicker
          , u = n.fn.kendoDropDownList
          , f = n.fn.kendoMultiSelect
          , e = n.fn.kendoAutoComplete;
        n.fn.kendoDatePicker = function() {
            return i.bind(this)(arguments),
            r.apply(this, arguments)
        }
        ;
        n.fn.kendoDropDownList = function() {
            return i.bind(this)(arguments),
            u.apply(this, arguments)
        }
        ;
        n.fn.kendoMultiSelect = function() {
            return i.bind(this)(arguments),
            f.apply(this, arguments)
        }
        ;
        n.fn.kendoAutoComplete = function() {
            return i.bind(this)(arguments),
            e.apply(this, arguments)
        }
        ;
        n.fn.htmlAndDestroyKendoElements = function(n) {
            t.html("");
            this.html(n)
        }
    }
    siberia.ensureObject("siberia.invoice");
    var t = n("#KendoPopupContainer");
    t.length > 0 && i();
    siberia.invoice = function() {
        function yt() {
            if (t = n(".js-invoice-container"),
            t.length !== 0) {
                var i = n("#invoice-container");
                it = i.data("is-closed-invoice-url");
                rt = i.data("get-invoice-deletion-info-url");
                ut = i.data("delete-draft-invoice-url");
                ht();
                e();
                pt();
                l();
                kt();
                tt();
                v();
                siberia.kendoTooltipWrapper(ft)
            }
        }
        function pt() {
            if (s = n("#InvoiceTabs").data("kendoTabStrip"),
            s) {
                var t = s.select();
                t.attr("aria-controls") === "InvoiceTabs-1" ? s && s.bind("select", et) : n(window).trigger("rc-invoice-render-claim-tab")
            }
        }
        function et(t) {
            (t && t.contentElement && t.contentElement.id) === "InvoiceTabs-2" && (n(window).trigger("rc-invoice-render-claim-tab"),
            s && s.unbind("select", et))
        }
        function tt() {
            d = n("#print-invoice-toggle").toggleButton().data("toggler");
            g = n("#print-db4-form-toggle").toggleButton().data("toggler");
            nt = n("#print-d1216s-form-toggle").toggleButton().data("toggler")
        }
        function a(t) {
            var u = n("input[id=InvoiceId]").val()
              , f = d && d.isChecked()
              , i = g && g.isChecked()
              , r = nt && nt.isChecked();
            f && (h = window.open("about:blank", "_blank"),
            p(!0),
            i || r || !t || t());
            i && siberia.printing.invoice.printInvoice(!1, u, t);
            r && siberia.printing.invoice.printInvoice(!0, u, t);
            f || i || r || !t || t();
            setTimeout(tt, 0)
        }
        function e() {
            w = n("#items-grid").data("kendoGrid");
            siberia.invoiceFeeEstimateCommon.initReferralEvents(n("#ReferralId"));
            siberia.invoiceFeeEstimateCommon.initGridEvents("#items-grid", f, wt);
            ii();
            ri();
            bt();
            ot("");
            itemsAutosuggest(!0, {
                refreshAction: f
            });
            referralSection(!0);
            bi();
            n(window).trigger("reinit-rc-render-app")
        }
        function wt(n, t) {
            var i = "", r;
            switch (n.InvoiceItemStatusName) {
            case "New":
                i = "#delete-new-invoice-item";
                break;
            case "Hidden":
                i = "#delete-hidden-invoice-item"
            }
            r = function() {
                t.remove(n);
                f()
            }
            ;
            i ? siberia.confirmationPopup.open(i, r) : confirm(text.global.confirms.deleteInvoiceFeeEstimateItem) && r()
        }
        function ot(t) {
            var i = n("#" + t + "ImagingMachineId").data("kendoDropDownList");
            i && i.bind("change", function(i) {
                n("#" + t + "lspnField").text(i.sender.dataItem().Lspn);
                n("#" + t + "equipmentIdField").text(i.sender.dataItem().EquipmentId)
            })
        }
        function bt() {
            st() && n(".js-payment-field").each(function(t, i) {
                var r = n(i).data("kendoNumericTextBox");
                if (r) {
                    n(r.element).on("focusout", function() {
                        setTimeout(function() {
                            b && f()
                        }, 150)
                    });
                    n(r.element).on("keydown", function(n) {
                        n.keyCode === 13 && f()
                    })
                }
            })
        }
        function kt() {
            n(window).on("unload", function() {
                var r = siberia.common.toBoolean(n("#IsSaved").val()), t, i;
                r === !1 && (n(".js-global-spinner-container").spinner(!0),
                t = n("#invoice-container").attr("data-new-invoice-delete-url"),
                i = n("#InvoiceId").val(),
                siberia.common.isInternetExplorer() ? n.ajax({
                    url: t + location.search,
                    type: "POST",
                    async: !1,
                    contentType: "application/json",
                    data: JSON.stringify({
                        invoiceId: i
                    })
                }) : navigator.sendBeacon(t + location.search, JSON.stringify({
                    invoiceId: i
                })),
                n(".js-global-spinner-container").spinner(!1))
            });
            r = !1;
            siberia.common.addUnloadRule(function() {
                return r
            }, null, "");
            n(window).on("beforeunload", function() {
                var i = siberia.common.toBoolean(n("#IsSaved").val()), t;
                i === !1 && (t = n("#InvoiceId").val(),
                siberia.cookies.addDeletedNewInvoiceId(t))
            })
        }
        function dt() {
            var t = kendo.format(n("#invoice-referral-popup").attr("data-get-referral-popup-content-url"), n("#InvoiceId").val());
            siberia.popup.create("#invoice-referral-popup", {
                submitText: text.global.labels.save,
                windowOptions: {
                    title: text.global.titles.popupInvoiceReferrals,
                    width: "500"
                },
                preLoadOptions: {
                    dataUrl: t,
                    preLoadSuccess: function(t) {
                        n("#invoice-referral-popup .js-content-container").htmlAndDestroyKendoElements(t);
                        siberia.invoiceFeeEstimateCommon.initReferralEvents(n("#InvoiceReferral_ReferralId"))
                    }
                },
                success: function() {
                    var t = n("#InvoiceReferral_ReferralId").data("kendoDropDownList").value()
                      , i = {
                        Referral: t ? n("#InvoiceReferral_ReferralId").data("kendoDropDownList").dataItem() : null,
                        NoReferralReason: t ? null : n("#InvoiceReferral_NoReferralReasonId").data("kendoDropDownList").dataItem().Text
                    }
                      , r = kendo.template(n("#template-referral-data").html());
                    n("#referral-data").htmlAndDestroyKendoElements(r(i))
                }
            })
        }
        function gt() {
            var t = kendo.format(n("#invoice-imaging-machine-popup").attr("data-get-imaging-machine-popup-content-url"), n("#InvoiceId").val());
            siberia.popup.create("#invoice-imaging-machine-popup", {
                submitText: text.global.labels.save,
                windowOptions: {
                    title: text.global.titles.popupInvoiceImagingMachines,
                    width: "500"
                },
                preLoadOptions: {
                    dataUrl: t,
                    preLoadSuccess: function(t) {
                        n("#invoice-imaging-machine-popup .js-content-container").htmlAndDestroyKendoElements(t);
                        ot("InvoiceImagingMachine_")
                    }
                },
                success: function() {
                    var t = n("#InvoiceImagingMachine_ImagingMachineId").data("kendoDropDownList").dataItem()
                      , i = t ? {
                        Id: t.Id,
                        Name: t.Name,
                        Lspn: t.Lspn,
                        EquipmentId: t.EquipmentId
                    } : null
                      , r = kendo.template(n("#template-imaging-machine-data").html());
                    n("#imaging-machine-data").htmlAndDestroyKendoElements(r(i))
                }
            })
        }
        function ni(t) {
            var i = n("#ReferralId").data("kendoDropDownList"), r;
            i && (r = i.dataSource.data(),
            r.push({
                Id: t.Id,
                Name: t.Name,
                ProviderNumber: t.ProviderNumber,
                DoctorId: t.DoctorId,
                DoctorFullName: t.DoctorFullName || "",
                StartDate: t.StartDateStr,
                ExpirationDate: t.ExpirationDateStr
            }),
            i.dataSource.data(r),
            i.value(t.Id),
            i.trigger("change"))
        }
        function ti() {
            siberia.referral.popup.openPopup(text.global.titles.addReferral, text.global.labels.create, null, ni)
        }
        function st() {
            return n(".js-payment-field").length
        }
        function ii() {
            n('input[type="radio"][name="Payments.PaymentTab"]').click(function() {
                st() && f()
            })
        }
        function ri() {
            n('.js-location-block input[name="LocationId"]').on("change", function() {
                var t = n(this).val();
                n("#items-grid").parent(".js-items-grid-container").find(".js-current-location-id").val(t);
                n("#NewInvoiceLocationId").val(t);
                n("#Payments_PaymentLocationId").val(t);
                f()
            })
        }
        function ht() {
            function f(n, t, i) {
                r = !0;
                n.preventDefault();
                i ? a(function() {
                    window.opener != null && window.close();
                    window.location.href = t
                }) : (window.opener != null && window.close(),
                window.location.href = t)
            }
            function o(t, i, r) {
                u(t, this, i, function(t) {
                    n(".js-invoice-container").htmlAndDestroyKendoElements(t);
                    n(window).scrollTop(n("#invoice-buttons-container").offset().top);
                    siberia.notification.showSuccessNotification(text.invoices.saveSuccess, n("#invoice-buttons-container"));
                    l();
                    e();
                    r && a()
                })
            }
            t.on("click", "#btnImportQuote", function(n) {
                n.preventDefault();
                oi()
            });
            t.on("click", "#btnInvoiceSaveAndClaim", function(t) {
                r = !0;
                u(t, this, i.save, function(t) {
                    n(".js-invoice-container").htmlAndDestroyKendoElements(t);
                    e();
                    y()
                })
            });
            t.on("click", "#btnInvoiceClaim", function(n) {
                r = !0;
                n.preventDefault();
                y()
            });
            t.on("click", "#btnDeleteInvoice", function(t) {
                var i, u, f;
                r = !0;
                t.preventDefault();
                r = !0;
                confirm(text.invoices.deleteInvoiceConfirm) && (i = n(this),
                i.blur(),
                n(".js-global-spinner-container").spinner(!0),
                u = n("#invoice-container").attr("data-invoice-delete-url"),
                f = n("#InvoiceId").val(),
                n.ajax({
                    url: u + location.search,
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({
                        invoiceId: f
                    }),
                    success: function(r) {
                        siberia.validation.processAjaxErrors(i.closest("form"), r.Errors) ? (window.opener != null && window.close(),
                        window.location.href = n(t.currentTarget).data("return-url")) : n(".js-global-spinner-container").spinner(!1)
                    },
                    error: function() {
                        n(".js-global-spinner-container").spinner(!1);
                        siberia.validation.showFormNetworkError(i.closest("form"))
                    }
                }))
            });
            t.on("click", "#btnDeleteDraftInvoice", function(t) {
                var u, i;
                t.preventDefault();
                u = n(this);
                u.blur();
                i = n("#InvoiceId").val();
                n(".js-global-spinner-container").spinner(!0);
                n.post(rt, {
                    invoiceId: i
                }).then(function(i) {
                    return i.ExceptionMessage ? siberia.notification.showErrorPopup(i.ExceptionMessage, function() {
                        f(t, n(t.currentTarget).data("return-url"))
                    }) : (n("#delete-draft-invoice-popup .js-confirmation-title").htmlAndDestroyKendoElements(i.ConfirmationMessage),
                    siberia.confirmationPopup.openAsync("#delete-draft-invoice-popup"))
                }).then(function(t) {
                    if (t)
                        return n.post(ut, {
                            invoiceId: i
                        })
                }).done(function(i) {
                    i && (i.success ? (r = !0,
                    window.opener != null && window.close(),
                    window.location.href = n(t.currentTarget).data("return-url")) : i.Errors ? siberia.notification.showErrorPopup(siberia.notification.getFirstError(i.Errors)) : i.errorMessage ? siberia.notification.showErrorPopup(i.errorMessage) : siberia.notification.showErrorPopup(text.global.status.networkError))
                }).fail(function() {
                    siberia.notification.showErrorPopup(text.global.status.networkError)
                }).always(function() {
                    n(".js-global-spinner-container").spinner(!1)
                })
            });
            t.on("click", "#btnInvoiceSaveAndClose", function(n) {
                r = !0;
                u(n, this, i.saveAndClose, function(n) {
                    window.opener != null && window.close();
                    window.location.href = n.redirectUrl
                })
            });
            t.on("click", "#btnInvoiceSubmit", function(t) {
                r = !0;
                u(t, this, i.submit, function(t) {
                    t.redirectUrl ? a(function() {
                        window.opener != null && window.close();
                        window.location.href = t.redirectUrl
                    }) : (n(".js-invoice-container").htmlAndDestroyKendoElements(t),
                    e(),
                    v())
                })
            });
            t.on("click", "#btnCloseInvoice", function(t) {
                f(t, n(t.currentTarget).data("return-url"), !0)
            });
            t.on("click", "#btnCancelInvoice", function(t) {
                f(t, n(t.currentTarget).data("return-url"))
            });
            t.on("click", "#linkCloseInvoice", function(t) {
                f(t, n(t.currentTarget).attr("href"))
            });
            t.on("click", "#btnInvoiceSave", function(n) {
                o(n, i.save)
            });
            t.on("click", "#btnInvoiceDraft", function(t) {
                r = !0;
                u(t, this, i.draft, function(t) {
                    n(".js-invoice-container").htmlAndDestroyKendoElements(t);
                    n(window).scrollTop(n("#invoice-buttons-container").offset().top);
                    siberia.notification.showSuccessNotification(text.invoices.saveSuccess, n("#invoice-buttons-container"));
                    l();
                    e();
                    v();
                    a()
                })
            });
            t.on("click", "#btnMoveToDraft", function() {
                ei()
            });
            t.on("click", "#btnInvoiceUnlock", function(t) {
                r = !0;
                t.preventDefault();
                var i = n(this).data("show-warning").toLowerCase() === "true";
                i ? siberia.confirmationPopup.open("#unlock-invoice-confirmation-popup", ct) : ct()
            });
            t.on("click", "#btnChangeReferral", dt);
            t.on("click", "#btnChangeImagingMachine", gt);
            t.on("click", "#btnAddReferral", ti);
            t.on("click", "#btnAdjustInvoice", function(t) {
                t.preventDefault();
                confirm(text.invoices.saveBeforeAdjustConfirm) && u(t, n(t.currentTarget), i.save, function(t) {
                    n(".js-invoice-container").htmlAndDestroyKendoElements(t);
                    siberia.notification.showSuccessNotification(text.invoices.saveSuccess, n("#invoice-buttons-container"));
                    e();
                    at() || ui()
                })
            });
            n("#adjust-invoice-popup").on("change", "#adjustmentConfirmed", function(t) {
                n(".js-popup-submit", "#adjust-invoice-popup").toggleClass("btn-disabled", !t.target.checked)
            });
            n("#adjust-invoice-popup").on("click", "#confirm-and-force-save-changes", function(t) {
                t.preventDefault();
                n("#AdjustmentPopup_WarningsConfirmed").val(!0);
                n("#adjust-invoice-popup .js-popup-submit").trigger("click")
            });
            t.on("click", "#invoiceSaveAndPrint", function(t) {
                r = !0;
                t.preventDefault();
                r = !0;
                n(this).blur();
                window.opener || (h = window.open("about:blank", "_blank"));
                at() ? p() : wi().then(function(n) {
                    n ? p() : u(t, this, i.save, function() {
                        p()
                    })
                })
            });
            t.on("click", "#cc-terminal-switcher-connected", function() {
                n(".extras-cover-claim").removeClass("hidden");
                n("#Payments_PaymentExtrasCoverReceived").closest(".cc-extras-cover-field-input-wrapper").css("visibility", "hidden");
                c = "cc-terminal-switcher-connected"
            });
            t.on("click", "#cc-terminal-switcher-manual", function() {
                n(".extras-cover-claim").addClass("hidden");
                n("#Payments_PaymentExtrasCoverReceived").closest(".cc-extras-cover-field-input-wrapper").css("visibility", "visible");
                c = "cc-terminal-switcher-manual"
            })
        }
        function v() {
            var t = n("#invoice-form");
            siberia.validation.highlightFieldValidationErrorElements(t)
        }
        function ui() {
            var i = n("#InvoiceId").val()
              , t = n("#adjust-invoice-popup");
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.popupAcceptAndBalance,
                    width: "600"
                },
                preLoadOptions: {
                    dataUrl: t.attr("data-get-adjustment-data-url"),
                    data: {
                        invoiceId: i
                    },
                    dataType: "",
                    preLoadSuccess: function(r) {
                        return r.Errors ? (siberia.notification.showErrorPopup(siberia.notification.getFirstError(r.Errors)),
                        !1) : (n("#adjustmentConfirmed", t).prop("checked", !1),
                        n(".js-popup-submit", t).addClass("btn-disabled"),
                        n("#AdjustmentPopup_WarningsConfirmed").val(!1),
                        n("#AdjustmentPopup_InvoiceId").val(i),
                        n("#AdjustmentPopup_Notes").val(""),
                        n("#AdjustmentPopup_PatientAdjustment").val(r.Data.PatientAdjustment),
                        n("#AdjustmentPopup_ClaimAdjustment").val(r.Data.ClaimAdjustment),
                        n("#invoice-patient-adjustment", t).text(r.Data.PatientAdjustmentStr),
                        n("#invoice-claim-adjustment", t).text(r.Data.ClaimAdjustmentStr),
                        n("#invoice-patient-adjustment-label", t).text(r.Data.PatientAdjustmentLabel),
                        n("#invoice-claim-adjustment-label", t).text(r.Data.ClaimAdjustmentLabel),
                        n("#invoice-patient-adjustment", t).closest(".js-adjustment-field").toggle(r.Data.ShowPatientAdjustment),
                        n("#invoice-claim-adjustment", t).closest(".js-adjustment-field").toggle(r.Data.ShowClaimAdjustment),
                        !0)
                    }
                },
                success: f
            })
        }
        function y(i) {
            n(".js-global-spinner-container").spinner(!0);
            var r = n("form", t)
              , u = n("#invoice-container").attr("data-invoice-send-patient-claim-url");
            n.post(u, {
                warningsConfirmed: i === !0
            }).done(function(n) {
                if (siberia.validation.processAjaxErrors(r, n.Errors)) {
                    if (n.Data.ShowClaimConfirmation) {
                        siberia.confirmationPopup.open("#claim-not-paid-invoice-confirmation-popup", function() {
                            i = !0;
                            y(!0)
                        });
                        return
                    }
                    n.Data.IsSuccessful ? window.location.href = n.Data.RedirectUrl : (window.scrollTo(0, 0),
                    fi(n.Data.ErrorsPopupContent, text.global.titles.warning))
                }
            }).error(function() {
                siberia.validation.showFormNetworkError(r)
            }).complete(function() {
                n(".js-global-spinner-container").spinner(!1)
            })
        }
        function fi(t, i) {
            var r = "#claims-submit-result-popup", u;
            n(".js-popup-content-container", r).htmlAndDestroyKendoElements(t);
            u = !!n(".js-claim-patient-invalid-name", r).length;
            siberia.popup.create(r, {
                ajax: {
                    enabled: !1
                },
                windowOptions: {
                    title: i,
                    width: "600"
                },
                clear: function() {
                    n(".js-popup-submit", r).toggle(u);
                    n(".js-popup-cancel", r).text(u ? text.global.labels.cancel : text.global.labels.ok)
                },
                success: function() {
                    y(!0)
                }
            })
        }
        function ct() {
            n(".js-global-spinner-container").spinner(!0);
            var t = n("#invoice-container").data("unlock-invoice-url")
              , i = n("#InvoiceId").val();
            n.post(t, {
                invoiceId: i
            }).done(function(n) {
                n.Errors ? siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)) : location.reload(!0)
            }).error(function() {
                siberia.notification.showErrorPopup(text.global.status.networkError)
            }).complete(function() {
                n(".js-global-spinner-container").spinner(!1)
            })
        }
        function ei() {
            var t = n("#invoice-container").data("move-to-draft-invoice")
              , i = n("#InvoiceId").val();
            n.post(t, {
                invoiceId: i,
                fromStatusId: vt.ready
            }).done(function(n) {
                n.Errors ? (siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)),
                ht()) : (r = !0,
                location.reload(!0))
            }).error(function() {
                siberia.notification.showErrorPopup(text.global.status.networkError)
            }).complete(function() {
                n(".js-global-spinner-container").spinner(!1)
            })
        }
        function oi() {
            siberia.popup.create("#fee-estimate-to-import-popup", {
                windowOptions: {
                    title: text.global.titles.popupInvoiceImportFeeEstimate,
                    width: "460"
                },
                clear: function() {
                    siberia.multiSelect.clearValue("#QuoteId")
                },
                success: function(t) {
                    var i = n("#fee-estimate-to-import-popup").find("form");
                    siberia.validation.processAjaxErrors(i, t.Errors) && si(t)
                }
            })
        }
        function si(t) {
            var i, r, u, e;
            n("#IsMpr").prop("checked", t.IsMpr);
            n("#IsMprForPrivateFeesApplied").prop("checked", t.IsMprForPrivateFeesApplied);
            n("#IsMprForSafetyNetApplied").prop("checked", t.IsMprForSafetyNetApplied);
            i = n('.js-mpr-rule-type[data-role="dropdownlist"]').data("kendoDropDownList");
            i && (i.value(t.MprTypeId),
            t.IsMpr && i.enable(!0));
            n("#ImportedQuoteId").val(t.QuoteId);
            r = n("#AdmissionDate").data("kendoDatePicker");
            r && r.value(t.AdmissionDate || "");
            u = n("#DischargeDate").data("kendoDatePicker");
            u && u.value(t.DischargeDate || "");
            e = n("#KnownGapAmount").data("kendoNumericTextBox");
            e && e.value(t.KnownGapAmount);
            t.ImportedItems && (w.dataSource.data([]),
            w.dataSource.data(t.ImportedItems));
            f(function() {
                n.each(t.Warnings, function() {
                    this.HtmlMessage ? siberia.warnings.container.showWarningWithMessage("#import-fee-estimate-warning-container", "#" + this.HtmlKey, this.HtmlMessage) : siberia.warnings.container.hideWarning("#import-fee-estimate-warning-container", "#" + this.HtmlKey)
                })
            })
        }
        function l() {
            if (c) {
                var t = n("#" + c);
                if (t.length > 0 && n(t[0]).is(":not(:disabled)")) {
                    t.prop("checked", !0);
                    t.click();
                    return
                }
            }
            n.each(n(".cc-terminal-switcher-items input[type=radio]"), function(t, i) {
                var r = n(i);
                if (r.is(":not(:disabled)"))
                    return r.prop("checked", !0),
                    r.click(),
                    c = r[0].id,
                    !1
            })
        }
        function f(t) {
            u(null, null, i.refresh, function(i) {
                n(".js-invoice-container").htmlAndDestroyKendoElements(i);
                e();
                t && typeof t == "function" && t(i);
                l();
                v();
                tt()
            })
        }
        function hi(t) {
            u(null, null, i.saveInvoiceData, function(i) {
                n(".js-invoice-container").htmlAndDestroyKendoElements(i);
                e();
                t && t(i)
            })
        }
        function ci() {
            return n('[name="Payments.PaymentTab"]:checked')[0].value
        }
        function li() {
            return !!n("#refund-tab-radio:checked").length
        }
        function ai() {
            return n("#Payments_PaymentDate").val()
        }
        function vi() {
            var t = []
              , i = n("#items-grid").data("kendoGrid").dataSource.data();
            return n.each(i, function(n, i) {
                i.ItemNumber && i.IsSelectedForPayment && t.push(i.Id)
            }),
            t
        }
        function u(t, r, f, e, s) {
            var p = n("#items-grid"), l, a, v, y, h;
            if (f !== i.refresh || !pi(p)) {
                b = !1;
                t && t.preventDefault();
                r && n(r).blur();
                p.trigger("siberia-serialize-data");
                n(".js-global-spinner-container").spinner(!0);
                s === undefined && (s = !0);
                var k = siberia.invoiceFeeEstimateCommon.getAttachedItemNumber(n("#items-grid"))
                  , c = {
                    attachedItemNumber: k
                }
                  , w = n("#IsMprForPrivateFeesApplied").prop("checked");
                w && n("#IsMprForPrivateFeesApplied").prop("disabled") && (c.IsMprForPrivateFeesApplied = w);
                l = null;
                a = n("select.js-referral-status-dropdown").data("ccDropdown");
                a && (l = a.getValue());
                v = null;
                l || (y = n(".js-referral .js-carousel").data("ccCarousel"),
                y && (v = y.getCurrentItem().attr("data-referral-id")));
                c.ReferralId = v;
                c.NoReferralReasonId = l;
                h = n("#invoice-form");
                h.ajaxSubmit({
                    url: yi(f),
                    data: c,
                    async: s,
                    success: function(i) {
                        if (i.showClaimOverpaidWarning) {
                            n("#claim-overpaid-confirmation-popup .js-confirmation-title").text(i.confirmationMessage);
                            siberia.confirmationPopup.open("#claim-overpaid-confirmation-popup", function() {
                                o = !0;
                                u(t, r, f, e, s)
                            });
                            return
                        }
                        if (i.showInvoiceOverpaidWarning) {
                            siberia.confirmationPopup.open("#invoice-overpaid-confirmation-popup", function() {
                                o = !0;
                                u(t, r, f, e, s)
                            });
                            return
                        }
                        if (i.showItemWarning) {
                            siberia.confirmationPopup.open("#invoiceitem-confirmation-popup", function() {
                                o = !0;
                                u(t, r, f, e, s)
                            });
                            return
                        }
                        siberia.validation.processAjaxErrors(h, i.Errors) ? (o = !1,
                        e && e(i),
                        siberia.validation.scrollToSummary(n(".js-invoice-container form"))) : (n("#items-errors-container").hide(),
                        lt(),
                        siberia.validation.scrollToSummary(h));
                        siberia.kendoTooltipWrapper(ft)
                    },
                    error: function() {
                        siberia.validation.showFormNetworkError(h);
                        lt()
                    },
                    complete: function() {
                        n(".js-global-spinner-container").spinner(!1);
                        b = !0
                    }
                })
            }
        }
        function yi(t) {
            switch (t) {
            case i.draft:
                return n("#invoice-container").attr("data-invoice-draft-url") + "?warningsConfirmed=" + o;
            case i.save:
            case i.saveAndClose:
                return n("#invoice-container").attr("data-invoice-save-url") + location.search + "&savingMode=" + t + "&warningsConfirmed=" + o;
            case i.saveInvoiceData:
                return n("#invoice-container").attr("data-invoice-save-data-url");
            case i.refresh:
                return n("#invoice-container").attr("data-invoice-refresh-url");
            case i.submit:
                return n("#invoice-container").attr("data-invoice-submit-url") + location.search + "&warningsConfirmed=" + o;
            default:
                return ""
            }
        }
        function pi(t) {
            var i = n(t).data("kendoGrid");
            return i.dataSource.data().some(function(n) {
                return !n.ItemNumber
            })
        }
        function lt() {
            h && h.close()
        }
        function p(t) {
            var i = n("#invoice-container").attr("data-invoice-print-view-url");
            h ? (h.location.href = i + window.location.search,
            t || location.reload(!0)) : location.href = i + window.location.search
        }
        function at() {
            var t = n("#IsClosed");
            return t.length > 0 ? siberia.common.toBoolean(t.val()) : !1
        }
        function wi(t) {
            t = t !== !1;
            var u = n("#InvoiceId").val()
              , i = !1
              , r = t ? n.Deferred() : null;
            return n.ajax({
                type: "POST",
                contentType: "application/json",
                url: it,
                async: t,
                data: JSON.stringify({
                    invoiceId: u
                }),
                success: function(n) {
                    i = n && n.result === !0
                },
                complete: function() {
                    t && r.resolve(i)
                }
            }),
            t ? r.promise() : i
        }
        function bi() {
            k && k.length && n.each(k, function(n, t) {
                t()
            })
        }
        function ki() {
            n("#cc-terminal-switcher-connected").prop("disabled", !0)
        }
        var t, r, it, rt, ut, w, o = !1, b = !0, h, k = [], c, i = {
            save: 0,
            saveAndClose: 1,
            saveInvoiceData: 2,
            refresh: 3,
            submit: 4,
            draft: 5
        }, vt = {
            draft: 0,
            submitted: 1,
            exception: 2,
            ready: 3,
            finalized: 4,
            failed: 5
        }, d, g, nt, ft = "#invoice-buttons-container", s;
        return {
            init: yt,
            refresh: f,
            saveInvoiceData: hi,
            isRefundPayment: li,
            getSelectedItemsIds: vi,
            getSelectedPaymentTab: ci,
            getPaymentDate: ai,
            checkCorrectExtrasCoverPaymentMethod: l,
            disableConnectedExtrasCoverPaymentMethod: ki
        }
    }();
    n(document).ready(function() {
        siberia.invoice.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.invoice.history");
    siberia.invoice.history = function() {
        function y() {
            u = n(v).data("serialized-chart-data");
            t = n("#invoice-history-grid");
            i = n("#invoice-history-grid").data("kendoGrid");
            r = n("#invoice-history-chart").data("kendoChart");
            f = n("#balanceFilterOn");
            e = n("#balanceFilterOff");
            f.click(function() {
                s(!0)
            });
            e.click(function() {
                s(!1)
            });
            i && (t.find("tfoot").replaceWith(n("#invoiceHistoryGridFooter").html()),
            i.bind("dataBound", c));
            n("#BulkPayInvoicesBtn").on("click", b);
            n(".js-bulk-pay-all-invoices").on("click", p);
            n("#invoice-history-grid").on("click", ".js-bulk-pay-invoice-checkbox", c);
            h(!1)
        }
        function p(i) {
            var r = n(i.currentTarget).prop("checked") === !0;
            t.find(".js-bulk-pay-invoice-checkbox").each(function() {
                n(this).prop("checked", r)
            });
            l();
            a()
        }
        function c() {
            w();
            l();
            a()
        }
        function w() {
            var i = t.find(".js-bulk-pay-invoice-checkbox").length
              , r = t.find(".js-bulk-pay-invoice-checkbox:checked").length;
            n(".js-bulk-pay-all-invoices").prop("checked", i === r)
        }
        function l() {
            var i = t.find(".js-bulk-pay-invoice-checkbox:checked").length;
            n("#BulkPayInvoicesBtn").toggleClass("btn-disabled", i === 0)
        }
        function a() {
            var r = 0;
            t.find(".js-bulk-pay-invoice-checkbox:checked").each(function(t, u) {
                var f = i.dataItem(n(u).closest("tr"));
                r += f.Debt
            });
            n("#bulk-pay-total-footer").text(kendo.toString(r, "c2"))
        }
        function b(r) {
            r.preventDefault();
            var f = 0
              , u = []
              , e = [];
            t.find(".js-bulk-pay-invoice-checkbox:checked").each(function(t, r) {
                var o = i.dataItem(n(r).closest("tr"));
                f += o.InvoiceTotal;
                u.push(o.InvoiceId);
                e.push(o.InvoiceNumber)
            });
            siberia.invoicePaymentsPopup.open({
                popupSelector: "#bulk-pay-popup",
                popupTitle: text.global.titles.bulkPay,
                invoiceData: {
                    "BulkPay.InvoiceIds": u
                },
                clearPopup: function(t) {
                    n(".js-bulk-pay-patient-field", t).text(n("#InvoiceHistoryPatientName").val());
                    n(".js-bulk-pay-invoiced-total-field", t).text(kendo.toString(f, "c2"));
                    n(".js-bulk-pay-invoices-numbers-field", t).text(e.join(", "))
                },
                successAction: function(t, i, r) {
                    if (n(i.currentTarget).hasClass("js-print-invoices")) {
                        r.cancelClose = !0;
                        var f = n.map(u, function(n) {
                            return "invoiceIds=" + n
                        })
                          , e = n("#bulk-pay-popup").attr("data-print-bulk-pay-statement-url") + "?" + f.join("&");
                        t.newTab.location.href = e
                    }
                    k()
                }
            })
        }
        function k() {
            var i = n(".js-global-spinner-container");
            i.spinner(!0);
            n.get(t.attr("data-get-invoice-history-grid-footer-url")).done(function(n) {
                t.find("tfoot").replaceWith(n);
                s(!0)
            }).fail(function() {
                siberia.validation.showGridNetworkError(!0)
            }).always(function() {
                i.spinner(!1)
            })
        }
        function s(t) {
            o = t;
            f.toggleClass("selected", t);
            e.toggleClass("selected", !t);
            var r = i.columns.length - 1;
            t ? (h(!0),
            i.showColumn(r)) : (h(!1),
            i.hideColumn(r),
            n(".js-bulk-pay-all-invoices").prop("checked", !1));
            i.dataSource.read();
            n(".js-total").toggle(!t);
            n(".js-outstanding-total").toggle(t);
            n(".js-bulk-pay-options-container").toggle(t)
        }
        function h(n) {
            if (!u) {
                r && r.wrapper.hide();
                return
            }
            var t = n ? u.PaidOutstanding : u.PaidTotal
              , i = n ? u.BalanceOutstanding : u.Balance;
            t || i ? (r.wrapper.show(),
            r.options.series[0].data = [{
                category: "Payments",
                value: t,
                color: "#F39C12"
            }, {
                category: "Debt",
                value: i,
                color: "#D35400"
            }],
            r.refresh()) : r.wrapper.hide()
        }
        function d() {
            return {
                outstandingOnly: o
            }
        }
        function g() {
            return o
        }
        var t, i, r, f, e, o = !1, v = ".js-balance", u;
        return {
            init: y,
            isOutstandingOnly: g,
            onLoadInvoiceHistoryItems: d
        }
    }();
    n(document).ready(function() {
        siberia.invoice.history.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.documentLetterPopupCommon");
    siberia.documentLetterPopupCommon.getCommon = function(t) {
        function b(n, t) {
            n ? t.attr("disabled", "disabled") : t.removeAttr("disabled")
        }
        function li() {
            var t = u(), i;
            try {
                i = t.getRibbonBar().control.getGroupCollapsePopup().GetClientPopupPosX;
                t.getRibbonBar().control.getGroupCollapsePopup().GetClientPopupPosX = function(t) {
                    var r = i.apply(this, arguments)
                      , f = n(t).closest(".dxrSys")
                      , e = f[0].getBoundingClientRect()
                      , o = n(t).width() + r.position
                      , u = e.right - o;
                    return u < 0 && (r.position = r.position + u),
                    r
                }
            } catch (r) {
                console.warn("DevExpress version has changed. please check the code above and update it", r)
            }
        }
        var i = function() {
            return n(t)
        }
          , it = function(n) {
            return kendo.template(i().find(n).html() || "")
        }
          , rt = function(n, t, r) {
            i().find(n).html(t(r))
        }
          , ut = function(n) {
            i().find(n).html("")
        }
          , y = function() {
            return i().find("input.js-template-id").data("kendoDropDownList")
        }
          , ft = function() {
            return i().find("input.js-header-template-id").data("kendoDropDownList")
        }
          , et = function() {
            return i().find("input.js-footer-template-id").data("kendoDropDownList")
        }
          , ot = function() {
            return i().find('select[name$="SelectedRecipientToId"]')
        }
          , st = function() {
            return i().find('select[name$="SelectedRecipientCcIds"]')
        }
          , l = function() {
            return i().find(".js-text").data("kendoEditor")
        }
          , e = function() {
            return n('[name$="EditorName"]')
        }
          , u = function() {
            var n = ASPxClientControl.GetControlCollection()
              , t = e().val();
            return n.GetByName(t)
        }
          , p = function() {
            return n(t).parent()
        }
          , o = function() {
            return siberia.popup.isOpened(i()) || s(r())
        }
          , ht = function(n) {
            p().css({
                height: n
            })
        }
          , ct = function() {
            p().css({
                "min-width": 800,
                "min-height": 670
            })
        }
          , f = function(n) {
            return function() {
                i().spinner(n)
            }
        }
          , lt = function(n) {
            switch (n) {
            case "Preview":
            case "Print":
            case "LetterPreview":
            case "LetterPrint":
            case "DocumentPreview":
            case "DocumentPrint":
                return !0
            }
            return !1
        }
          , at = function(n, t) {
            switch (n) {
            case "LetterEdit":
                return text.global.status.letterInAccess(t);
            case "DocumentEdit":
                return text.global.status.documentInAccess(t);
            case "TemplateEdit":
                return text.global.status.templateInAccess(t)
            }
            return !1
        }
          , vt = function(n) {
            switch (n) {
            case "LetterEdit":
                return text.global.status.devExpressLetterSessionExpired;
            case "DocumentEdit":
                return text.global.status.devExpressDocumentSessionExpired;
            case "TemplateEdit":
                return text.global.status.devExpressTemplateSessionExpired
            }
            return !1
        }
          , yt = function(n) {
            switch (n) {
            case "LetterEdit":
                return text.global.status.letterInAccessByCurrentUser;
            case "DocumentEdit":
                return text.global.status.documentInAccessByCurrentUser;
            case "TemplateEdit":
                return text.global.status.templateInAccessByCurrentUser
            }
            return !1
        }
          , pt = function() {
            var editorNameStr, editorControl, control, controlObj;
            try {
                editorNameStr = e().val();
                editorControl = n("#" + editorNameStr).find(".dxrSys")[0];
                editorControl !== undefined && editorControl !== null && n(editorControl).data("setTab") !== "1" && (control = editorControl.id,
                controlObj = eval(control),
                controlObj.SetActiveTabIndex(1),
                n(editorControl).data("setTab", "1"))
            } catch (e) {
                console.log(e.message)
            }
        }
          , s = function(n) {
            if (i().data("is-windowed"))
                return !0;
            switch (n) {
            case "TemplateCreate":
            case "TemplateEdit":
                return !0
            }
            return !1
        }
          , wt = function() {
            switch (r()) {
            case "TemplateCreate":
            case "TemplateEdit":
                return !0
            }
            return !1
        }
          , bt = function() {
            f(!0)();
            var n = i().find("form:visible");
            u().OnPost();
            n.ajaxSubmit({
                url: n.data("preview-url"),
                success: function(t) {
                    if (t.Errors) {
                        d(t.Errors);
                        return
                    }
                    if (t.PreviewLink) {
                        window.open(t.PreviewLink.RelativeLink, "_blank");
                        return
                    }
                    siberia.validation.showFormNetworkError(n)
                },
                error: function() {
                    siberia.validation.showFormNetworkError(n)
                },
                complete: function() {
                    f(!1)()
                }
            })
        }
          , w = function(n) {
            return function(t) {
                var r = t || i(), f = r.find(".popup-buttons-lt button, .popup-buttons a"), u;
                b(n, f);
                u = r.find(".js-update-letter-recipients");
                b(n, u)
            }
        }
          , kt = function() {
            var n = u();
            return !n || n.InCallback() ? !1 : (w(!1)(),
            !0)
        }
          , dt = function() {
            var t = u(), n;
            if (!t)
                throw "RichEditor isn't initialized";
            return n = !0,
            t.document.subDocuments.forEach(function(t) {
                t.length > 1 && (n = !1)
            }),
            n
        }
          , k = function(n) {
            return function() {
                var t = y();
                t && t.enable(n)
            }
        }
          , gt = function(n) {
            var t = l(), u, r, f;
            return t || (u = i(),
            r = u.find(".js-text"),
            r.kendoEditor({
                encoded: !1,
                tools: siberia.editor.commonTools().concat(n ? siberia.editor.createFrontendTool(k(!1), k(!0)) : []).concat(siberia.editor.createPageBreakTool())
            }),
            t = l(),
            t && (f = u.find("iframe"),
            r.attr("id") && !f.attr("id") && f.attr("id", r.attr("id") + "-frame"))),
            t
        }
          , d = function(t) {
            var r = Object.keys(t).filter(function(n) {
                return n.indexOf("SessionExpired") !== -1
            });
            r.length ? c(t[r[0]].errors[0], "Session Expired", !0) : t.hasOwnProperty("Letters.Text") ? n("form").find(".js-text-editor-container-devexpress.letter").css("border", "red solid 1px") : n("form").find(".js-text-editor-container-devexpress.letter").css("border", "none");
            siberia.validation.processAjaxErrors(i(), t)
        }
          , ni = function() {
            siberia.validation.clearValidationErrors(i())
        }
          , ti = function() {
            i().find('form input[type="hidden"]').each(function(t) {
                n(t).val("")
            })
        }
          , ii = function() {
            siberia.multiSelect.clearServerFilteringState(t + ' select[name$="SelectedRecipientToId"]');
            siberia.multiSelect.clearServerFilteringState(t + ' select[name$="SelectedRecipientCcIds"]')
        }
          , ri = function(t, i) {
            return f(!0),
            n.ajax({
                type: "POST",
                url: t,
                contentType: "application/json",
                data: JSON.stringify(i)
            }).always(f(!1))
        }
          , a = function(n) {
            return function(t, i) {
                return siberia.letterAdditionalDataPopup.init({
                    submitUrl: n,
                    additionalDataKeys: i,
                    patientId: t.patientId,
                    extraData: t
                })
            }
        }
          , ui = function(n, t) {
            return function(i) {
                return ri(n, i).then(function(n) {
                    return n.IsAdditionalDataRequired ? a(t)(i, n.AdditionalDataKeys) : n
                })
            }
        }
          , fi = function(t, i) {
            return function(r) {
                var u = {
                    templateId: r.templateId
                };
                return n.post(t, u).then(function(n) {
                    return n.IsAdditionalDataRequired ? a(i)(r, n.AdditionalDataKeys) : !1
                })
            }
        }
          , h = function(t) {
            return function() {
                if (!t.length)
                    return null;
                var i = n("#" + t.val());
                return i && i.length && i.data("documentid")
            }
        }
          , g = function(t) {
            return function() {
                if (!t.length)
                    return null;
                var i = n("#" + t.val());
                return !i.length || !i.is(":visible") ? null : i.data("state-refresh-time")
            }
        }
          , r = function() {
            return e().val()
        }
          , nt = function() {
            var n = r();
            return n == "LetterEdit" || n == "DocumentEdit"
        }
          , ei = function(n) {
            n.preventDefault();
            nt() && u().PerformCallback({
                reopenFile: !0,
                updateRecipients: !0
            })
        }
          , oi = function(n, t) {
            f(!1);
            console.log(n);
            t && t.message && t.message.indexOf("Your session has expired") !== -1 && c(t.message, "Session Expired", !0);
            t.handled = !0
        }
          , si = function(t, i, u, f) {
            siberia.popup.create(t, {
                windowOptions: {
                    title: "Invalid access",
                    resizable: "false",
                    width: "calc(100vw - 70%)",
                    height: "145px",
                    minWidth: "500px",
                    actions: ["Close"]
                },
                init: function() {
                    var t = u ? yt(r()) : at(r(), f);
                    n("#js-InAccessErrorMessage .js-content").html(t)
                },
                close: function() {
                    s(r()) ? window.top.close() : v()
                }
            })
        }
          , c = function(t, i, u) {
            siberia.popup.create("#js-LetterTemplateErrorPopup", {
                windowOptions: {
                    title: i,
                    resizable: "false",
                    width: "calc(100vw - 70%)",
                    height: "120px",
                    minWidth: "500px",
                    actions: ["Close"]
                },
                init: function() {
                    n("#js-LetterTemplateErrorPopup .js-content").html(t)
                },
                close: function() {
                    u && (s(r()) ? window.top.close() : v())
                }
            })
        }
          , hi = function(t, i) {
            return function(u) {
                if (o()) {
                    var f = g(t)()
                      , s = f * 1e3
                      , e = siberia.config.urls.extendDocumentSession({
                        documentId: h(t)(),
                        secondsToExtend: f
                    });
                    n.post(e).done(function(l) {
                        var v = l && l.SessionExtended, a;
                        v ? a = setInterval(function() {
                            if (!o()) {
                                clearInterval(a);
                                return
                            }
                            f = g(t)();
                            s = f * 1e3;
                            e = siberia.config.urls.extendDocumentSession({
                                documentId: h(t)(),
                                secondsToExtend: f
                            });
                            n.post(e).done(function(n) {
                                n && n.SessionExtended || clearInterval(a)
                            })
                        }, s) : l.DocumentOwner ? si(i, u, l.IsOwnedByCurrentUser, l.DocumentOwner) : c(vt(r()), "Session Expired", !0)
                    })
                }
            }
        }
          , ci = function(t) {
            return function(i) {
                return f(!0)(),
                i.reopenFile = !0,
                n.ajax({
                    type: "POST",
                    url: siberia.config.urls.loadRtfControl(),
                    data: JSON.stringify(i),
                    contentType: "application/json; charset=utf-8"
                }).then(function(i) {
                    var r = n(t);
                    r.empty().data("editor-loaded", "true").append(i);
                    o() || (tt(h(e())),
                    r.empty())
                })
            }
        }
          , tt = function(t, i) {
            return t || console.log("err: close document id is null"),
            n.ajax({
                type: "POST",
                url: siberia.config.urls.closeDocument(),
                async: i === undefined ? !0 : i,
                data: {
                    documentId: t
                }
            })
        }
          , ai = function() {
            var n = u();
            n && n.AdjustControl()
        }
          , vi = function(t) {
            var r = n(t), i, f = 0, e;
            siberia.logging.logToConsole(t, ": dimensions adapter created");
            e = setInterval(function() {
                if (r.is(":hidden")) {
                    clearInterval(e);
                    siberia.logging.logToConsole(t, ": dimensions adapter destroyed");
                    return
                }
                i || (i = u());
                i && f !== r.height() && (f = r.height(),
                i.AdjustControl(),
                siberia.logging.logToConsole(t, ": dimension container is changed"))
            }, 500)
        }
          , yi = siberia.popup.restoreIfActive.bind(null, t)
          , v = siberia.popup.close.bind(null, t);
        return {
            getPopupContainer: i,
            isPopupOpened: o,
            template: it,
            renderHtml: rt,
            clearHtml: ut,
            getTemplateText: ui,
            getTemplateAdditionalData: a,
            getTemplates: y,
            getHeaderTemplates: ft,
            getFooterTemplates: et,
            getRecipientTo: ot,
            getRecipientCc: st,
            getTextEditor: l,
            getRichEditorName: e,
            getEditorMode: r,
            getRichEditorControl: u,
            updateTemplateWithRecipientsData: ei,
            getTagsWithRequiredAdditionalDataForDevExpress: fi,
            getDevExpressDocumentId: h,
            canShowUpdateRecipientsButton: nt,
            extendDocumentSession: hi,
            loadRichEditor: ci,
            isPrintOrPreview: lt,
            isWindowedRichEdit: s,
            isTemplatePage: wt,
            onCallbackError: oi,
            closeDocument: tt,
            checkDocumentEmpty: dt,
            setDefaultActiveTab: pt,
            setHeaderFunctionsAlignment: li,
            initPopupHeight: ht,
            setMinPopupHeight: ct,
            showSpinner: f(!0),
            hideSpinner: f(!1),
            lockPopupButtons: w(!0),
            tryToUnlockPopupButtons: kt,
            initKendoEditor: gt,
            clearRecipientsCache: ii,
            processValidationErrors: d,
            clearValidationErrors: ni,
            clearFormFields: ti,
            showDocumentErrorPopup: c,
            restorePopup: yi,
            closePopup: v,
            openPreviewInNewWindow: bt,
            createEditorDimensionsAdapter: vi,
            updateDxEditorSize: ai
        }
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.letterTemplate");
    siberia.letterTemplate = function() {
        function ut() {
            var i = t.find("#template-name");
            e = i.ccAutocomplete({
                dataSourceUrl: i.attr("data-datasource-url"),
                filteringFields: ["Text"],
                dataTextField: "Text",
                noDataMessage: i.attr("data-no-data-found-message"),
                fixServerFilter: !0,
                multipleFilters: !1,
                setQueryPostParams: v,
                onSelect: function(n) {
                    e.data("ccAutocomplete").setValue(n.Text);
                    d()
                }
            });
            i.ccClearInputBtn().focus();
            c = t.find("#letter-type").ccDropdown({
                onChange: function() {
                    e.data("ccAutocomplete").updateFilterState()
                },
                saveStateInLocalStorage: !1
            }).data("ccDropdown");
            t.on("submit", function(n) {
                n.preventDefault();
                d()
            });
            l = n(".js-alert").ccAlert();
            t.addClass("cc-search_loaded")
        }
        function ft() {
            if (n(".js-letter-templates-grid").length) {
                ut();
                siberia.grid.initClientGrid({
                    gridSelector: "#letter-templates-grid-html",
                    addSelector: ".js-add-html-template",
                    addAction: kt,
                    editAction: nt,
                    deleteAction: it,
                    duplicateAction: tt,
                    isCustomEditing: !0,
                    isCustomAddActionHandling: !0
                });
                siberia.grid.initClientGrid({
                    gridSelector: "#letter-templates-grid-devexpress",
                    addSelector: ".js-add-devexpress-template",
                    addAction: dt,
                    editAction: nt,
                    customDelete: ni,
                    deleteAction: it,
                    duplicateAction: tt,
                    isCustomEditing: !0,
                    isCustomAddActionHandling: !0
                });
                o = n("#letter-templates-tabs").data("kendoTabStrip");
                o && o.bind("activate", ot);
                var t = n("#LetterTemplates_LetterTypeId").data("kendoDropDownList");
                t && t.bind("change", at);
                r.on("click", ".js-letter-template-print-preview", lt);
                n(".js-footer-header-dropdowns").hide();
                k();
                window.addEventListener("storage", gt, !1)
            }
        }
        function et() {
            h() && w()
        }
        function h() {
            return o ? o.select().data("type") === "html" : n("#IsHtmlTemplateEnabled").val() === "True"
        }
        function k() {
            h() ? (n(".js-add-html-template").show(),
            n(".js-add-devexpress-template").hide()) : (n(".js-add-html-template").hide(),
            n(".js-add-devexpress-template").show())
        }
        function ot() {
            k();
            e.data("ccAutocomplete").updateFilterState()
        }
        function v(n) {
            return {
                userId: siberia.userSettings.getUserId(),
                editorTypeId: n || (h() ? u.html : u.devExpress),
                namePart: e ? e.data("ccAutocomplete").getValue() : null,
                letterTypes: c ? c.getValue() : rt.all
            }
        }
        function st() {
            return v(u.html)
        }
        function ht() {
            return v(u.devExpress)
        }
        function d() {
            a = !0;
            h() ? w() : f()
        }
        function ct() {
            var t = n("#IsDoctorTemplates");
            return t != null && t.val() === "True" ? siberia.config.urls.doctorTemplate : siberia.config.urls.practiceadminTemplate
        }
        function lt() {
            var t = n("#LetterTemplates_HeaderTemplateId").data("kendoDropDownList").dataItem()
              , r = n("#LetterTemplates_FooterTemplateId").data("kendoDropDownList").dataItem();
            siberia.printPreview.letterTemplate({
                text: i.value(),
                header: t.TemplateText,
                footer: r.TemplateText
            })
        }
        function at(t) {
            var i = t.sender.value(), u, f;
            i.length > 0 ? (u = r.find("form").data("additionalTemplatesShownFor").split(","),
            f = r.find("form").data("typesCannotBeDefault").split(","),
            n.inArray(i, u) >= 0 ? (n(".js-footer-header-dropdowns").show(),
            wt()) : (n(".js-footer-header-dropdowns").hide(),
            pt()),
            n.inArray(i, f) >= 0 ? (n(".js-default-checkbox-container").hide(),
            n("#LetterTemplates_IsDefault").removeAttr("checked")) : n(".js-default-checkbox-container").show()) : (n(".js-default-checkbox-container").hide(),
            n("#LetterTemplates_IsDefault").removeAttr("checked"))
        }
        function vt() {
            return g(b.footer)
        }
        function yt() {
            return g(b.header)
        }
        function g(n) {
            return {
                letterType: n
            }
        }
        function pt() {
            n("#LetterTemplates_HeaderTemplateId").data("kendoDropDownList").value("");
            n("#LetterTemplates_FooterTemplateId").data("kendoDropDownList").value("")
        }
        function wt() {
            n("#LetterTemplates_HeaderTemplateId").data("kendoDropDownList").dataSource.read();
            n("#LetterTemplates_FooterTemplateId").data("kendoDropDownList").dataSource.read()
        }
        function bt(n, t) {
            n.exec("inserthtml", {
                value: t
            })
        }
        function y(t, i, u) {
            t = t || {
                Id: 0,
                LetterTypeId: 0,
                Name: "",
                Text: "",
                IsDefault: !1
            };
            siberia.popup.create("#letter-template-popup", {
                submitText: u,
                windowOptions: {
                    title: i,
                    resizable: !0,
                    width: "1100",
                    height: "737",
                    actions: ["Maximize", "Close"],
                    resize: function() {
                        siberia.common.resizeTemplateList(r);
                        siberia.common.initMinPopupSize(r)
                    }
                },
                clear: function() {
                    ti(t);
                    n("#LetterTemplates_UserId").val(siberia.userSettings.getUserId())
                },
                success: function() {
                    w()
                },
                init: function() {
                    ii();
                    siberia.common.resizeTemplateList(r)
                },
                cancel: et
            })
        }
        function kt() {
            y(null, text.global.titles.addDocumentTemplate, text.global.labels.create)
        }
        function dt(t) {
            t.preventDefault();
            n(t.currentTarget).blur();
            var i = window.open(t.currentTarget.pathname + "?configUserId=" + siberia.userSettings.getUserId() + "&duplicate=false&isNew=true", "_blank");
            i.addEventListener("beforeunload", f);
            i.focus()
        }
        function gt(n) {
            n.key === siberia.config.constant.refreshRtfTemplateLocalStorageItem && (f(),
            window.localStorage.removeItem(siberia.config.constant.refreshRtfTemplateLocalStorageItem))
        }
        function nt(t) {
            var e, r, i, o;
            t.EditorType === u.devExpress ? (window.localStorage.removeItem(siberia.config.constant.refreshRtfTemplateLocalStorageItem),
            e = siberia.config.urls.loadingScreen(),
            r = window.open(e, "_blank"),
            r.onunload = f,
            i = {
                templateId: t.Id,
                configUserId: siberia.userSettings.getUserId(),
                documentId: t.DevExpressDocumentId,
                duplicate: !1,
                isNew: !1
            },
            o = p(t.DevExpressDocumentId),
            o.success(function(t) {
                if (!t) {
                    i.reopen = !1;
                    r.location.href = s(i);
                    return
                }
                switch (t.Status) {
                case "OpenedByAnotherUser":
                    r.close();
                    siberia.popup.create("#js-InAccessErrorMessage", {
                        windowOptions: {
                            title: "Invalid access",
                            resizable: "false",
                            width: "calc(100vw - 70%)",
                            height: "145px",
                            minWidth: "500px",
                            actions: ["Close"]
                        },
                        init: function() {
                            var i = text.global.status.templateInAccess(t.DocumentOwner);
                            n("#js-InAccessErrorMessage .js-content").html(i)
                        }
                    });
                    break;
                case "OpenedByLoggedUser":
                    siberia.popup.create("#js-DocumentCloseConfirmMessage", {
                        windowOptions: {
                            title: "Confimation",
                            resizable: "false",
                            width: "calc( 100vw - 65%)",
                            height: "145px",
                            actions: ["Close"]
                        },
                        init: function() {
                            r.close();
                            n("#js-DocumentCloseConfirmMessage .js-content").html(text.global.status.documentCloseConfirm);
                            n("#js-DocumentCloseConfirmMessage").off("click", ".js-popup-confirm").on("click", ".js-popup-confirm", function() {
                                i.reopen = !0;
                                var n = window.open(s(i), "_blank");
                                n.addEventListener ? n.addEventListener("beforeunload", f) : n.attachEvent("beforeunload", f, !1);
                                siberia.popup.close("#js-DocumentCloseConfirmMessage")
                            }).off("click", ".js-popup-confirm-close").on("click", ".js-popup-confirm-close", function() {
                                siberia.popup.close("#js-DocumentCloseConfirmMessage")
                            })
                        }
                    });
                    break;
                default:
                    i.reopen = !1;
                    r.location.href = s(i)
                }
            })) : y(t, text.global.titles.editDocumentTemplate, text.global.labels.update)
        }
        function tt(n) {
            if (n.originalItem.EditorType === u.devExpress) {
                var i = s({
                    configUserId: siberia.userSettings.getUserId(),
                    templateId: n.originalItem.Id,
                    duplicate: !0,
                    documentId: n.originalItem.DevExpressDocumentId,
                    isNew: !1,
                    reopen: !1
                })
                  , t = window.open(i, "_blank");
                t.onunload = f;
                t.focus()
            } else
                n.addedItem.set("Text", n.originalItem.Text),
                n.addedItem.set("LetterTypeId", n.originalItem.LetterTypeId),
                n.addedItem.set("HeaderTemplateId", n.originalItem.HeaderTemplateId),
                n.addedItem.set("FooterTemplateId", n.originalItem.FooterTemplateId),
                y(n.addedItem, text.global.titles.cloneDocumentTemplate, text.global.labels.clone)
        }
        function ni(t, i) {
            if (t.EditorType === u.devExpress) {
                var r, f = p(t.DevExpressDocumentId);
                f.success(function(u) {
                    u.Status === "OpenedByAnotherUser" || u.Status === "OpenedByLoggedUser" ? siberia.popup.create("#js-InAccessErrorMessage", {
                        windowOptions: {
                            title: "Invalid access",
                            resizable: "false",
                            width: "calc(100vw - 70%)",
                            height: "145px",
                            minWidth: "500px",
                            actions: ["Close"]
                        },
                        init: function() {
                            r = u.Status === "OpenedByAnotherUser" ? text.global.status.templateInDeleteByAnotherUser(u.DocumentOwner) : text.global.status.templateInDeleteByCurrentUser;
                            n("#js-InAccessErrorMessage .js-content").html(r)
                        }
                    }) : (i.remove(t),
                    i.sync())
                })
            }
        }
        function it(n, t) {
            t.data("kendoGrid").dataSource.sync()
        }
        function w() {
            n("#letter-templates-grid-html").data("kendoGrid").dataSource.read()
        }
        function f() {
            n("#letter-templates-grid-devexpress").data("kendoGrid").dataSource.read()
        }
        function ti(t) {
            n("#LetterTemplates_Id").val(t.Id);
            n("#LetterTemplates_LetterTypeId").data("kendoDropDownList").value(t.LetterTypeId);
            n("#LetterTemplates_HeaderTemplateId").data("kendoDropDownList").value(t.HeaderTemplateId);
            n("#LetterTemplates_FooterTemplateId").data("kendoDropDownList").value(t.FooterTemplateId);
            n("#LetterTemplates_LetterTypeId").data("kendoDropDownList").trigger("change");
            n("#LetterTemplates_Name").val(t.Name);
            n("#LetterTemplates_IsDefault").prop("checked", t.IsDefault);
            i ? i.value(t.Text) : n("#LetterTemplates_Text").val(t.Text)
        }
        function ii() {
            if (!i && (n("#LetterTemplates_Text").kendoEditor({
                encoded: !1,
                tools: siberia.editor.commonTools().concat(siberia.editor.createPageBreakTool())
            }),
            i = n("#LetterTemplates_Text").data("kendoEditor"),
            siberia.validation.initValidationFor(r.find("form"), r.find("form .js-validate")),
            typeof i != "undefined")) {
                n(".js-field-template").click(function() {
                    bt(i, n(this).data("templateCode"))
                });
                n(i.body).on("keyup", function() {
                    n(".k-widget.k-editor.k-header.k-editor-widget").removeClass("widget-validation-error");
                    n(".field-validation-error").children().remove()
                })
            }
        }
        function ri() {
            t.data("ccPokaYoka") && t.data("ccPokaYoka").disableForm()
        }
        function ui(n) {
            t.data("ccPokaYoka") && t.data("ccPokaYoka").checkForm();
            a && (n.response.Total > 0 ? l.data("ccAlert").setState("success", text.global.templates.alert.success.title, text.global.templates.alert.success.text) : l.data("ccAlert").setState("info", text.global.templates.alert.info.title, text.global.templates.alert.info.text));
            a = !1
        }
        function fi() {
            siberia.validation.showGridNetworkError(!0)
        }
        var u = {
            html: 1,
            devExpress: 2
        }, b = {
            clinicalLetter: 1,
            other: 2,
            pathology: 3,
            procedure: 4,
            Imaging: 5,
            referral: 6,
            workCover: 7,
            document: 8,
            footer: 9,
            header: 10
        }, rt = {
            all: 1,
            documents: 2,
            letters: 3
        }, t = n("#filter-form"), i, r = n("#letter-template-popup"), s = ct(), o, e, c, l, a = !1, p;
        return n(".js-letter-template-fields-container").kendoDraggable({
            dragstart: function(n) {
                n.preventDefault()
            }
        }),
        p = function(t) {
            return n.ajax({
                type: "POST",
                url: siberia.config.urls.isValidDocumentAccess(),
                data: {
                    documentId: t
                }
            })
        }
        ,
        {
            init: ft,
            getHtmlTemplatesFilter: st,
            getDevexpressTemplatesFilter: ht,
            onFooterTemplatesLoad: vt,
            onHeaderTemplatesLoad: yt,
            onGridRequestStart: ri,
            onGridRequestEnd: ui,
            onGridRequestFail: fi
        }
    }();
    n(document).ready(function() {
        siberia.letterTemplate.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.letters");
    siberia.letters = function() {
        function i(t) {
            return t.Errors ? n.Deferred().reject(t).promise() : t
        }
        function u(n) {
            return function(t) {
                if (t && t.Errors.hasOwnProperty("")) {
                    var i = t.Errors[""].errors;
                    i.length !== 0 && siberia.notification.showErrorNotification(i[0], n)
                }
            }
        }
        function f(t) {
            var i = n(t.currentTarget).is(".js-client-grid-add-voice, .js-client-grid-edit-voice")
              , r = n("#letter-popup-fields")
              , u = r.find(".js-letter-appointment-id").val();
            return siberia.letterPopup.create({
                frontend: !i,
                appointmentId: u,
                patientId: n("#PatientId").val(),
                consultId: n("#letter-popup-fields .js-letter-consult-id").val(),
                isRtf: !1
            })
        }
        function b(t) {
            t.preventDefault();
            var i = n(t.currentTarget).is(".js-client-grid-add-voice, .js-client-grid-edit-voice")
              , r = n("#letter-popup-fields")
              , u = r.find(".js-letter-appointment-id").val();
            return siberia.letterPopupDevExpress.create({
                frontend: !i,
                appointmentId: u,
                isRtf: !0
            })
        }
        function e(t) {
            if (confirm(text.global.confirms.sendLetter)) {
                var r = siberia.config.urls.sendLetter();
                return n.ajax({
                    type: "POST",
                    url: r,
                    contentType: "application/json",
                    data: JSON.stringify({
                        letterId: t.Id
                    })
                }).then(i)
            }
            return n.Deferred().reject().promise()
        }
        function k(t, r) {
            var u = siberia.config.urls.sendLetters();
            return n.ajax({
                type: "POST",
                url: u,
                contentType: "application/json",
                data: JSON.stringify({
                    letterIds: t
                })
            }).done(function(n) {
                r.sentLetters = n
            }).then(i)
        }
        function d(t, r) {
            if (!r && confirm(text.global.confirms.markLetter) && (r = !0),
            r) {
                var u = siberia.config.urls.markAsSentLetter();
                return n.ajax({
                    type: "POST",
                    url: u,
                    contentType: "application/json",
                    data: JSON.stringify({
                        letterId: t.Id
                    })
                }).then(i)
            }
            return n.Deferred().reject().promise()
        }
        function g(t, r) {
            var u = siberia.config.urls.markLettersAsSent();
            return n.ajax({
                type: "POST",
                url: u,
                contentType: "application/json",
                data: JSON.stringify({
                    letterIds: t
                })
            }).done(function(n) {
                r.markedLetters = n
            }).then(i)
        }
        function nt(t) {
            return n.ajax({
                type: "POST",
                url: siberia.config.urls.unsignLetter(),
                contentType: "application/json",
                data: JSON.stringify({
                    letterId: t.Id
                })
            }).then(i)
        }
        function tt(t) {
            return n.ajax({
                type: "POST",
                url: siberia.config.urls.getLetters(),
                contentType: "application/json",
                data: JSON.stringify({
                    letterIds: t
                })
            })
        }
        function it(t) {
            return n.ajax({
                type: "POST",
                url: siberia.config.urls.getLetters({
                    patientId: t.PatientId
                }),
                contentType: "application/json",
                data: JSON.stringify({
                    letterId: t.Id
                })
            })
        }
        var o = {
            KendoHtml: 1,
            DevExpress: 2
        }
          , s = text.global.confirms.sendAllLetters
          , h = function() {
            var i = r(), t;
            if (i != null) {
                siberia.grid.initClientGrid({
                    gridSelector: "#letter-list-grid",
                    addSelector: ".js-client-grid-add,.js-client-grid-add-voice",
                    editSelector: ".js-client-grid-edit,.js-client-grid-edit-voice",
                    saveAndCloseSelector: null,
                    saveSelector: null,
                    isCustomEditing: !0,
                    addAction: c,
                    editAction: l
                });
                n("#letter-list-grid").on("click", ".js-client-grid-send-letter", w);
                if (t = n(".js-client-send-signed-letters"),
                t.length > 0) {
                    t.on("click", a(t));
                    i.bind("dataBound", v(t))
                }
            }
        }
          , c = function(n) {
            f(n).then(t)
        }
          , l = function(i, r) {
            var u = n(r.currentTarget).is(".js-client-grid-add-voice, .js-client-grid-edit-voice")
              , f = n(r.currentTarget).is(".js-client-grid-edit-voice");
            siberia.editorDisabledPopup.checkEditorEnabled(i) && (i.EditorType !== o.DevExpress || f ? f ? siberia.letterPopup.edit({
                frontend: !u,
                letterId: i.Id,
                isRtf: null
            }).then(t) : siberia.letterPopup.edit({
                frontend: !u,
                letterId: i.Id,
                isRtf: !1
            }).then(t) : siberia.letterPopupDevExpress.edit({
                frontend: !u,
                letterId: i.Id,
                isRtf: !0,
                devExpressDocumentId: i.DevExpressDocumentId
            }).then(t))
        }
          , a = function(r) {
            var f = r.data("send-signed-letters-url");
            return function() {
                if (confirm(s)) {
                    var r = n(".js-global-spinner-container");
                    r.spinner(!0);
                    n.ajax({
                        type: "POST",
                        url: f
                    }).done(function() {
                        r.spinner(!1)
                    }).then(i).then(t, u(!1))
                }
            }
        }
          , v = function(t) {
            var i = t.data("has-signed-to-send-url");
            return function() {
                return n.ajax({
                    type: "POST",
                    url: i,
                    contentType: "application/json"
                }).then(function(n) {
                    t.toggleClass("btn-disabled", !n)
                })
            }
        }
          , r = function() {
            return n("#letter-list-grid").data("kendoGrid")
        }
          , t = function() {
            r().dataSource.read()
        }
          , y = function(n) {
            return r().dataItem(p(n.currentTarget))
        }
          , p = function(t) {
            return n(t).closest("tr")
        }
          , w = function(n) {
            n.preventDefault();
            var i = y(n);
            e(i).then(t, u(!0))
        };
        return {
            initGrid: h,
            createLetter: f,
            unsignLetter: nt,
            sendLetter: e,
            markAsSentLetter: d,
            getLetters: tt,
            getLetterForPatient: it,
            createRtfLetter: b,
            sendLetters: k,
            markLettersAsSent: g
        }
    }();
    n(document).ready(function() {
        siberia.letters.initGrid()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.letterPopup");
    siberia.letterPopup = function() {
        function ii(t, r) {
            return console.debug(u + "Start onBlobPreparedDeferred"),
            n.Deferred(function(n) {
                v();
                siberia.functions.uploadBlob(t.blob, {
                    "Attachment.FileName": "blob"
                }).done(function(t) {
                    r.VoiceFileName = t.Guid;
                    i().find(".letter-popup-create-voice-letter,.letter-popup-create-voice-sign-not-sighted-letter").removeAttr("disabled");
                    console.debug(u + "Blob was uploaded to siberia");
                    y();
                    n.resolve()
                })
            }).always(function() {
                console.debug(u + "Stop onBlobPreparedDeferred")
            })
        }
        function ft(i, r) {
            i.preventDefault();
            var e = {
                Details: t.PatientDateOfBirth,
                SearchFields: [t.PatientName],
                Id: "Patient_" + t.PatientId,
                Text: t.PatientName,
                Salutation: "",
                FullNameWithoutSalutation: t.PatientName,
                DetailsLine1: t.PatientDateOfBirth,
                DetailsLine2: "",
                FullName: t.PatientName
            }, f = n(r).data("kendoMultiSelect"), u;
            f.options.maxSelectedItems > 1 ? (u = f.dataItems(),
            u.push(e)) : u = [e];
            siberia.multiSelect.attach(f, u, "Id", !1)
        }
        var t = null
          , u = "siberia-letter-popup.js: "
          , f = "#LetterPopup"
          , r = siberia.documentLetterPopupCommon.getCommon(f)
          , i = r.getPopupContainer
          , c = r.template
          , l = r.renderHtml
          , bt = r.clearHtml
          , a = r.getTemplateText(siberia.config.urls.getLetterTemplateText(), siberia.config.urls.getLetterTemplateTextFillingData())
          , kt = r.getTemplateAdditionalData(siberia.config.urls.getLetterTemplateTextFillingData())
          , e = r.getTemplates
          , s = r.getHeaderTemplates
          , h = r.getFooterTemplates
          , w = r.getRecipientTo
          , b = r.getRecipientCc
          , o = r.getTextEditor
          , dt = r.initPopupHeight
          , gt = r.setMinPopupHeight
          , k = function() {
            return r.initKendoEditor(siberia.speechRecognition.enabled(!1))
        }
          , d = r.clearRecipientsCache
          , v = r.showSpinner
          , y = r.hideSpinner
          , g = r.clearValidationErrors
          , nt = r.clearFormFields
          , tt = c("#letter-popup-voice-recorder-template")
          , ni = c("#letter-popup-voice-recorder-html5-template")
          , it = c("#letter-popup-patient-info-template")
          , rt = c("#letter-popup-player-error")
          , ti = function() {
            siberia.multiSelect.fixServerFiltering(f + ' select[name$="SelectedRecipientToId"]', "SearchFields");
            siberia.multiSelect.fixServerFiltering(f + ' select[name$="SelectedRecipientCcIds"]', "SearchFields");
            i().off("click").on("click", ".js-copy-voice-text", ui).on("click", ".js-letter-print-preview", ri).on("click", ".js-letter-popup-to-patient", fi).on("click", ".js-letter-popup-cc-patient", ei)
        }
          , ut = function(t) {
            HasGetUserMedia() ? HasSilverlight() ? l(".js-voice-recorder-container", tt, t) : (n(".js-voice-recorder-container").parent().removeClass("letter-popup-player-error"),
            n(".js-voice-recorder-container").siberiaPlayer({
                record: !t.Recognised,
                file: t.WebmFileName && t.Recognised ? siberia.config.urls.showFile({
                    fileguid: t.WebmFileName
                }) : null,
                template: ni,
                showSpinner: v,
                hideSpinner: y,
                onBlobPreparedDeferred: function() {
                    return ii(this, t)
                }
            }),
            t.Recognised || (t.VoiceFileName = null)) : l(".js-voice-recorder-container", tt, t)
        }
          , ri = function(n) {
            n.preventDefault();
            siberia.printPreview.letter({
                text: o().value(),
                footer: i().find('[name$="FooterTemplate"]').val(),
                header: i().find('[name$="HeaderTemplate"]').val()
            })
        }
          , ui = function(n) {
            n.preventDefault();
            var t = i().find(".voice-text-editor").val();
            window.prompt(text.global.labels.copyToClipboard, t)
        }
          , fi = function(n) {
            ft(n, "#Letters_SelectedRecipientToId")
        }
          , ei = function(n) {
            ft(n, "#Letters_SelectedRecipientCcIds")
        }
          , et = function(n) {
            var t = o()
              , i = t && t.value();
            if (i && p && !confirm(text.global.confirms.changeLetterTemplate))
                return n.preventDefault(),
                !1
        }
          , ot = function(n) {
            return function(t) {
                var r, u, f;
                n.EditorType == 2 ? (i().find('[name$="ImagingResults"]').val(t.ImagingResults != null ? t.ImagingResults.toString() : ""),
                i().find('[name$="PathologyResults"]').val(t.PathologyResults != null ? t.PathologyResults.toString() : "")) : (oi(t.ExpandedText),
                vt(),
                r = i(),
                u = s(),
                u.value(n.HeaderTemplateId),
                r.find('[name$="HeaderTemplate"]').val(t.ExpandedHeaderText),
                f = h(),
                f.value(n.FooterTemplateId),
                r.find('[name$="FooterTemplate"]').val(t.ExpandedFooterText))
            }
        }
          , st = function() {
            var u = e(), n = u.dataItem(), r;
            i().find("#Letters_EditorType").val(n.EditorType);
            r = {
                templateId: n.Id,
                appointmentId: t.AppointmentId,
                patientId: t.PatientId,
                consultId: t.ConsultId
            };
            a(r).then(ot(n)).fail(function() {
                var n = o();
                n && n.value(text.global.status.errorLoadingLetterTemplate)
            })
        }
          , ht = function() {
            var u = s(), n = u.dataItem(), r;
            if (!n || !n.Id) {
                i().find('[name$="HeaderTemplate"]').val("");
                return
            }
            r = {
                templateId: n.Id,
                appointmentId: t.AppointmentId,
                patientId: t.PatientId,
                consultId: t.ConsultId
            };
            a(r).then(function(n) {
                i().find('[name$="HeaderTemplate"]').val(n.ExpandedText)
            })
        }
          , ct = function() {
            var u = h(), n = u.dataItem(), r;
            if (!n || !n.Id) {
                i().find('[name$="FooterTemplate"]').val("");
                return
            }
            r = {
                templateId: n.Id,
                appointmentId: t.AppointmentId,
                patientId: t.PatientId,
                consultId: t.ConsultId
            };
            a(r).then(function(n) {
                i().find('[name$="FooterTemplate"]').val(n.ExpandedText)
            })
        }
          , oi = function(n) {
            var i = o(), r, u, f;
            t.Frontend ? (i.value(n),
            lt(i)) : (r = "[VOICE]",
            u = '<span class="dictation">&zwj;<\/span>',
            n !== null && (f = n.indexOf(u) == -1 ? n + "<p>" + r + "<\/p>" : n.replace(u, r),
            i.value(f)),
            i.value(f))
        }
          , si = function(t) {
            var i = n(t.body).find("p");
            return i.length > 0 ? i.get(0).firstChild : t.body
        }
          , lt = function(t) {
            var u = n(t.body).find(".dictation")
              , f = u.length > 0
              , r = f ? u.get(-1).lastChild : si(t)
              , i = t.createRange();
            f ? (i.setStartAfter(r),
            i.setEndAfter(r)) : (i.setStartBefore(r),
            i.setEndBefore(r));
            t.selectRange(i);
            t.exec("bold");
            t.exec("undo");
            t.update()
        }
          , hi = function(t) {
            return n.ajax({
                type: "POST",
                url: siberia.config.urls.getLetterForPopup(),
                contentType: "application/json",
                data: JSON.stringify(t)
            }).then(function(t) {
                return t.Errors != null ? n.Deferred().reject(t.Errors) : t
            })
        }
          , ci = function(n) {
            return t = n,
            i().find("#Letters_EditorType").val(n.EditorType),
            n
        }
          , p = !1
          , at = function() {
            p = !0
        }
          , vt = function() {
            p = !1;
            o().one("change", at)
        }
          , li = function() {
            var n = o();
            n && n.unbind("change", at)
        }
          , ai = function(n, t) {
            var i = !!siberia.clinical;
            i ? siberia.clinical.saveClinicalConsole(function() {
                pt(n, t, i)
            }) : pt(n, t, i)
        }
          , vi = function() {
            var i = k(), t;
            i.value("");
            n(".js-recipient-to").text("");
            n(".js-recipient-cc").text("");
            t = {
                PatientPhotoUrl: null,
                PatientName: "",
                PatientGender: "",
                PatientDateOfBirth: "",
                PatientMobilePhone: "",
                PatientAccountType: "",
                PatientAge: "",
                PatientSex: ""
            };
            l(".letter-patient-info", it, t)
        }
          , yi = function(r) {
            var u = i(), c, a, v, p, f;
            siberia.patientAlert.showAlertMessage(u, r.PatientAlert);
            r.LetterTemplates && (c = e(),
            c.dataSource.data(r.LetterTemplates),
            c.select(0));
            r.HeaderTemplates && (a = s(),
            a.dataSource.data(r.HeaderTemplates),
            a.value(r.HeaderTemplateId));
            u.find('[name$="HeaderTemplate"]').val(r.HeaderTemplate);
            r.FooterTemplates && (v = h(),
            v.dataSource.data(r.FooterTemplates),
            v.value(r.FooterTemplateId));
            u.find('[name$="FooterTemplate"]').val(r.FooterTemplate);
            r.SelectedRecipientToId ? (siberia.multiSelect.attachValue(w(), [r.SelectedRecipientToId], "Id"),
            n(".js-recipient-to").text(r.SelectedRecipientToId.Text)) : siberia.multiSelect.clearValue(w());
            r.SelectedRecipientCcIds ? (siberia.multiSelect.attachValue(b(), r.SelectedRecipientCcIds, "Id"),
            n(".js-recipient-cc").text(r.SelectedRecipientCcIds.map(function(n) {
                return n.Text
            }).join(", "))) : siberia.multiSelect.clearValue(b());
            u.find(".js-voice-text-container").toggle(!r.Frontend && r.Recognised).find(".voice-text-editor").val(r.VoiceText);
            u.toggleClass("letter-popup-new-letter", !r.Edit);
            u.toggleClass("letter-popup-edit-letter", r.Edit);
            u.toggleClass("letter-popup-backend", !r.Frontend);
            u.toggleClass("letter-popup-backend-html5", !r.Frontend && HasGetUserMedia() && !HasSilverlight());
            u.toggleClass("letter-popup-frontend", r.Frontend);
            u.toggleClass("letter-popup-recognised", r.Recognised);
            u.toggleClass("letter-popup-corrected", r.Corrected);
            u.toggleClass("letter-popup-can-sign", r.CanSign);
            u.toggleClass("letter-popup-can-delete", r.CanDelete);
            u.toggleClass("letter-popup-can-ready-for-review", r.CanReadyForReview);
            u.toggleClass("letter-popup-can-create-ready-for-review", r.CanCreateAndReadyForReview);
            u.toggleClass("letter-popup-allow-everyone-sign", r.CanAllowEveryoneSign);
            u.find(".js-letter-recipient-to-edit").toggle(r.CanEditMainRecipient);
            u.find(".js-search-for-patients-container").toggle(r.CanEditMainRecipient && r.CanEditOtherRecipients);
            u.find(".js-recipient-cc-container").toggle(r.CanEditOtherRecipients);
            u.find(".js-letter-recipient-to-readonly").toggle(!r.CanEditMainRecipient);
            u.find(".js-letter-recipient-cc-readonly").toggle(!r.CanEditOtherRecipients);
            u.toggleClass("letter-popup-can-park", r.CanPark);
            l(".letter-patient-info", it, r);
            var d = e()
              , g = d.dataItem()
              , y = k();
            if (r.IsAdditionalDataRequired ? (p = {
                templateId: g.Id,
                appointmentId: t.AppointmentId,
                patientId: t.PatientId,
                consultId: t.ConsultId
            },
            kt(p, r.AdditionalDataKeys).then(ot(r)).fail(function() {
                var n = o();
                n && n.value(text.global.status.errorLoadingLetterTemplate)
            })) : y.value(r.Text),
            r.Frontend)
                bt(".js-voice-recorder-container"),
                setTimeout(function() {
                    lt(y)
                }, 10);
            else {
                ut(r);
                f = n(".js-voice-recorder-container").data("SiberiaPlayer");
                n(f).on("record-play-failed", function() {
                    f.render = n.noop;
                    u.find(".js-voice-recorder-container").html(rt({
                        message: text.global.status.canNotPlayRecord
                    })).parent().addClass("letter-popup-player-error")
                });
                n(f).on("record-started", function() {
                    u.find(".letter-popup-create-voice-letter,.letter-popup-create-voice-sign-not-sighted-letter").attr("disabled", "disabled")
                });
                n(f).on("record-failed", function() {
                    f.render = n.noop;
                    u.find(".js-voice-recorder-container").html(rt({
                        message: text.global.status.browserCanNotRecord
                    })).parent().addClass("letter-popup-player-error");
                    u.find(".letter-popup-create-voice-letter,.letter-popup-create-voice-sign-not-sighted-letter").attr("disabled", "disabled")
                })
            }
        }
          , pi = function() {
            return n.Deferred(function(t) {
                var i = n(".js-voice-recorder-container").data("SiberiaPlayer");
                i ? (n(i).off(),
                i.destroy().then(function() {
                    t.resolve()
                })) : t.resolve()
            })
        }
          , wi = function() {
            return console.debug(u + "Start StopSiberiaPlayerDeferred"),
            n.Deferred(function(t) {
                var i = n(".js-voice-recorder-container").data("SiberiaPlayer");
                i ? i.stopRecordingDeferred().always(function() {
                    t.resolve()
                }) : t.resolve()
            }).always(function() {
                console.debug(u + "Stop StopSiberiaPlayerDeferred")
            })
        }
          , yt = function() {
            var n = i()
              , t = n.find(".js-letter-popup-header")
              , f = t.offset().top
              , r = n.find(".js-recipient-cc-container")
              , e = r.offset().top + r.outerHeight(!0) - f
              , o = t.get(0).style.height
              , u = o === "";
            t.css("height", u ? e + "px" : "");
            n.find(".js-collapse-popup-header").text(u ? text.global.labels.expandFields : text.global.labels.collapseFields)
        }
          , bi = function() {
            var n = i()
              , t = n.find(".js-letter-popup-header");
            t.css("height", "")
        }
          , pt = function(u, o, c) {
            var p;
            if (r.restorePopup())
                o.reject();
            else if (siberia.popup.create(f, {
                windowOptions: {
                    title: u.title,
                    resizable: "true",
                    width: "900",
                    height: u.frontend ? "calc( 100vh - 10%)" : 650,
                    actions: c ? ["Minimize", "Maximize", "Close"] : ["Maximize", "Close"],
                    resize: function() {
                        gt()
                    },
                    modal: !c
                },
                preSubmit: ki,
                clear: nt,
                init: function() {
                    nt();
                    v();
                    vi();
                    hi(u).then(ci, function(n) {
                        o.reject();
                        siberia.popup.close(f);
                        siberia.notification.showErrorPopup(siberia.notification.getFirstError(n))
                    }).then(function(n) {
                        yi(n, c);
                        dt(!n.Frontend && !n.Edit ? 650 : "calc( 100vh - 10%)");
                        bi()
                    }).then(vt).then(function() {
                        siberia.popup.center(f);
                        n("#NUSAI_CommandBar_Container").css("z-index", "15000");
                        n("#NUSAI_Options_Container").css("z-index", "15000")
                    }).always(y);
                    e().bind("select", et);
                    e().bind("change", st);
                    s().bind("change", ht);
                    h().bind("change", ct);
                    i().on("change", '[name$="SearchForPatients"]', d);
                    i().on("click", ".js-collapse-popup-header", yt)
                },
                error: function() {
                    siberia.validation.showFormNetworkError(i())
                },
                ajaxError: function(n) {
                    siberia.validation.processAjaxErrors(i(), n.Errors)
                },
                success: function(n) {
                    o.resolve(n)
                },
                close: function() {
                    return li(),
                    i().off("change", '[name$="SearchForPatients"]', d),
                    i().off("click", ".js-collapse-popup-header", yt),
                    e().unbind("select", et),
                    e().unbind("change", st),
                    s().unbind("change", ht),
                    h().unbind("change", ct),
                    t = null,
                    siberia.speechRecognition.resetFrontend(),
                    o.reject(),
                    n("#NUSAI_CommandBar_Container").css("z-index", "9000"),
                    n("#NUSAI_Options_Container").css("z-index", "9000"),
                    pi()
                },
                cancel: function() {
                    siberia.speechRecognition.resetFrontend();
                    o.reject({
                        letterId: t && t.LetterId
                    })
                }
            }),
            c) {
                var a = i().data("kendoWindow")
                  , l = a.wrapper
                  , w = l.width();
                a.element.hide = function() {
                    l.height(0);
                    l.width(90);
                    var t = l.find(".k-header").outerHeight()
                      , i = n(window).width() - w - 2
                      , r = n(window).scrollTop() + n(window).height() - t;
                    l.addClass("minimized-popup");
                    l.css({
                        top: r,
                        left: i,
                        position: "fixed"
                    })
                }
                ;
                p = a.restore;
                a.restore = function() {
                    return p.call(a),
                    l.removeClass("minimized-popup"),
                    siberia.popup.center(f),
                    this.center()
                }
            }
        }
          , wt = function(t) {
            return function(i) {
                return n.Deferred(function(r) {
                    ai(n.extend(i, {
                        title: t
                    }), r)
                })
            }
        }
          , ki = function(n) {
            return console.debug(u + "Start preSubmit"),
            wi().always(function() {
                return console.debug(u + "Stop preSubmit"),
                di(n)
            })
        }
          , di = function(i) {
            var u, r;
            if (g(),
            u = n(i.target),
            u.is(".letter-popup-delete-letter") && !confirm(text.global.confirms.deleteLetter))
                return i.preventDefault(),
                !1;
            r = u.closest("form");
            r.attr("action", u.attr("data-submit-url"));
            r.find('[name$="ConsultId"]').val(t.ConsultId);
            r.find('[name$="LetterId"]').val(t.LetterId);
            r.find('[name$="VoiceFileName"]').val(t.VoiceFileName);
            r.find('[name$="AppointmentId"]').val(t.AppointmentId);
            r.find('[name$="PatientId"]').val(t.PatientId)
        }
          , gi = function() {
            i().find(".letter-popup-create-voice-letter").click()
        }
          , nr = function() {
            ut(t)
        }
          , tr = function() {
            siberia.validation.showFormNetworkError(i())
        }
          , ir = g
          , rr = function(n) {
            return {
                text: n.filter.filters[0].value,
                patients: i().find('[name$="SearchForPatients"]').prop("checked"),
                contacts: !0,
                companies: !0
            }
        };
        return {
            init: ti,
            filter: rr,
            restorePopup: r.restorePopup,
            closePopup: r.closePopup,
            create: wt(text.global.titles.oldLetterCreator),
            edit: wt(text.global.titles.editLetter),
            createVoiceLetter: gi,
            updateVoiceRecorder: nr,
            showError: tr,
            hideError: ir
        }
    }();
    n(document).ready(function() {
        siberia.letterPopup.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.documentPopup");
    siberia.documentPopup = function() {
        var i = null
          , e = "#DocumentPopup"
          , t = siberia.documentLetterPopupCommon.getCommon(e)
          , rt = t.template
          , ut = t.renderHtml
          , ri = t.clearHtml
          , c = t.getTemplateText(siberia.config.urls.getDocumentTemplateText(), siberia.config.urls.getDocumentTemplateTextFillingData())
          , ft = t.getTemplateAdditionalData(siberia.config.urls.getDocumentTemplateTextFillingData())
          , r = t.getTemplates
          , o = t.getHeaderTemplates
          , s = t.getFooterTemplates
          , h = t.getRecipientTo
          , l = t.getRecipientCc
          , u = t.getTextEditor
          , et = t.initPopupHeight
          , ot = t.setMinPopupHeight
          , a = null
          , st = function() {
            return t.initKendoEditor(!1)
        }
          , p = t.clearRecipientsCache
          , ht = t.showSpinner
          , ct = t.hideSpinner
          , lt = t.clearValidationErrors
          , at = t.clearFormFields
          , f = t.getPopupContainer
          , v = function() {
            return f().find("input.js-document-name")
        }
          , vt = function(t) {
            t.stopImmediatePropagation();
            siberia.printPreview.document({
                text: u().value(),
                footer: n('form.document-popup-create-document [name$="FooterTemplate"]').val(),
                header: n('form.document-popup-create-document [name$="HeaderTemplate"]').val()
            })
        }
          , yt = function() {
            siberia.multiSelect.fixServerFiltering(e + ' select[name$="SelectedRecipientToId"]', "SearchFields");
            siberia.multiSelect.fixServerFiltering(e + ' select[name$="SelectedRecipientCcIds"]', "SearchFields");
            f().on("click", ".js-document-print-preview", vt)
        }
          , pt = rt("#document-popup-patient-info-template")
          , wt = function(t) {
            return n.ajax({
                type: "POST",
                url: siberia.config.urls.getDocumentForPopup(),
                contentType: "application/json",
                data: JSON.stringify(t)
            }).then(function(t) {
                return t.Errors != null ? n.Deferred().reject(t.Errors) : t
            })
        }
          , bt = function(n) {
            return i = n,
            n
        }
          , kt = function(t) {
            var i = f(), u, e, c, a, y, p, w;
            siberia.patientAlert.showAlertMessage(i, t.PatientAlert);
            t.DocumentTemplates && (u = r(),
            u.dataSource.data(t.DocumentTemplates),
            u.select(0));
            v().val(t.DocumentName);
            t.HeaderTemplates && (e = o(),
            e.dataSource.data(t.HeaderTemplates),
            e.value(t.HeaderTemplateId));
            n('form.document-popup-create-document [name$="HeaderTemplate"]').val(t.HeaderTemplate);
            t.FooterTemplates && (c = s(),
            c.dataSource.data(t.FooterTemplates),
            c.value(t.FooterTemplateId));
            n('form.document-popup-create-document [name$="FooterTemplate"]').val(t.FooterTemplate);
            t.SelectedRecipientToId ? (a = h(),
            a.length ? siberia.multiSelect.attachValue(h(), [t.SelectedRecipientToId], "Id") : n(".js-recipient-to").text(t.SelectedRecipientToId.Text)) : siberia.multiSelect.clearValue(h());
            t.SelectedRecipientCcIds && siberia.multiSelect.attachValue(l(), t.SelectedRecipientCcIds, "Id");
            i.toggleClass("document-popup-new-document", !t.Edit);
            i.toggleClass("document-popup-edit-document", t.Edit);
            ut(".document-patient-info", pt, t);
            y = r().dataItem();
            p = st();
            t.IsAdditionalDataRequired ? (w = {
                templateId: y.Id,
                patientId: t.PatientId
            },
            ft(w, t.AdditionalDataKeys).then(d(t)).fail(function() {
                var n = getLetterTextEditor();
                n && n.value(text.global.status.errorLoadingLetterTemplate)
            })) : p.value(t.Text)
        }
          , y = !1
          , w = function() {
            y = !0
        }
          , b = function() {
            y = !1;
            u().one("change", w)
        }
          , dt = function() {
            var n = u();
            n && n.unbind("change", w)
        }
          , k = function(n) {
            var t = u()
              , i = t && t.value();
            if (i && y && !confirm(text.global.confirms.changeDocumentTemplate))
                return n.preventDefault(),
                !1
        }
          , d = function(t) {
            return function(i) {
                var e = u(), r, f;
                e.value(i.ExpandedText);
                b();
                gt(t.Text);
                r = o();
                r.value(t.HeaderTemplateId);
                n('form.document-popup-create-document [name$="HeaderTemplate"]').val(i.ExpandedHeaderText);
                f = s();
                f.value(t.FooterTemplateId);
                n('form.document-popup-create-document [name$="FooterTemplate"]').val(i.ExpandedFooterText)
            }
        }
          , gt = function(t) {
            n('[name$="DocumentName"]').val(t)
        }
          , g = function() {
            var t = r()
              , n = t.dataItem()
              , f = {
                templateId: n.Id,
                patientId: i.PatientId,
                appointmentId: a
            };
            c(f).then(d(n)).fail(function() {
                var n = u();
                n && n.value(text.global.status.errorLoadingDocumentTemplate)
            })
        }
          , nt = function() {
            var u = o(), t = u.dataItem(), r;
            if (!t || !t.Id) {
                n('form.document-popup-create-document [name$="HeaderTemplate"]').val("");
                return
            }
            r = {
                templateId: t.Id,
                patientId: i.PatientId
            };
            c(r).then(function(t) {
                n('form.document-popup-create-document [name$="HeaderTemplate"]').val(t.ExpandedText)
            })
        }
          , tt = function() {
            var u = s(), t = u.dataItem(), r;
            if (!t || !t.Id) {
                n('form.document-popup-create-document [name$="FooterTemplate"]').val("");
                return
            }
            r = {
                templateId: t.Id,
                patientId: i.PatientId
            };
            c(r).then(function(t) {
                n('form.document-popup-create-document [name$="FooterTemplate"]').val(t.ExpandedText)
            })
        }
          , ni = function(t) {
            var f, e;
            if (lt(),
            f = n(t.target).closest("form"),
            f.is(".document-popup-create-document"))
                e = r().dataItem(),
                f.find('[name$="PatientId"]').val(i.PatientId),
                f.find('[name$="SelectedRecipientToId"]').val(siberia.multiSelect.getSingleObject(h(), "Id")),
                f.find('[name$="SelectedRecipientCcIds"]').val(siberia.multiSelect.getObjects(l(), "Id").join(",")),
                f.find('[name$="Text"]').val(u().value()),
                f.find('[name$="DocumentName"]').val(v().val()),
                f.find('[name$="TemplateId"]').val(e && e.Id);
            else if (f.is(".document-popup-update-document"))
                f.find('[name$="DocumentId"]').val(i.Id),
                f.find('[name$="SelectedRecipientToId"]').val(siberia.multiSelect.getSingleObject(h(), "Id")),
                f.find('[name$="SelectedRecipientCcIds"]').val(siberia.multiSelect.getObjects(l(), "Id").join(",")),
                f.find('[name$="Text"]').val(u().value()),
                f.find('[name$="DocumentName"]').val(v().val());
            else if (f.is(".document-popup-delete-document")) {
                if (!confirm(text.global.confirms.deleteDocument))
                    return t.preventDefault(),
                    !1;
                f.find('[name$="DocumentId"]').val(i.Id)
            }
        }
          , ti = function(n, t) {
            a = n.appointmentId;
            siberia.popup.create(e, {
                windowOptions: {
                    title: n.title,
                    resizable: "true",
                    width: "900",
                    height: "calc( 100vh - 10%)",
                    actions: ["Maximize", "Close"],
                    resize: ot,
                    modal: !0
                },
                preSubmit: ni,
                clear: at,
                init: function() {
                    ht();
                    wt(n).then(bt, function(n) {
                        t.reject();
                        siberia.popup.close(e);
                        siberia.notification.showErrorPopup(siberia.notification.getFirstError(n))
                    }).then(function(n) {
                        kt(n);
                        et("calc( 100vh - 10%)")
                    }).then(b).then(function() {
                        siberia.popup.center(e)
                    }).always(ct);
                    r().bind("select", k);
                    r().bind("change", g);
                    o().bind("change", nt);
                    s().bind("change", tt);
                    f().on("change", '[name$="SearchForPatients"]', p)
                },
                error: function() {
                    siberia.validation.showFormNetworkError(f())
                },
                ajaxError: function(n) {
                    siberia.validation.processAjaxErrors(f(), n.Errors)
                },
                success: function(n) {
                    t.resolve(n)
                },
                close: function() {
                    dt();
                    f().off("change", '[name$="SearchForPatients"]', p);
                    o().unbind("change", nt);
                    s().unbind("change", tt);
                    r().unbind("select", k);
                    r().unbind("change", g);
                    i = null;
                    a = null;
                    t.reject()
                },
                cancel: function() {
                    t.reject()
                }
            })
        }
          , it = function(t) {
            return function(i) {
                return n.Deferred(function(r) {
                    ti(n.extend(i, {
                        title: t
                    }), r)
                })
            }
        }
          , ii = function(n) {
            return {
                text: n.filter.filters[0].value,
                patients: f().find('[name$="SearchForPatients"]').prop("checked"),
                contacts: !0,
                companies: !0
            }
        };
        return {
            init: yt,
            filter: ii,
            create: it(text.global.titles.oldDocumentCreator),
            edit: it(text.global.titles.editDocument)
        }
    }();
    n(document).ready(function() {
        siberia.documentPopup.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.invoicePopup");
    siberia.invoicePopup = function() {
        function c() {
            l()
        }
        function l() {
            n("#NewInvoiceEmptyPopup").on("click", ".js-invoice-settings-tab-switcher input[type=radio]", function(i) {
                var r = n(i.currentTarget).hasClass("js-invoice-patient-tab-selected");
                n(".js-new-invoice-popup-content #PatientSettings").toggle(r);
                n(".js-new-invoice-popup-content #PartnerSettings").toggle(!r);
                t = r ? "#NewInvoiceEmptyPopup #PatientSettings" : "#NewInvoiceEmptyPopup #PartnerSettings";
                o = r ? "PatientSettings_" : "PartnerSettings_";
                u()
            })
        }
        function a(t, i, u, f) {
            return n.Deferred(function(o) {
                siberia.popup.create("#NewInvoiceEmptyPopup", {
                    windowOptions: {
                        title: text.global.titles.addInvoice,
                        width: "550",
                        cancelBtn: ".js-popup-cancel"
                    },
                    preLoadOptions: {
                        spinnerContainer: f,
                        dataUrl: t,
                        dataType: "",
                        preLoadSuccess: function(n) {
                            return n.Errors ? (siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)),
                            !1) : (p(n),
                            v(i, u),
                            !0)
                        }
                    },
                    preSubmit: function() {
                        i === !0 && (r = window.open("about:blank", "_blank"))
                    },
                    success: function(n, t) {
                        h(u, n, t);
                        o.resolve()
                    },
                    close: function() {
                        n("#NewInvoiceEmptyPopup .js-new-invoice-popup-content").html("");
                        n("#NewInvoiceEmptyPopup .js-save-invoice-settings").hide()
                    },
                    ajaxError: e,
                    error: e
                })
            })
        }
        function v(t, i) {
            n(".js-create-invoice-with-items").on("click", function(n) {
                n.preventDefault();
                siberia.invoiceItemsPopup.create({
                    parentContainerSelector: "#NewInvoiceEmptyPopup",
                    popupSelector: "#invoice-items-popup",
                    getInvoiceSettingsAction: y,
                    preSubmitAction: function() {
                        t === !0 && (r = window.open("about:blank", "_blank"))
                    },
                    successAction: function(n, t) {
                        h(i, n, t)
                    },
                    errorAction: e
                })
            })
        }
        function y() {
            var u = n(t + " form").serializeArray(), i = {}, r;
            return n.each(u, function(n, t) {
                t.name.split(".")[1] && (t.name = t.name.split(".")[1]);
                i[t.name] !== "true" && (i[t.name] = t.value)
            }),
            r = f(),
            i.AdditionalPatientIds = r.value(),
            i
        }
        function p(t) {
            n("#NewInvoiceEmptyPopup .js-new-invoice-popup-content").html(t);
            u();
            s("#NewInvoiceEmptyPopup #PatientSettings", "PatientSettings_");
            s("#NewInvoiceEmptyPopup #PartnerSettings", "PartnerSettings_")
        }
        function s(t, i) {
            var r, f, e;
            if (n("form", t).length) {
                n(".js-save-invoice-settings", t).show();
                n('input[type="radio"]', t).on("change", u);
                r = n("#" + i + "DoctorId", t).data("kendoDropDownList");
                r && r.bind("change", u);
                f = n("#" + i + "AdditionalPatientIds", t).data("kendoMultiSelect");
                f && f.bind("change", u);
                e = n("#" + i + "WorkCoverClaimId", t).data("kendoDropDownList");
                e && e.bind("change", u);
                siberia.invoiceFeeEstimateCommon.initNinetyDayGapToggle(n(t));
                siberia.invoiceFeeEstimateCommon.initDisableOutPatientModeForEclipse(n(t));
                siberia.validation.initValidationFor(n("form", t), n(".js-popup-submit", t));
                siberia.multiSelect.initClientMultiSelect({
                    multiSelectSelector: t + ' [id$="AdditionalPatientIds"]'
                })
            }
        }
        function u() {
            var i = f(), s = n("input.js-medicare-billing:checked", t).length > 0, o = n("input.js-health-fund-billing:checked", t).length > 0, r, e, u;
            n(".js-payment-options", t).toggle(s || o);
            n(".js-invoice-health-fund-options", t).toggle(o);
            r = n("input.js-workcover-billing:checked", t).length > 0;
            n(".js-invoice-workcover-options", t).toggle(r);
            i && i.enable(!r);
            e = i && i.value().length > 0;
            n(".js-create-invoice-with-items", t).toggleClass("btn-disabled", !e || r);
            u = n("#invoice-popup-form");
            e ? u.attr("action", u.find('[name$="PatientSettings.BatchCreateInvoiceUrl"]').val()) : u.attr("action", u.find('[name$="PatientSettings.CreateInvoiceUrl"]').val());
            r && i && i.value([]);
            w();
            b()
        }
        function w() {
            var r = i("DoctorId").data("kendoDropDownList"), u = r ? r.dataItem().HasNoSpecialty : !1, f = n("input.js-health-fund-billing:checked", t).length > 0, e = n('[name$="ImcClaimTypeId"]', t).length > 0, o = siberia.warnings.container, s;
            o.toggleWarning(n(".js-invoice-settings-warnings", t), ".js-imc-claim-type-warning", f && !e);
            o.toggleWarning(n(".js-invoice-settings-warnings", t), ".js-doctor-has-no-specialty-warning", u);
            s = !u && (!f || e);
            n(".js-save-invoice-settings", t).enable(s)
        }
        function b() {
            if (n(".js-create-invoice-from-fee-estimate", t).length > 0) {
                var o = n(".js-create-invoice-from-fee-estimate", t)
                  , u = n("#js-use-fee-estimate-container", t)
                  , s = n("#js-use-fee-estimate-warning", t)
                  , h = n("#js-cannot-use-fee-estimate-warning", t)
                  , i = k()
                  , r = f().value().length > 0
                  , e = siberia.warnings.container;
                e.toggleWarning(u, s, i && !r);
                e.toggleWarning(u, h, i && r);
                o.toggleClass("btn-disabled", !i || r)
            }
        }
        function k() {
            var t = siberia.common.toBoolean(i("IsFeeEstimateInPatient").val())
              , r = i("WorkCoverBillingAccountTypeId").val()
              , u = i("FeeEstimateWorkCoverClaimId").val()
              , f = i("FeeEstimateBillingAccountTypeId").val()
              , e = siberia.common.toBoolean(i("InPatient:checked").val())
              , n = i("AccountTypeId:checked").val()
              , o = i("WorkCoverClaimId").data("kendoDropDownList");
            return t === e && f === n && (r !== n || o.value() === u)
        }
        function i(i) {
            return n("#" + o + i, t)
        }
        function f() {
            return i("AdditionalPatientIds").data("kendoMultiSelect")
        }
        function h(t, i, u) {
            var o;
            t && t();
            var s = n(u.currentTarget).hasClass("js-create-invoice-from-fee-estimate")
              , f = kendo.format(n(".js-invoice-settings").data("invoice-url"), i.InvoiceId, s)
              , e = function() {
                n("#NewInvoiceEmptyPopup").data("kendoWindow").close();
                r ? r.location.href = f : (n(".js-global-spinner-container").spinner(!0),
                window.location.href = f)
            };
            i.Warnings && i.Warnings.length > 0 ? (o = kendo.template(n("#template-warnings").html()),
            n("#invoice-warnings-popup .js-warnings-container").html(o(i.Warnings)),
            siberia.popup.create("#invoice-warnings-popup", {
                windowOptions: {
                    title: text.global.titles.popupInvoiceCreationWarnings,
                    width: "460"
                },
                close: e
            })) : e()
        }
        function e() {
            r && (r.close(),
            r = null)
        }
        function d() {
            var n = f();
            return n ? {
                text: n.input.val(),
                patientId: i("PatientId").val()
            } : null
        }
        var r, t = "#NewInvoiceEmptyPopup #PatientSettings", o = "PatientSettings_";
        return {
            init: c,
            initInvoicePopup: a,
            onLoadingAdditionalPatients: d
        }
    }();
    n(document).ready(function() {
        siberia.invoicePopup.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.newLetterSettingsPopup");
    siberia.newLetterSettingsPopup = function() {
        function f() {}
        function e(t, i) {
            return n.Deferred(function(u) {
                var f = siberia.popup.create("#NewLetterEmptyPopup", {
                    windowOptions: {
                        title: text.global.titles.addLetter,
                        width: "550",
                        cancelBtn: ".js-popup-cancel"
                    },
                    preLoadOptions: {
                        dataUrl: t,
                        dataType: "",
                        preLoadSuccess: function(n) {
                            return n.Errors ? (siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)),
                            !1) : (o(n),
                            !0)
                        }
                    },
                    preSubmit: function() {
                        var n = r("DoctorId").data("kendoDropDownList")
                          , t = n ? n.dataItem() : !1
                          , e = r("LocationId").data("kendoDropDownList");
                        return u.resolve({
                            doctorId: t.Id,
                            locationId: e.dataItem().Id,
                            patientId: i
                        }),
                        f.close("#NewLetterEmptyPopup"),
                        !1
                    },
                    success: function() {
                        u.resolve()
                    },
                    close: function() {
                        n("#NewLetterEmptyPopup .js-new-letter-popup-content").html("");
                        n("#NewLetterEmptyPopup .js-save-letter-settings").hide()
                    }
                })
            })
        }
        function o(t) {
            n("#NewLetterEmptyPopup .js-new-letter-popup-content").html(t);
            s("#NewLetterEmptyPopup #PatientSettings", "PartnerSettings_")
        }
        function s(t, r) {
            var u, f, e;
            if (n("form", t).length) {
                n(".js-save-invoice-settings", t).show();
                n('input[type="radio"]', t).on("change", i);
                u = n("#" + r + "DoctorId", t).data("kendoDropDownList");
                u && u.bind("change", i);
                f = n("#" + r + "AdditionalPatientIds", t).data("kendoMultiSelect");
                f && f.bind("change", i);
                e = n("#" + r + "WorkCoverClaimId", t).data("kendoDropDownList");
                e && e.bind("change", i);
                siberia.validation.initValidationFor(n("form", t), n(".js-popup-submit", t))
            }
        }
        function i() {
            var i = getAdditionalPatientsControl(), f = n("input.js-health-fund-billing:checked", t).length > 0, r, u;
            n(".js-invoice-health-fund-options", t).toggle(f);
            r = n("input.js-workcover-billing:checked", t).length > 0;
            n(".js-invoice-workcover-options", t).toggle(r);
            i && i.enable(!r);
            u = i && i.value().length > 0;
            n(".js-create-invoice-with-items", t).toggleClass("btn-disabled", !u || r);
            r && i && i.value([]);
            h()
        }
        function h() {
            var i = r("DoctorId").data("kendoDropDownList")
              , u = i ? i.dataItem().HasNoSpecialty : !1
              , f = siberia.warnings.container;
            f.toggleWarning(n(".js-invoice-settings-warnings", t), ".js-doctor-has-no-specialty-warning", u);
            n(".js-save-invoice-settings", t).enable(!u)
        }
        function r(i) {
            return n("#" + u + i, t)
        }
        var t = "#NewLetterEmptyPopup #PatientSettings"
          , u = "PatientSettings_";
        return {
            init: f,
            initPopup: e
        }
    }();
    n(document).ready(function() {
        siberia.newLetterSettingsPopup.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.invoiceItemsPopup");
    siberia.invoiceItemsPopup = function() {
        var t = {
            parentContainerSelector: null,
            popupSelector: null,
            getContentUrlAttr: "data-get-invoice-items-popup-content-url",
            refreshItemsUrlAttr: "data-refresh-invoice-items-url",
            getInvoiceSettingsAction: null,
            preSubmitAction: null,
            successAction: null,
            errorAction: null
        }
          , i = function(i) {
            function f() {
                var t = u.getInvoiceSettingsAction(), i = n('[id$="items-grid"]', r).data("kendoGrid"), f;
                return i && (f = n('.js-mpr-rule-type[data-role="dropdownlist"]', r).data("kendoDropDownList"),
                f && (t.MprTypeId = f.value()),
                t.IsMpr = n(".js-mpr-rule", r).prop("checked"),
                t.IsMprForPrivateFeesApplied = n(".js-mpr-for-private-fees", r).prop("checked"),
                t.SerializedItems = JSON.stringify(i.dataSource.data()),
                t.AttachedItemNumber = siberia.invoiceFeeEstimateCommon.getAttachedItemNumber(i.wrapper)),
                t
            }
            function e(t) {
                n(".js-content-container", r).html(t);
                siberia.invoiceFeeEstimateCommon.initGridEvents(n('[id$="items-grid"]', r), o);
                itemsAutosuggest(!0, {
                    refreshAction: o
                });
                var i = n(".js-popup-submit", r);
                n("#items-errors-container", r).length > 0 ? i.addClass("btn-disabled").removeClass("k-primary") : i.removeClass("btn-disabled").addClass("k-primary")
            }
            function o() {
                var t = r.attr("data-refresh-invoice-items-url");
                t && (r.spinner(!0),
                n.ajax({
                    url: t,
                    type: "POST",
                    traditional: !0,
                    data: f(),
                    success: function(t) {
                        siberia.validation.processAjaxErrors(n("form", r), t.Errors) && e(t)
                    },
                    error: function() {
                        siberia.validation.showFormNetworkError(n("form", r))
                    },
                    complete: function() {
                        r.spinner(!1)
                    }
                }))
            }
            var u = n.extend(!0, {}, t, i || {})
              , r = n(u.popupSelector);
            return r.length ? (n(".js-content-container", r).html(""),
            siberia.popup.create(r, {
                windowOptions: {
                    title: text.global.titles.popupInvoiceItems,
                    width: "900"
                },
                extraData: f,
                preLoadOptions: {
                    showSpinnerForParentPopup: !0,
                    dataUrl: r.attr(u.getContentUrlAttr),
                    data: f(),
                    dataType: "",
                    preLoadSuccess: function(t) {
                        var i = null;
                        return u.parentContainerSelector && (i = n("form", u.parentContainerSelector)),
                        siberia.validation.processAjaxErrors(i, t.Errors) ? (e(t),
                        !0) : !1
                    }
                },
                preSubmit: u.preSubmitAction,
                success: u.successAction,
                close: function() {
                    n(".js-content-container", r).html("")
                },
                ajaxError: u.errorAction,
                error: u.errorAction
            }),
            {
                collectItemsPopupData: f
            }) : undefined
        };
        return {
            create: i
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.checklistTemplate");
    siberia.checklistTemplate = function() {
        function t(t) {
            t.set("Name", n("#ChecklistTemplate_Name").val());
            var i = n("#checklist-template-popup .js-checklist-template-items-grid").data("kendoGrid")
              , r = i.dataSource.data();
            t.set("Items", r)
        }
        function i(t) {
            n("#ChecklistTemplate_Id").val(t.Id);
            n("#ChecklistTemplate_Name").val(t.Name);
            n("#ChecklistTemplate_ItemsSerialized").val("");
            var i = n("#checklist-template-popup .js-checklist-template-items-grid").data("kendoGrid");
            i.dataSource.data([]);
            t.Items && i.dataSource.data(t.Items);
            n("#ChecklistTemplate_UserId").val(siberia.userSettings.getUserId())
        }
        function r(t) {
            var i = [];
            return t.each(function() {
                var t = n(this), u = [], r = [], e = 'input[type="checkbox"].js-doctor-checklist-checkbox', o, f, s, h, c, l;
                t.find('[data-role="multiselect"]').length > 0 ? (o = t.find('[data-role="multiselect"]').data("kendoMultiSelect"),
                u = o.dataSource.data(),
                r = o.value().slice()) : t.find('[data-role="dropdownlist"]').length > 0 ? (f = t.find('[data-role="dropdownlist"]').data("kendoDropDownList"),
                u = f.dataSource.data(),
                f.value() && r.push(f.value())) : t.find("textarea").length > 0 ? (s = t.find("textarea"),
                u.push({
                    Id: 1,
                    Text: s.val()
                }),
                s.val() && r.length === 0 && (r = [1])) : t.find('input[type="text"]').length > 0 ? (h = t.find('input[type="text"]'),
                u.push({
                    Id: 1,
                    Text: h.val()
                }),
                h.val() && r.length === 0 && (r = [1])) : t.find(e).length > 0 ? (t.find(e).each(function() {
                    u.push({
                        Id: n(this).val(),
                        Text: n(this).attr("name")
                    })
                }),
                t.find(e + ":checked").each(function() {
                    r.push(n(this).val())
                })) : t.find('input[type="radio"]').length > 0 && (t.find('input[type="radio"]').each(function() {
                    u.push({
                        Id: n(this).val(),
                        Text: n(this).data("name")
                    })
                }),
                t.find('input[type="radio"]:checked').each(function() {
                    r.push(n(this).val())
                }));
                c = {
                    SortOrder: n(this).data("sort-order"),
                    ControlType: n(this).data("control-type"),
                    ControlName: n(this).data("control-name"),
                    Values: u,
                    SelectedValueIds: r
                };
                l = n(t.find(".js-completed-checkbox"));
                l.length > 0 && (c.isCompleted = l.is(":checked"));
                i.push(c)
            }),
            i
        }
        function u(t, i) {
            var u = r(n(t).find(".js-checklist-item"))
              , f = {
                Name: n(t).attr("name"),
                Items: u
            };
            n(i).val(JSON.stringify(f))
        }
        function f(n) {
            siberia.popup.create("#checklist-template-popup", {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addChecklistTemplate,
                    width: "800"
                },
                clear: function() {
                    i(n.item)
                },
                success: function(i) {
                    i.Data && (n.item.set("Id", i.Data[0].Id),
                    t(n.item))
                },
                cancel: function() {
                    n.cancel()
                }
            })
        }
        function e(n) {
            siberia.popup.create("#checklist-template-popup", {
                submitText: text.global.labels.save,
                windowOptions: {
                    title: text.global.titles.editChecklistTemplate,
                    width: "800"
                },
                clear: function() {
                    i(n)
                },
                success: function() {
                    t(n)
                }
            })
        }
        function o(t, i) {
            var r = n(".js-global-spinner-container"), u;
            r.spinner(!0);
            u = n(this.controlSelector);
            n.ajax({
                type: "POST",
                url: u.data("delete-checklist-template-url"),
                contentType: "application/json",
                data: JSON.stringify({
                    templateId: t.Id,
                    userId: siberia.userSettings.getUserId()
                }),
                success: function(n) {
                    n === "OK" && i.remove(t)
                },
                complete: function() {
                    r.spinner(!1)
                }
            })
        }
        function s(t, i) {
            var r = n(".wrapper");
            r.spinner(!0);
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                data: n("#SerializedItems").val(),
                success: function(n) {
                    siberia.validation.processGridActionAjaxErrors(n.Errors, !0) || t.data("kendoGrid").cancelChanges()
                },
                error: function() {
                    t.data("kendoGrid").cancelChanges();
                    siberia.notification.showErrorNotification(text.global.status.errorSavingPatientChecklistTemplate, !1)
                },
                complete: function() {
                    r.spinner(!1)
                }
            })
        }
        function h(t, i, r) {
            siberia.popup.create("#checklist-template-item-popup", {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addChecklistItem,
                    width: "550"
                },
                clear: function() {
                    n("#ChecklistTemplateItem_ControlName").val("");
                    n("#ChecklistTemplateItem_Values").val("");
                    var t = n("#ChecklistTemplateItem_ControlType").data("kendoDropDownList");
                    t.value("");
                    t.trigger("change")
                },
                success: function() {
                    var f = n("#ChecklistTemplateItem_ControlType").data("kendoDropDownList")
                      , u = n(".js-global-spinner-container");
                    u.spinner(!0);
                    n.ajax({
                        type: "POST",
                        url: n("#ChecklistTemplates").data("get-checklistitem-url"),
                        contentType: "application/json",
                        data: JSON.stringify({
                            OrderNumber: t.data("order-number"),
                            SortOrder: 1 + t.find(".js-checklist-item:last").data("sort-order"),
                            ControlType: f.value(),
                            ControlName: n("#ChecklistTemplateItem_ControlName").val(),
                            Values: n("#ChecklistTemplateItem_Values").val(),
                            IsCompletable: i
                        }),
                        success: function(n) {
                            t.find(".js-checklist-items-container").append(n);
                            r && r()
                        },
                        complete: function() {
                            u.spinner(!1)
                        }
                    })
                }
            })
        }
        function c() {
            var t, i, r;
            siberia.grid.initClientGrid({
                gridSelector: "#checklist-template-grid",
                addSelector: ".js-add-checklist-template",
                isExternalAddButton: !0,
                addAction: f,
                editAction: e,
                customDelete: o,
                confirmText: text.global.confirms.deleteTemplate
            });
            t = n(".js-checklist-template-container");
            t.length > 0 && (i = t.find(".js-checklist-template-items-grid"),
            i.length > 0 && (r = t.data("save-checklist-template-url"),
            i.bind("saveChanges", function() {
                s(i, r)
            })));
            n("#checklist-template-grid").length === 0
        }
        return {
            init: c,
            collectChecklistControls: r,
            serializeChecklist: u,
            addChecklistItem: h
        }
    }();
    n(document).ready(function() {
        siberia.checklistTemplate.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.checklistTemplateItemsGrid");
    siberia.checklistTemplateItemsGrid = function() {
        function e(t) {
            if (t) {
                var i = [];
                return n.each(t.split("\n"), function() {
                    var t = n.trim(this.replace(/[\r\n]+/g, ""));
                    t && i.push(t)
                }),
                i.join("; ")
            }
            return ""
        }
        function o(t) {
            var i = n("#ChecklistTemplateItem_ControlType").data("kendoDropDownList").dataItem();
            t.set("ControlName", n("#ChecklistTemplateItem_ControlName").val());
            t.set("ControlType", i.Id);
            t.set("ControlTypeName", i.Text);
            t.set("Values", n("#ChecklistTemplateItem_Values").val());
            t.set("DisplayValues", e(n("#ChecklistTemplateItem_Values").val()))
        }
        function r(t) {
            var i = n("#ChecklistTemplateItem_ControlType").data("kendoDropDownList");
            n("#ChecklistTemplateItem_ControlName").val(t.ControlName);
            i.value(t.ControlType);
            i.trigger("change");
            n("#ChecklistTemplateItem_Values").val(t.Values)
        }
        function t(t) {
            n(t).trigger("siberia-serialize-data");
            n(t).trigger("saveChanges")
        }
        function u(n, i) {
            o(n);
            t(i)
        }
        function s(t, f) {
            siberia.popup.create(i, {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addChecklistItem,
                    width: "550"
                },
                clear: function() {
                    r(t.item)
                },
                success: function() {
                    u(t.item, f);
                    var i = n(f).data("kendoGrid")
                      , r = i.dataSource.total() - 1;
                    r != 0 && (i.dataSource.remove(t.item),
                    i.dataSource.insert(r, t.item))
                },
                cancel: function() {
                    t.cancel()
                }
            })
        }
        function h(n, t) {
            siberia.popup.create(i, {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.editChecklistItem,
                    width: "550"
                },
                clear: function() {
                    r(n)
                },
                success: function() {
                    u(n, t)
                }
            })
        }
        function c(t) {
            var i = t.sender.dataItem();
            i.Id && i.HasValues ? n(".js-values-editor").show() : (n(".js-values-editor textarea").val(""),
            n(".js-values-editor").hide())
        }
        function l() {
            n(f).each(function(i, r) {
                siberia.grid.initClientGrid({
                    gridSelector: "#" + r.id,
                    addAction: function(n) {
                        s(n, r)
                    },
                    editAction: function(n) {
                        h(n, r)
                    },
                    deleteAction: function() {
                        t(r)
                    }
                });
                var u = n(r).data("kendoGrid");
                u && n(r).kendoSortable({
                    filter: "table > tbody > tr:not(.k-grid-edit-row)",
                    connectWith: r,
                    cursor: "move",
                    placeholder: function(n) {
                        return n.clone().addClass("k-state-hover").css("opacity", .5)
                    },
                    hint: function(t) {
                        var i = n("<div><\/div>").text(t.text()).html();
                        return n('<div class="k-draggable">' + i + "<\/div>")
                    },
                    change: function(n) {
                        var f = n.oldIndex
                          , e = n.newIndex
                          , i = u.dataSource.at(f);
                        u.dataSource.remove(i);
                        u.dataSource.insert(e, i);
                        t(r)
                    }
                })
            });
            var i = n("#ChecklistTemplateItem_ControlType").data("kendoDropDownList");
            i && i.bind("change", c)
        }
        var f = ".js-checklist-template-items-grid"
          , i = "#checklist-template-item-popup";
        return {
            init: l
        }
    }();
    n(document).ready(function() {
        siberia.checklistTemplateItemsGrid.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.invoicePaymentsPopup");
    siberia.invoicePaymentsPopup = function() {
        var t = {
            invoiceData: {},
            popupTitle: text.global.titles.addPayment,
            popupSelector: null,
            recalculatePaymentAttr: "data-recalculate-payments-url",
            hidePaymentTypeSwitch: !1,
            clearPopup: null,
            successAction: null
        }
          , i = function(i) {
            function e() {
                var i = n(r.popupSelector), t;
                i.spinner(!0);
                t = n("form", r.popupSelector);
                t.ajaxSubmit({
                    traditional: !0,
                    url: n(r.popupSelector).attr(r.recalculatePaymentAttr),
                    data: r.invoiceData,
                    success: function(t) {
                        n(".js-invoice-payments-control", r.popupSelector).html(t);
                        o()
                    },
                    error: function() {
                        siberia.validation.showFormNetworkError(t)
                    },
                    complete: function() {
                        i.spinner(!1)
                    }
                })
            }
            function o() {
                n(".js-invoice-payment-type").toggle(!r.hidePaymentTypeSwitch);
                n('input[type="radio"][name$="PaymentTab"]', r.popupSelector).click(e);
                n(".js-payment-field", r.popupSelector).each(function(t, i) {
                    var r = n(i).data("kendoNumericTextBox");
                    if (r) {
                        n(r.element).on("focusout", function() {
                            setTimeout(function() {
                                u && e()
                            }, 150)
                        });
                        n(r.element).on("keydown", function(n) {
                            n.keyCode === 13 && e()
                        })
                    }
                })
            }
            function h() {
                f && f.close()
            }
            var r = n.extend(!0, {}, t, i || {}), s = n(r.popupSelector), f, u;
            if (s.length)
                return f = null,
                u = !0,
                n(".js-invoice-payments-control", r.popupSelector).html(""),
                siberia.popup.create(r.popupSelector, {
                    windowOptions: {
                        title: r.popupTitle,
                        width: "850"
                    },
                    extraData: function() {
                        return r.invoiceData
                    },
                    preLoadOptions: {
                        dataUrl: n(r.popupSelector).attr(r.recalculatePaymentAttr),
                        data: r.invoiceData,
                        preLoadSuccess: function(t) {
                            n(".js-invoice-payments-control", r.popupSelector).html(t);
                            o()
                        }
                    },
                    clear: function() {
                        n('[id$="WarningsConfirmed"]', r.popupSelector).val(!1);
                        r.clearPopup && r.clearPopup(n(r.popupSelector))
                    },
                    preSubmit: function(t) {
                        u = !1;
                        n(t.currentTarget).hasClass("js-open-new-tab") && (f = window.open("about:blank", "_blank"))
                    },
                    success: function(t, i, e) {
                        u = !0;
                        t && t.popupContent && (n(".js-invoice-payments-control", r.popupSelector).html(t.popupContent),
                        o());
                        r.successAction && (t.newTab = f,
                        r.successAction(t, i, e))
                    },
                    ajaxError: function(t, i) {
                        h();
                        u = !0;
                        n("#confirm-and-force-save-changes", r.popupSelector).click(function(t) {
                            t.preventDefault();
                            n('[id$="WarningsConfirmed"]', r.popupSelector).val(!0);
                            n(i.currentTarget).click()
                        })
                    },
                    error: function() {
                        h();
                        u = !0
                    }
                }),
                s
        };
        return {
            open: i
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.secureMessages");
    siberia.secureMessages = function() {
        function l() {
            return {
                isHidden: f
            }
        }
        function s(n) {
            f = n;
            o();
            n ? (r.addClass("selected"),
            i.removeClass("selected")) : (r.removeClass("selected"),
            i.addClass("selected"))
        }
        function a(n) {
            var t = u(n)
              , i = text.global.confirms.sendMessage
              , r = {
                letterId: t.LetterId
            };
            h(n, "send-message-url", i, r)
        }
        function v(n) {
            var t = u(n)
              , i = text.global.confirms.hideMessage
              , r = {
                messageId: t.Id
            };
            h(n, "hide-message-url", i, r)
        }
        function h(i, r, u, f) {
            i.preventDefault();
            var e = n(t).data(r);
            confirm(u) && n.ajax({
                type: "POST",
                url: e,
                contentType: "application/json",
                data: JSON.stringify(f)
            }).then(y).then(o, function(n) {
                if (n.Errors.hasOwnProperty("")) {
                    var t = n.Errors[""].errors;
                    t.length !== 0 && siberia.notification.showErrorNotification(t[0], !0)
                }
            })
        }
        function y(t) {
            return t.Errors ? n.Deferred().reject(t).promise() : t
        }
        var t = "#secure-message-list-grid", f = !1, i = n("#hiddenSecureMessageFilterOff"), r = n("#hiddenSecureMessageFilterOn"), c = function() {
            n(t).on("click", ".js-client-grid-send-letter", a);
            n(t).on("click", ".js-client-grid-hide", v)
        }, e = function() {
            return n(t).data("kendoGrid")
        }, o = function() {
            e().dataSource.read()
        }, u;
        return i.click(function() {
            s(!1)
        }),
        r.click(function() {
            s(!0)
        }),
        u = function(t) {
            var i = n(t.currentTarget).closest("tr");
            return e().dataItem(i)
        }
        ,
        {
            init: c,
            onLoadingSecureMessages: l
        }
    }();
    n(document).ready(function() {
        siberia.secureMessages.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.linkPatientPopup");
    siberia.linkPatientPopup = function() {
        function l(n) {
            t.find(".js-popup-submit").toggleClass("btn-disabled", !n)
        }
        function a() {
            return r.dataSource.getByUid(r.select().data("uid"))
        }
        function y() {
            r.dataSource.total() > 0 ? (r.select("tr:eq(1)"),
            l(a())) : l(null)
        }
        function f(n, t) {
            t && (i.needCandidates = !1,
            i.firstName = "",
            i.lastName = "",
            i.dateOfBirth = "");
            i.search = n;
            siberia.searchBox.applyFilterAndSort(r.dataSource, [])
        }
        function p(i) {
            var r = t.data("get-patient-info-url"), u;
            r && (u = n(s).attr("data-entity-id"),
            n.ajax({
                type: "POST",
                url: r,
                contentType: "application/json",
                data: JSON.stringify({
                    patientId: i,
                    entityId: u
                }),
                success: function(n) {
                    var i = t.find(".js-patient-info")
                      , r = t.find(".js-patient-last-consult");
                    n.Patient && (n.Patient.BackgroundInfo ? (i.html(h(n.Patient)),
                    i.show()) : i.hide(),
                    siberia.patientAlert.showAlertMessage(t, n.Patient.Alert));
                    n.LastConsult ? (r.html(c(n.LastConsult)),
                    r.show()) : r.hide()
                }
            }))
        }
        function w(o) {
            siberia.popup.create(t, {
                submitText: text.global.labels.link,
                ajax: {
                    enabled: !1
                },
                windowOptions: {
                    title: text.global.labels.linkPatientToLabResultPopupHeader,
                    width: "1200"
                },
                clear: function() {
                    i.needCandidates = !0;
                    i.lastName = u.attr("data-patient-last-name") || "";
                    i.firstName = u.attr("data-patient-first-name") || "";
                    i.dateOfBirth = u.attr("data-patient-date-of-birth") || "";
                    f("", !1);
                    n("#patients-search").val("")
                },
                success: function() {
                    var n = a();
                    n && o(n)
                }
            });
            siberia.grid.initClientGrid({
                gridSelector: e
            });
            r.bind("change", function() {
                var n = this.dataItem(this.select());
                p(n.Id)
            });
            r.bind("dataBound", function() {
                y()
            });
            siberia.searchBox.initSearch(function(n) {
                f(n, !0)
            })
        }
        function b(i) {
            (t = n(v),
            t.length !== 0) && (o = n(e),
            r = o.data("kendoGrid"),
            u = n(s),
            h = kendo.template(n("#template-patient-info-preview").html() || ""),
            c = kendo.template(n("#template-patient-last-consult-preview").html() || ""),
            t.length === 1 && r && i && (t.find(".js-show-all-patients").click(function() {
                f("", !0)
            }),
            w(i)))
        }
        var v = "#link-patient-popup", t, e = "#link-patient-grid", r, o, u, s = ".js-link-patient", h, c, i = {
            needCandidates: !1,
            firstName: "",
            lastName: "",
            dateOfBirth: "",
            search: ""
        }, k = function() {
            return i
        };
        return {
            init: b,
            onReadPatients: k
        }
    }();
    n(document).ready(function() {
        siberia.linkPatientPopup.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.feeEstimateTemplate");
    siberia.feeEstimateTemplate = function() {
        function e() {
            n("#fee-estimate-templates-grid").length !== 0 && siberia.grid.initClientGrid({
                gridSelector: "#fee-estimate-templates-grid",
                addAction: s,
                editAction: h,
                deleteAction: c,
                isCustomEditing: !0
            })
        }
        function o(n, t) {
            n.exec("inserthtml", {
                value: t
            })
        }
        function s(n) {
            siberia.popup.create("#fee-estimate-template-popup", {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addFeeEstimateTemplate,
                    resizable: !0,
                    width: "1100",
                    height: "737",
                    actions: ["Maximize", "Close"],
                    resize: function() {
                        siberia.common.resizeTemplateList(i);
                        siberia.common.initMinPopupSize(i)
                    }
                },
                clear: function() {
                    u(n.item)
                },
                success: function() {
                    r()
                },
                cancel: function() {
                    n.cancel()
                },
                init: function() {
                    f();
                    siberia.common.resizeTemplateList(i)
                }
            })
        }
        function h(n) {
            siberia.popup.create("#fee-estimate-template-popup", {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.editFeeEstimateTemplate,
                    resizable: !0,
                    width: "1100",
                    height: "737",
                    actions: ["Maximize", "Close"],
                    resize: function() {
                        siberia.common.resizeTemplateList(i);
                        siberia.common.initMinPopupSize(i)
                    }
                },
                clear: function() {
                    u(n)
                },
                success: function() {
                    r()
                },
                init: function() {
                    f();
                    siberia.common.resizeTemplateList(i)
                }
            })
        }
        function c() {
            n("#fee-estimate-templates-grid").data("kendoGrid").dataSource.sync()
        }
        function r() {
            n("#fee-estimate-templates-grid").data("kendoGrid").dataSource.read()
        }
        function u(i) {
            n("#FeeEstimateTemplates_Id").val(i.Id);
            n("#FeeEstimateTemplates_Name").val(i.Name);
            t ? t.value(i.Text) : n("#FeeEstimateTemplates_Text").val(i.Text)
        }
        function f() {
            t || (n("#FeeEstimateTemplates_Text").kendoEditor({
                encoded: !1,
                tools: siberia.editor.commonTools()
            }),
            t = n("#FeeEstimateTemplates_Text").data("kendoEditor"),
            siberia.validation.initValidationFor(n("#fee-estimate-template-popup").find("form"), n("#fee-estimate-template-popup").find("form .js-validate")),
            typeof t != "undefined" && n(".js-field-template").click(function() {
                o(t, n(this).data("templateCode"))
            }))
        }
        var t, i = n("#fee-estimate-template-popup");
        return n(".js-fee-estimate-template-fields-container").kendoDraggable({
            dragstart: function(n) {
                n.preventDefault()
            }
        }),
        {
            init: e
        }
    }();
    n(document).ready(function() {
        siberia.feeEstimateTemplate.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.feeEstimateTextAreaPopup");
    siberia.feeEstimateTextAreaPopup = function() {
        var c = null
          , l = null
          , f = null
          , r = "#FeeEstimateTextAreaPopup"
          , t = siberia.documentLetterPopupCommon.getCommon(r)
          , u = t.getTemplates
          , i = t.getTextEditor
          , a = t.initPopupHeight
          , k = t.setMinPopupHeight
          , d = function() {
            return t.initKendoEditor(!1)
        }
          , e = t.showSpinner
          , o = t.hideSpinner
          , g = t.clearValidationErrors
          , nt = t.clearFormFields
          , s = t.getPopupContainer
          , tt = function() {
            return n.ajax({
                type: "POST",
                url: siberia.config.urls.getFeeEstimateTemplates(),
                contentType: "application/json"
            })
        }
          , it = function(n) {
            var t = u();
            n && (t.dataSource.data(n.Data),
            t.select(0),
            w())
        }
          , v = function(n) {
            var t = d();
            t.value(n)
        }
          , h = !1
          , y = function() {
            h = !0
        }
          , p = function() {
            h = !1;
            i().one("change", y)
        }
          , rt = function() {
            i().unbind("change", y)
        }
          , ut = function(n) {
            var t = i()
              , r = t && t.value();
            if (r && h && !confirm(text.global.confirms.changeFeeEstimateTemplate))
                return n.preventDefault(),
                !1
        }
          , w = function() {
            var t = u()
              , n = t.dataItem();
            n && ft(n.Id, c)
        }
          , ft = function(t, r) {
            e();
            var u = {
                templateId: t,
                quoteId: r
            };
            n.ajax({
                type: "POST",
                url: siberia.config.urls.getFeeEstimateTemplateText(),
                contentType: "application/json",
                data: JSON.stringify(u)
            }).then(function(n) {
                var t = i();
                t.value(n)
            }).then(p).fail(function() {
                var n = i();
                n && n.value(text.global.status.errorLoadingFeeEstimateDocumentTemplate)
            }).always(o)
        }
          , et = function() {
            g()
        }
          , ot = function() {
            e();
            s().find(".document-popup-template-container").show();
            tt().then(it).then(function() {
                v("");
                a(670)
            }).then(p).then(function() {
                siberia.popup.center(r)
            }).done(o);
            u().bind("select", ut);
            u().bind("change", w)
        }
          , st = function() {
            e();
            s().find(".document-popup-template-container").hide();
            v(n("#" + f).val());
            a(670);
            siberia.popup.center(r);
            o()
        }
          , b = function(t, u) {
            siberia.popup.create(r, {
                ajax: {
                    enabled: !1
                },
                windowOptions: {
                    title: t.title,
                    resizable: "true",
                    width: "800",
                    actions: ["Maximize", "Close"],
                    resize: k,
                    modal: !0
                },
                preSubmit: et,
                clear: nt,
                init: function() {
                    c = t.quoteId;
                    l = t.resultTargetFieldId;
                    f = t.resultTargetHiddenId;
                    t.quoteId ? ot() : st()
                },
                ajaxError: function(n) {
                    siberia.validation.processAjaxErrors(s(), n.Errors)
                },
                success: function(t) {
                    var r = i().value();
                    n("#" + l).html(r);
                    n("#" + f).val(r);
                    u.resolve(t)
                },
                close: function() {
                    rt();
                    u.reject()
                },
                cancel: function() {
                    u.reject()
                }
            })
        }
          , ht = function(t) {
            return n.Deferred(function(n) {
                var i = {
                    title: text.global.titles.addFeeEstimateTextAreaContent,
                    quoteId: t.quoteId,
                    resultTargetFieldId: t.fieldId,
                    resultTargetHiddenId: t.hiddenId
                };
                b(i, n)
            })
        }
          , ct = function(t) {
            return n.Deferred(function(n) {
                var i = {
                    title: text.global.titles.editFeeEstimateTextAreaContent,
                    resultTargetFieldId: t.fieldId,
                    resultTargetHiddenId: t.hiddenId
                };
                b(i, n)
            })
        };
        return {
            create: ht,
            edit: ct
        }
    }();
    n(document).ready(function() {
        siberia.documentPopup.init()
    })
}(jQuery),
function(n, t) {
    siberia.ensureObject("siberia.voiceLetter");
    var i = null
      , r = function(n, t) {
        var u = "", r, f, i;
        if (n != null && n != 0 && (u = n.getHost().Source),
        r = t.ErrorType,
        f = t.ErrorCode,
        r != "ImageError" && r != "MediaError") {
            i = "Unhandled Error in Silverlight Application " + u + "\n";
            i += "Code: " + f + "    \n";
            i += "Category: " + r + "       \n";
            i += "Message: " + t.ErrorMessage + "     \n";
            r == "ParserError" ? (i += "File: " + t.xamlFile + "     \n",
            i += "Line: " + t.lineNumber + "     \n",
            i += "Position: " + t.charPosition + "     \n") : r == "RuntimeError" && (t.lineNumber != 0 && (i += "Line: " + t.lineNumber + "     \n",
            i += "Position: " + t.charPosition + "     \n"),
            i += "MethodName: " + t.methodName + "     \n");
            throw new Error(i);
        }
    }
      , u = function(n, t, i) {
        if (i == 0) {
            siberia.letterPopup.showError();
            siberia.letterPopup.updateVoiceRecorder();
            return
        }
        n == 1 ? (siberia.letterPopup.hideError(),
        siberia.letterPopup.createVoiceLetter(t.split("_")[0], i)) : siberia.letterPopup.showError()
    }
      , f = function() {
        siberia.letterPopup.hideError();
        siberia.letterPopup.closePopup()
    }
      , e = function() {
        n("#div_devicecom").show()
    }
      , o = function(n) {
        i = n.getHost()
    }
      , s = function() {
        var t = !1;
        try {
            i != null && (t = i.Content.SLChannel.SLAction("Reload", ""))
        } catch (r) {}
        t ? (n("#div_devicecom").hide(),
        alert(text.global.status.philipsReady)) : location.reload()
    }
      , h = function() {
        return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia)
    }
      , c = function() {
        try {
            var n = new ActiveXObject("AgControl.AgControl");
            return !0
        } catch (t) {
            return !1
        }
    };
    t.SilverlightError = r;
    t.DictationUploadCompleted = u;
    t.CancelDictation = f;
    t.CommunicatorNeedsInstall = e;
    t.PluginLoaded = o;
    t.ReloadControl = s;
    t.HasGetUserMedia = h;
    t.HasSilverlight = c
}(jQuery, window),
function(n) {
    siberia.ensureObject("siberia.lettersToCreate");
    siberia.lettersToCreate = function() {
        function s() {
            function l(t) {
                var i = n(o).attr("data-delete-url");
                n.ajax({
                    type: "POST",
                    url: i,
                    contentType: "application/json",
                    data: JSON.stringify({
                        consultId: t.ConsultId
                    }),
                    success: function(n) {
                        siberia.validation.processGridActionAjaxErrors(n.Errors, !0) && c()
                    },
                    error: function() {
                        siberia.validation.showGridNetworkError(!0)
                    }
                })
            }
            function a(n) {
                n.preventDefault();
                var t = h(n);
                siberia.letterPopup.create({
                    frontend: !0,
                    appointmentId: t.AppointmentId,
                    patientId: t.PatientId,
                    consultId: t.ConsultId,
                    isRtf: !1
                }).then(s)
            }
            function v(n) {
                n.preventDefault();
                var t = h(n);
                siberia.letterPopupDevExpress.create({
                    frontend: !0,
                    appointmentId: t.AppointmentId,
                    isRtf: !0
                }).then(s)
            }
            function y(n) {
                n.preventDefault();
                var t = h(n);
                siberia.letterPopup.create({
                    frontend: !1,
                    appointmentId: t.AppointmentId,
                    patientId: t.PatientId,
                    consultId: t.ConsultId,
                    isRtf: null
                }).then(s)
            }
            function c() {
                var i = n("#letter-list-to-create-grid")
                  , t = i.data("kendoGrid");
                t && t.dataSource.read()
            }
            function s() {
                c()
            }
            function p(t) {
                return n(t).closest("tr")
            }
            function h(n) {
                return r.dataItem(p(n.currentTarget))
            }
            if (t = n(i),
            t.length !== 0) {
                siberia.grid.initClientGrid({
                    gridSelector: i,
                    customDelete: l
                });
                r = t.data("kendoGrid");
                t.on("click", u, a);
                t.on("click", f, v);
                t.on("click", e, y)
            }
        }
        var u = ".js-letter-to-create-add", f = ".js-rtf-letter-to-create-add", e = ".js-letter-to-create-voice-add", i = "#letter-list-to-create-grid", o = "#letters-to-create-view-container", t, r;
        return {
            init: s
        }
    }();
    n(document).ready(function() {
        siberia.lettersToCreate.init()
    })
}(jQuery),
function(n) {
    function r() {
        if (n("#holding-list-grid").length !== 0) {
            siberia.grid.initClientGrid({
                gridSelector: "#holding-list-grid",
                saveAndCloseSelector: null,
                saveSelector: null,
                addAction: e,
                editAction: o,
                deleteAction: f
            });
            n("#addItemToHoldingListBtn").on("click", u)
        }
    }
    function u() {
        siberia.popup.create("#holding-list-edit-popup", {
            submitText: text.global.labels.create,
            windowOptions: {
                title: text.global.titles.addWaitingListItem,
                width: "630"
            },
            clear: function() {
                s()
            }
        })
    }
    function f(t) {
        var i = n("#holdingList-view-container").data("deleteItemUrl");
        return n.ajax({
            type: "POST",
            url: i,
            contentType: "application/json",
            data: JSON.stringify({
                Id: t.Id
            })
        }),
        !0
    }
    function e(n) {
        siberia.popup.create("#holding-list-edit-popup", {
            submitText: text.global.labels.create,
            windowOptions: {
                title: text.global.titles.addWaitingListItem,
                width: "630"
            },
            clear: function() {
                var r = siberia.scheduler.getSelectionData()
                  , i = r.Appointment;
                typeof i == "undefined" || i == null ? (n.item.LocationId = r.LocationId,
                n.item.DoctorId = r.DoctorId) : (n.item.LocationId = i.LId,
                n.item.DoctorId = i.DId,
                n.item.PatientId = i.PtId,
                n.item.PatientDateOfBirth = i.PtDOB,
                n.item.PatientFullName = i.PtN,
                n.item.PatientIsInactive = i.PtInactive);
                t(n.item)
            },
            success: function() {
                i()
            },
            cancel: function() {
                n.cancel()
            }
        })
    }
    function o(n) {
        siberia.popup.create("#holding-list-edit-popup", {
            submitText: text.global.labels.update,
            windowOptions: {
                title: text.global.titles.editWaitingListItem,
                width: "630"
            },
            clear: function() {
                t(n)
            },
            success: function() {
                i()
            }
        })
    }
    function t(t) {
        n("#HoldingList_Id").val(t.Id);
        n("#HoldingList_LocationId").data("kendoMultiSelect").value(t.LocationId);
        n("#HoldingList_DoctorId").data("kendoMultiSelect").value(t.DoctorId);
        n("#HoldingList_Notes").val(t.Notes);
        var i = [];
        t.PatientId && i.push({
            PatientId: t.PatientId,
            PatientFullName: t.PatientFullName,
            HighlightedFullName: t.PatientFullName,
            PatientDateOfBirth: t.PatientDateOfBirth,
            HighlightedDateOfBirth: t.PatientDateOfBirth,
            PatientNumber: t.PatientNumber,
            HighlightedPatientNumber: t.PatientNumber,
            PatientIsInactive: t.PatientIsInactive
        });
        siberia.multiSelect.attachValue("#HoldingList_PatientId", i, "PatientId")
    }
    function s() {
        var i, t, r;
        n("#HoldingList_Id").val("0");
        n("#HoldingList_IsContacted").val(!1);
        n("#HoldingList_Notes").val("");
        siberia.multiSelect.clearValue("#HoldingList_DoctorId");
        siberia.multiSelect.clearValue("#HoldingList_LocationId");
        siberia.multiSelect.clearValue("#HoldingList_PatientId");
        i = siberia.scheduler.getSelectionData();
        t = i.Appointment;
        typeof t == "undefined" || t == null ? (n("#HoldingList_LocationId").data("kendoMultiSelect").value(i.LocationId),
        n("#HoldingList_DoctorId").data("kendoMultiSelect").value(i.DoctorId)) : (n("#HoldingList_LocationId").data("kendoMultiSelect").value(t.LId),
        n("#HoldingList_DoctorId").data("kendoMultiSelect").value(t.DId),
        r = [],
        t.PtId && r.push({
            PatientId: t.PtId,
            PatientFullName: t.PtN,
            HighlightedFullName: t.PtN,
            PatientDateOfBirth: t.PtDOB,
            HighlightedDateOfBirth: t.PtDOB,
            PatientNumber: t.PtNumber,
            HighlightedPatientNumber: t.PtNumber,
            PatientIsInactive: t.PtInactive
        }),
        siberia.multiSelect.attachValue("#HoldingList_PatientId", r, "PatientId"))
    }
    function i() {
        n("#holding-list-grid").data("kendoGrid").dataSource.read()
    }
    siberia.ensureObject("siberia.holdingList");
    siberia.holdingList = function() {
        function s(n) {
            n.on("click", o, c)
        }
        function h(n, t) {
            return !e && f == n && (!t || !r || t == r)
        }
        function c() {
            var t = n(arguments[0].currentTarget).data("patientId");
            return n(u).data("kendoWindow").close(),
            typeof i != "undefined" && i(t),
            !0
        }
        function l(n) {
            n.on("click", ".js-holding-list-contacted", a)
        }
        function a() {
            var r = n("#holdingList-view-container").data("toggleContactedUrl")
              , i = n(this).data("itemId");
            return t.indexOf(i) > -1 ? !1 : (n.ajax({
                type: "POST",
                url: r,
                contentType: "application/json",
                data: JSON.stringify({
                    itemId: i
                }),
                beforeSend: function() {
                    t.push(i)
                },
                complete: function() {
                    var n = t.indexOf(i);
                    t.splice(n, 1)
                }
            }),
            !0)
        }
        function v(t) {
            return n.ajax({
                type: "POST",
                url: n("#holdingList-view-container").data("getPatientUrl"),
                async: !1,
                contentType: "application/json",
                data: JSON.stringify({
                    patientId: t
                })
            }).responseText
        }
        var t = [], o = ".js-holdinglist-btn-appt", u = "#holding-list-popup", i, f = 0, r = 0, e = !1, y = function(n, t, u, o, s) {
            f = t;
            r = u;
            e = o;
            n.dataSource.read();
            n.refresh();
            typeof s != "undefined" && (i = s)
        }, p = function(n, t) {
            u = t;
            l(n.element);
            s(n.element)
        };
        return {
            init: p,
            reinitGridData: y,
            getPatientNameById: v,
            getIsAppointmentActive: h
        }
    }();
    n(document).ready(function() {
        r()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.privateFee");
    siberia.privateFee = function() {
        function f() {
            n("#private-fee-grid").length !== 0 && (u.init(),
            t.init(),
            siberia.grid.initClientGrid({
                gridSelector: "#private-fee-grid",
                addAction: e,
                editAction: o,
                deleteAction: s,
                isCustomEditing: !0
            }))
        }
        function e(n) {
            siberia.popup.create("#private-fee-popup", {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addOverride,
                    width: "460"
                },
                clear: function() {
                    t.resetFields();
                    t.setAddMode()
                },
                success: function() {
                    r()
                },
                cancel: function() {
                    n.cancel()
                }
            })
        }
        function o(n) {
            siberia.popup.create("#private-fee-popup", {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.editOverride
                },
                clear: function() {
                    t.copyItemToPopup(n);
                    t.setEditMode()
                },
                success: function() {
                    r()
                }
            })
        }
        function s() {
            i().dataSource.sync()
        }
        function r() {
            i().dataSource.read()
        }
        function i() {
            return n("#private-fee-grid").data("kendoGrid")
        }
        var u = function() {
            function e(i) {
                return r = n(i.data.ButtonId),
                r.prop("disabled", !0),
                u = n(i.data.SpinnerId),
                u.show(),
                f = i.data.SuccessMessage,
                i.preventDefault(),
                t.ajaxSubmit({
                    success: function(n) {
                        siberia.validation.processAjaxErrors(t, n.Errors) && (siberia.notification.showSuccessNotification(f, r),
                        o(n.Data[0].IsNinetyDayGapSchemeTurnedOn))
                    },
                    error: function() {
                        siberia.validation.showFormNetworkError(t)
                    },
                    complete: function() {
                        u.hide();
                        r.prop("disabled", !1)
                    }
                }),
                !1
            }
            function o(n) {
                var t = i();
                n ? t.showColumn(1) : t.hideColumn(1);
                t.dataSource.read()
            }
            function s(n, t) {
                this.ButtonId = "#" + n + "_MultiplierSave";
                this.SpinnerId = "#" + n + "_MultiplierSpinner";
                this.SuccessMessage = t
            }
            function h() {
                t = n(".js-privatefee-multiplier-wrapper").closest("form");
                var i = new s("FeeSettings",text.global.status.doctorFeeSettingsSaved);
                n(i.ButtonId).click(i, e);
                n("#FeeSettings_IsNinetyDayGapSchemeTurnedOn").on("change", function(t) {
                    var i = n(t.currentTarget).prop("checked");
                    n(".js-ninety-day-gap-fee-settings").each(function(n, t) {
                        t.style.visibility = i ? "visible" : "hidden"
                    })
                });
                t.on("submit", e)
            }
            var t, r, u, f;
            return {
                init: h
            }
        }()
          , t = function() {
            function p(n) {
                var t = r.find("form")[0];
                t && (t.action = n)
            }
            function ht() {
                b = h.add;
                p(k);
                st()
            }
            function ct() {
                b = h.edit;
                p(d);
                st()
            }
            function st() {
                var r = n("#FeeSettings_IsNinetyDayGapSchemeTurnedOn").prop("checked");
                switch (b) {
                case h.add:
                    t.attr("readonly", !1);
                    i.attr("disabled", !1);
                    g.show();
                    o.hide();
                    nt.toggle(r);
                    a.toggle(!r);
                    break;
                case h.edit:
                    t.attr("readonly", !0);
                    i.attr("disabled", !0);
                    g.hide();
                    o.show();
                    nt.hide();
                    a.show()
                }
            }
            function f(n, t) {
                ut.text(n);
                ft.toggle(t)
            }
            function lt() {
                for (var n = 0; n < i.length; n++)
                    if (i[n].checked)
                        return i[n].value
            }
            function it(t) {
                var r, u;
                if (t)
                    for (r = 0; r < i.length; r++)
                        if (i[r].value === t.toString()) {
                            i[r].checked = !0;
                            u = n(i[r]).attr("data-option-name");
                            a.find(".js-form-text").text(u);
                            return
                        }
            }
            function rt(n) {
                var t = e.data("kendoNumericTextBox");
                t && t.value(n && Number(n) > 0 ? n : "")
            }
            function w() {
                u.attr("disabled", !0);
                u.text(text.global.labels.create);
                v.val("0");
                tt.val(siberia.userSettings.getUserId());
                y.val("");
                t.val("");
                c.text("");
                l.text("");
                e.data("kendoNumericTextBox").enable();
                s.hide();
                o.find(".js-form-text").text("");
                f("", !1);
                it("1");
                rt("")
            }
            function at() {
                var r = t.val(), i;
                t.attr("disabled", !0);
                f(text.global.status.lookingUpNumber, !0);
                siberia.validation.clearValidationErrors(t.closest("form"));
                i = lt();
                n.ajax({
                    type: "POST",
                    contentType: "application/json",
                    url: et,
                    data: JSON.stringify({
                        itemNumber: r,
                        userId: siberia.userSettings.getUserId(),
                        feeOverrideTypeId: i
                    }),
                    success: function(n) {
                        vt(n, r, i)
                    },
                    error: function() {
                        f(text.global.status.ajaxError, !1)
                    },
                    complete: function() {
                        t.attr("disabled", !1)
                    }
                })
            }
            function vt(n, i, r) {
                var o = n && n[0];
                o ? (v.val(o.PrivateFeeId || 0),
                c.text(o.Description),
                l.text(o.ScheduledFeeString),
                y.val(o.ItemTypeId),
                f("", !1),
                it(o.FeeOverrideTypeId || r),
                rt(o.OverrideFee),
                e.data("kendoNumericTextBox").enable(),
                u.attr("disabled", !1),
                o.OverrideFee ? (u.text(text.global.labels.update),
                s.show(),
                p(d)) : (u.text(text.global.labels.create),
                s.hide(),
                p(k)),
                e.data("kendoNumericTextBox").focus()) : (w(),
                f(text.invoices.itemNotFound(i), !1),
                u.attr("disabled", !0),
                t.val(i))
            }
            function yt(i) {
                var r = n(i.target).val();
                if (!r) {
                    w();
                    f(text.global.status.itemNumberIsEmpty, !1);
                    siberia.validation.highlightError(t);
                    return
                }
                at()
            }
            function pt(n) {
                v.val(n.Id);
                tt.val(siberia.userSettings.getUserId());
                y.val(n.ItemTypeId);
                t.val(n.ItemNumber);
                o.find(".js-form-text").text(n.ItemNumber);
                s.hide();
                u.attr("disabled", !1);
                c.text(n.Description);
                l.text(n.ScheduledFeeString);
                it(n.FeeOverrideTypeId);
                rt(n.OverrideFee)
            }
            function wt() {
                r = n("#private-fee-popup");
                et = r.data("find-url");
                k = r.data("create-url");
                d = r.data("update-url");
                t = n("#PrivateFee_ItemNumber");
                ut = n("#PrivateFee_OverrideStatus");
                s = n(".js-existing-override-message", r);
                ft = n("#PrivateFee_OverrideSpinner");
                c = n("#BillableItem_Description");
                i = n("input#PrivateFee_FeeOverrideTypeId");
                l = n("#BillableItem_Scheduled");
                e = n("#PrivateFee_OverrideFee");
                g = n(".js-item-number-control", r);
                o = n(".js-item-number-text", r);
                nt = n(".js-fee-override-type-options", r);
                a = n(".js-fee-override-type-name", r);
                u = n("#PrivateFee_SaveOverride");
                ot = n("#PrivateFee_CancelOverride");
                v = n("#PrivateFee_Id");
                tt = n("#PrivateFee_UserId");
                y = n("#PrivateFee_ItemTypeId");
                bt()
            }
            function bt() {
                t.change(yt);
                t.keyup(function(n) {
                    n.keyCode === 13 && n.target.blur()
                });
                i.change(function() {
                    t.val() && t.change()
                });
                ot.click(w)
            }
            var h = {
                add: "add",
                edit: "edit"
            }, r, b, t, ut, ft, et, k, d, c, l, i, e, g, o, nt, a, s, u, ot, v, tt, y;
            return {
                init: wt,
                setAddMode: ht,
                setEditMode: ct,
                copyItemToPopup: pt,
                resetFields: w
            }
        }();
        return {
            init: f
        }
    }();
    n(document).ready(function() {
        siberia.privateFee.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.doctorSettings");
    siberia.doctorSettings = function() {
        function t() {
            n("#doctor-settings-list-grid").length !== 0 && (siberia.grid.initClientGrid({
                gridSelector: "#doctor-settings-list-grid",
                saveAndCloseSelector: null,
                editAction: o
            }),
            siberia.common.initWarningConfrimarionEvent("#doctor-settings-popup", "#confirm-and-force-save-changes", "#DoctorSettings_WarningsConfirmed", "#doctor-settings-popup .js-popup-submit"),
            i(),
            r(),
            u(),
            f())
        }
        function i() {
            var i = n("#fieldsOfSpeialty")
              , t = n(".js-ong-favorites");
            if (i.length && t.length) {
                var r = i.data("kendoDropDownList")
                  , f = t.attr("data-ong-field-of-speciality")
                  , u = function() {
                    t.toggle(r.value() == f)
                };
                r.bind("change", u);
                u()
            }
        }
        function r() {
            n("#VitalsSettings fieldset").siberiaFieldsetSwitcher();
            n("#RiskAssessmentSettings fieldset").siberiaFieldsetSwitcher()
        }
        function u() {
            n(".js-vitals-settings-switch").siberiaOnOffToggler(".js-vitals-on", ".js-vitals-off");
            n(".js-cdm-settings-switch").siberiaOnOffToggler(".js-cdm-on", ".js-cdm-off");
            n(".js-ophthalmology-settings-switch").siberiaOnOffToggler(".js-ophthalmology-on", ".js-ophthalmology-off");
            n(".js-immunisation-settings-switch").siberiaOnOffToggler(".js-immunisation-on", ".js-immunisation-off")
        }
        function f() {
            n("#saveConsultSettings").click(function(t) {
                var u = n(this), i, r;
                t.preventDefault();
                u.blur();
                i = n(".js-global-spinner-container");
                i.spinner(!0);
                r = u.closest("form");
                r.ajaxSubmit({
                    success: function(n) {
                        i.spinner(!1);
                        siberia.validation.processAjaxErrors(r, n.Errors) ? siberia.notification.showSuccessNotification(text.global.status.doctorConsultSettingsSaved, u) : e()
                    },
                    error: function() {
                        i.spinner(!1);
                        siberia.validation.showNetworkError(r)
                    }
                })
            })
        }
        function e() {
            var t = n(".js-current-consult-collapse-pnl");
            t.next(".js-collapse-pnl-content").is(":hidden") && n(".js-current-consult-collapse-pnl").click()
        }
        function o(n) {
            siberia.popup.create("#doctor-settings-popup", {
                windowOptions: {
                    title: text.global.titles.editDoctorSettingsForLocation,
                    width: "630"
                },
                ajax: {
                    enabled: !0
                },
                clear: function() {
                    s(n)
                },
                success: function(t) {
                    h(n, t.Data[0].ProviderNumber)
                }
            })
        }
        function s(t) {
            var i = n("#DoctorSettings_LocationName");
            i.text(t.LocationName);
            n("#DoctorSettings_WarningsConfirmed").val(!1);
            n("#DoctorSettings_Id").val(t.Id);
            n("#DoctorSettings_LocationId").val(t.LocationId);
            n("#DoctorSettings_ProviderNumber").val(t.ProviderNumber);
            n("#DoctorSettings_MoRoutingId").val(t.MoRoutingId);
            n("#DoctorSettings_AccountName").val(t.AccountName);
            n("#DoctorSettings_AccountNumber").val(t.AccountNumber);
            n("#DoctorSettings_BSBNumber").val(t.BSBNumber);
            n("#DoctorSettings_BankName").val(t.BankName);
            n("#DoctorSettings_PayeeId").val(t.PayeeId);
            n("#DoctorSettings_UserId").val(siberia.userSettings.getUserId())
        }
        function h(t, i) {
            n("#DoctorSettings_ProviderNumber").val(i != null ? i : "");
            t.set("ProviderNumber", i != null ? i : "");
            t.set("MoRoutingId", n("#DoctorSettings_MoRoutingId").val());
            t.set("AccountName", n("#DoctorSettings_AccountName").val());
            t.set("AccountNumber", n("#DoctorSettings_AccountNumber").val());
            t.set("BSBNumber", n("#DoctorSettings_BSBNumber").val());
            t.set("PayeeId", n("#DoctorSettings_PayeeId").val());
            var r = n("#DoctorSettings_BankName").val();
            t.set("BankName", r != null ? r : "")
        }
        return {
            init: t
        }
    }();
    n(document).ready(function() {
        siberia.doctorSettings.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.patientPortalSettings");
    siberia.patientPortalSettings = function() {
        function r() {
            var i = function(t) {
                return function() {
                    return n.ajax({
                        type: "GET",
                        url: t
                    })
                }
            }
              , r = function(t) {
                return function(i) {
                    return n.ajax({
                        type: "POST",
                        url: t,
                        contentType: "application/json",
                        data: JSON.stringify({
                            Value: i
                        })
                    })
                }
            }
              , u = function(i) {
                return function(r) {
                    return n(i).html(r),
                    t(i),
                    r
                }
            };
            n(".js-patient-portal-settings-richtext").on("click", function(t) {
                t.preventDefault();
                var f = n(t.currentTarget)
                  , e = f.attr("data-label")
                  , o = f.attr("data-geturl")
                  , s = f.attr("data-seturl")
                  , h = f.attr("data-preview");
                i(o)().then(siberia.editor.edit(e)).then(u(h)).then(r(s))
            })
        }
        function u() {
            var t = function(t) {
                var i = n(t)
                  , r = i.val().toLowerCase() == "true";
                n(".js-patient-portal-logotype-upload").toggle(r)
            };
            n(".js-patient-portal-logotype-option").on("click", function(n) {
                t(n.currentTarget)
            });
            t(".js-patient-portal-logotype-option:checked");
            siberia.uploadPicture.init(n(".js-patient-portal-logotype"), "#PatientPortalLogotypeFileId")
        }
        function f() {
            n(".js-portal-settngs-switch").siberiaOnOffToggler(".js-patient-portal-on", ".js-patient-portal-off")
        }
        function e() {
            n("#savePortalSettings").click(function(t) {
                var u = n(this), i, r;
                t.preventDefault();
                u.blur();
                i = n(".js-global-spinner-container");
                i.spinner(!0);
                r = u.closest("form");
                r.ajaxSubmit({
                    success: function(n) {
                        i.spinner(!1);
                        siberia.validation.processAjaxErrors(r, n.Errors) && siberia.notification.showSuccessNotification(text.global.status.patientPortalSettingsSaved, u)
                    },
                    error: function() {
                        i.spinner(!1);
                        siberia.validation.showNetworkError(r)
                    }
                })
            })
        }
        function t(t) {
            var i = n(t).text()
              , r = !1;
            i && (i = n.trim(i),
            r = i.length !== 0);
            n(t).toggle(r)
        }
        function o() {
            siberia.grid.initClientGrid({
                gridSelector: "#public-location-grid",
                editAction: s,
                isCustomEditing: !0
            });
            siberia.popup.create("#how-to-get-latitude-and-longitude-popup", {
                openPopupBtn: ".js-how-to-get-latitude-and-longitude",
                windowOptions: {
                    title: text.global.titles.howToGetLatitudeAndLongitude,
                    modal: !1,
                    width: "640"
                },
                ajax: {
                    enabled: !1
                }
            })
        }
        function s(t) {
            var i = "#public-location-popup";
            siberia.popup.create(i, {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.editLocation,
                    width: "480"
                },
                clear: function() {
                    h(t, i)
                },
                success: function() {
                    n("#public-location-grid").data("kendoGrid").dataSource.read()
                }
            })
        }
        function h(t, i) {
            n(i + ' [name$="LocationId"]').val(t.LocationId);
            n(i + ' [name$="SelfCheckInDistance"]').data("kendoDropDownList").value(t.SelfCheckInDistance);
            n(i + ' [name$="IsPublic"]').prop("checked", t.IsPublic);
            n(i + ' [name$="AllowSelfCheckIn"]').prop("checked", t.AllowSelfCheckIn);
            n(i + ' [name$="AllowWalkIn"]').prop("checked", t.AllowWalkIn);
            n(i + ' [name$="Longitude"]').data("kendoNumericTextBox").value(t.Longitude);
            n(i + ' [name$="Latitude"]').data("kendoNumericTextBox").value(t.Latitude)
        }
        function c() {
            n("#PatientPortalSettings fieldset").siberiaFieldsetSwitcher()
        }
        function l() {
            t(".js-patient-portal-settings-consent");
            t(".js-patient-portal-settings-disclaimer")
        }
        function a() {
            i();
            var t = n("#AllowDoctorIds").data("kendoMultiSelect");
            t.bind("change", i)
        }
        function i() {
            var r = n("#AllowDoctorIds").data("kendoMultiSelect"), i, t, u, f;
            r && (i = r.dataItems(),
            t = n("#PublicDoctorIds").data("kendoMultiSelect"),
            t) && (u = t.value(),
            t.dataSource.data(i),
            f = n.map(i, function(n) {
                if (u.indexOf(n.Id) !== -1)
                    return n.Id
            }),
            t.value(f))
        }
        function v() {
            f();
            r();
            u();
            e();
            c();
            o();
            l();
            a();
            siberia.common.initWarningConfrimarionEvent("body", "#confirm-and-force-save-changes", "#WarningsConfirmed", "#savePortalSettings")
        }
        return {
            init: v
        }
    }();
    n(document).ready(function() {
        n("#PatientPortalSettings").length > 0 && siberia.patientPortalSettings.init()
    })
}(jQuery),
function(n) {
    n(function() {
        var t = n("[id$=SuburbId]").data("kendoMultiSelect"), r = n("[id$=SuburbId]").data("get-suburb-url"), i;
        t && r && (t.dataSource.data([]),
        siberia.multiSelect.clear(t),
        i = t.options.value,
        n.post(r, {
            id: n.isArray(i) ? i[0] : i
        }, function(n) {
            t.dataSource.add(n);
            t.value(n.Id)
        }))
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.assignDoctorPopup");
    siberia.assignDoctorPopup = function() {
        function e(i) {
            t.find(".js-popup-submit").toggleClass("btn-disabled", !i);
            n("#AssignDoctor_DoctorId").val(i || "")
        }
        function u() {
            i.dataSource.total() > 0 ? i.select("tr:eq(1)") : e(null)
        }
        function s(n) {
            i.dataSource.data(n);
            u();
            siberia.popup.center(f)
        }
        function h() {
            var r = n("#link-doctor-list").data("get-all-doctors");
            r && (t.spinner(!0),
            n.ajax({
                type: "POST",
                url: r,
                contentType: "application/json",
                success: function(n) {
                    siberia.validation.processAjaxErrors(t, n.Errors) && (i.dataSource.filter([{
                        field: "Surname",
                        operator: "startswith",
                        value: ""
                    }]),
                    s(n))
                },
                error: function() {
                    siberia.validation.showFormNetworkError(t)
                },
                complete: function() {
                    t.spinner(!1)
                }
            }))
        }
        function a() {
            var u = n("#link-doctor-list").data("get-doctor-candidates"), i;
            u && (i = {
                lastName: r.attr("data-doctor-last-name") || "",
                firstName: r.attr("data-doctor-first-name") || ""
            },
            i.lastName || i.firstName || h(),
            t.spinner(!0),
            n.ajax({
                type: "POST",
                url: u,
                data: JSON.stringify(i),
                contentType: "application/json",
                success: function(n) {
                    siberia.validation.processAjaxErrors(t, n.Errors) && s(n)
                },
                error: function() {
                    siberia.validation.showFormNetworkError(t)
                },
                complete: function() {
                    t.spinner(!1)
                }
            }))
        }
        function v(o) {
            siberia.popup.create(f, {
                submitText: text.global.labels.assign,
                windowOptions: {
                    title: text.global.labels.assignDoctorToLabResultPopupHeader,
                    width: "800"
                },
                clear: function() {
                    a();
                    n("#doctors-search").val("");
                    i.dataSource.filter([{
                        field: "Surname",
                        operator: "startswith",
                        value: ""
                    }]);
                    n("#AssignDoctor_EntityId").val(r.attr("data-entity-id") || "")
                },
                success: function(n) {
                    siberia.validation.processAjaxErrors(t, n.Errors) && o()
                },
                cancel: function() {
                    e(null);
                    n("#AssignDoctor_EntityId").val("")
                }
            });
            i.pager.bind("change", function() {
                u()
            });
            var s = i.wrapper.children(".k-grid-pager").find("select").data("kendoDropDownList");
            s.bind("change", function() {
                u()
            });
            i.bind("change", function() {
                var n = this.dataSource.getByUid(this.select().data("uid"));
                e(n.Id)
            });
            siberia.searchBox.initSearch(function(n) {
                i.dataSource.filter([{
                    field: "Surname",
                    operator: "startswith",
                    value: n
                }]);
                u()
            })
        }
        function y(u) {
            (t = n(f),
            t.length != 0) && (o = n(c),
            i = o.data("kendoGrid"),
            r = n(l),
            t.length === 1 && i && u && (t.find(".js-show-all-doctors").click(function() {
                h()
            }),
            v(u)))
        }
        var f = "#assign-doctor-popup", c = "#assign-doctors-grid", t, r, l = ".js-assign-doctor", i, o;
        return {
            init: y
        }
    }();
    n(document).ready(function() {
        siberia.assignDoctorPopup.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.labRequest");
    siberia.labRequest = function() {
        function e() {
            f(r, ".js-link-pathology-to-result");
            f(u, ".js-link-imaging-to-result")
        }
        function o(n, f, e, o, h) {
            var c = s(n);
            c == i.pathology ? (t.requestPopupSelector = "#pathology-request-link-result-popup",
            t.requestPopupTitle = text.global.titles.popupLinkPathologyResult,
            t.requestGridSelector = r) : c == i.imaging && (t.requestPopupSelector = "#imaging-request-link-result-popup",
            t.requestPopupTitle = text.global.titles.popupLinkImagingResult,
            t.requestGridSelector = u);
            t.linkResultUrl = e;
            t.labResultInfo = n;
            t.patientId = f;
            t.cancel = h;
            t.success = o;
            l()
        }
        function s(n) {
            return n.split("_")[0]
        }
        function h() {
            return {
                patientId: t.patientId
            }
        }
        function c() {
            var i = n(t.requestGridSelector).data("kendoGrid");
            i.dataSource.total() > 0 ? siberia.popup.create(t.requestPopupSelector, {
                windowOptions: {
                    title: t.requestPopupTitle,
                    width: "630"
                },
                ajax: {
                    enabled: !1
                },
                cancel: t.cancel
            }) : t.success && t.success()
        }
        function l() {
            var i = n(t.requestGridSelector).data("kendoGrid")
              , r = i.dataSource.read();
            r.done(c)
        }
        function f(t, i) {
            n(t).on("click", i, a)
        }
        function a(i) {
            var r, u;
            i.preventDefault();
            r = n(".js-global-spinner-container");
            n(t.requestPopupSelector).data("kendoWindow").close();
            u = i.target.getAttribute("data-item-id");
            r.spinner(!0);
            n.ajax({
                type: "POST",
                url: t.linkResultUrl,
                contentType: "application/json",
                data: JSON.stringify({
                    labResultId: t.labResultInfo,
                    labRequestId: u
                }),
                success: t.success,
                complete: function() {
                    r.spinner(!1)
                }
            })
        }
        var t = {
            requestPopupSelector: undefined,
            requestPopupTitle: undefined,
            requestGridSelector: undefined,
            linkResultUrl: undefined,
            labResultInfo: 0,
            patientId: 0,
            cancel: null,
            success: null
        }
          , i = {
            pathology: 1,
            imaging: 2
        }
          , r = "#pathology-request-link-result-grid"
          , u = "#imaging-request-link-result-grid";
        return {
            init: e,
            createLabRequestPopup: o,
            getPatient: h
        }
    }();
    n(document).ready(function() {
        siberia.labRequest.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.labResultsView");
    siberia.labResultsView = function() {
        function d() {
            var t = o();
            if (t) {
                f = siberia.infiniteScroll.create({
                    listViewSelector: "#laboratory-result-list",
                    tabWrapper: n(".js-lab-result-tab-wrapper"),
                    onItemSelected: g,
                    getOlderItemsUrl: n("#laboratory-result-list").data("get-older-items-url"),
                    scrollWrapper: n("#laboratory-result-list").closest(".js-scroll-wrapper"),
                    doNotResizeViewer: !0,
                    getRequestAdditionalData: ut
                });
                e = n(".js-global-spinner-container");
                n("#unlinked-responses-grid").on("click", ".js-review-lab-result", function(n) {
                    n.ctrlKey || e.spinner(!0)
                });
                t.dataSource.bind("change", function(n) {
                    n.field == "LinkedPatient" && requestAnimationFrame(r)
                });
                n("#PatientUnlinkedWarning").hide();
                bt();
                dt();
                kt();
                gt();
                ni();
                ti();
                lt();
                ct();
                ii();
                ri();
                at();
                wt();
                c()
            }
        }
        function g(t) {
            nt(t);
            tt(t);
            r();
            siberia.documentViewer.previewFile(n("#laboratory-result-list").closest(".js-lab-result-tab-wrapper"), t.PreviewUrl)
        }
        function nt(t) {
            var f = i()
              , r = u(f);
            n(".js-link-patient").attr("data-entity-id", t.Id).attr("data-patient-last-name", r && r.LastName || t.PatientLastName).attr("data-patient-first-name", r && r.FirstName || t.PatientFirstName).attr("data-patient-date-of-birth", r && r.DateOfBirthStr || t.PatientDateOfBirth)
        }
        function tt(t) {
            var i = n(".js-assign-doctor");
            i.attr("data-entity-id", t.Id);
            i.attr("data-doctor-last-name", t.DoctorLastName);
            i.attr("data-doctor-first-name", t.DoctorFirstName)
        }
        function r() {
            var t = i()
              , r = u(t);
            it(t, r);
            rt(r);
            p();
            c(t);
            n("#PatientUnlinkedWarning").toggle(!r);
            n(".js-linked-doctor").text(t && t.DoctorFullName || "")
        }
        function it(t, i) {
            var r = !t, u = !i, f;
            n(".js-assign-doctor").toggleClass("btn-disabled", r);
            f = !!(t && t.LinkedPatient != null);
            n(".js-cancel-link-patient-btn").toggle(f);
            n(".js-link-patient").toggleClass("btn-disabled", r);
            n(".js-accept-btn").toggleClass("btn-disabled", u);
            n(".js-accept-publish-btn").toggleClass("btn-disabled", u);
            n(".js-new-patient-btn").toggleClass("btn-disabled", r);
            n(".js-lab-result-quick-consult").toggleClass("btn-disabled", u).attr("data-patient-id", i && i.Id);
            n("#sendSmsBtn").toggleClass("btn-disabled", u);
            n(".js-todo-btn").toggleClass("btn-disabled", u);
            n(".js-print-result-btn").toggleClass("btn-disabled", r);
            n(".js-delete-result-btn").toggleClass("btn-disabled", r)
        }
        function c(t) {
            var i = n(".js-copied")
              , r = t && t.CopyTo;
            i && (i.closest(".output").toggle(!!r),
            i.text(r || ""))
        }
        function u(n) {
            return n && (n.LinkedPatient || n.AutoLinkedPatient)
        }
        function rt(t) {
            oi();
            var i = t && t.FullName + " (" + t.DateOfBirthStr + ")";
            n(".js-linked-patient-info").text(i || "");
            n(".js-linked-patient-phone").text(t && t.Phone || "");
            n(".js-linked-patient-email").text(t && t.Email || "")
        }
        function o() {
            return kendo.widgetInstance(n("#laboratory-result-list"))
        }
        function ut() {
            return {
                skip: o().dataSource.data().length,
                resultFilter: t
            }
        }
        function i() {
            var t = kendo.widgetInstance(n("#laboratory-result-list"));
            return t.dataItem(t.select())
        }
        function ft(t) {
            t.preventDefault();
            var f = n(t.currentTarget)
              , e = f.attr("data-send-sms-url")
              , o = i()
              , r = u(o)
              , s = {
                patients: [{
                    PatientId: r.Id,
                    PatientFullName: r.FullName,
                    HighlightedFullName: r.FullName,
                    PatientDateOfBirth: r.DateOfBirthStr,
                    HighlightedDateOfBirth: r.PatientDob,
                    PatientNumber: null,
                    HighlightedPatientNumber: null,
                    PatientIsInactive: r.IsInactive
                }]
            };
            siberia.sms.showPopup(s, e, null, !0)
        }
        function et(n) {
            n.preventDefault();
            var r = i()
              , t = u(r)
              , f = {
                Id: t.Id,
                FullName: t.FullName,
                DateOfBirth: t.DateOfBirthStr,
                HighlightedDateOfBirth: null,
                PatientNumber: null,
                HighlightedPatientNumber: null,
                PatientIsInactive: t.IsInactive
            }
              , e = r.LabResultTypeId == "1" ? text.clinical.labResultTypePathology : text.clinical.labResultTypeImaging
              , o = text.clinical.etaskForLabResultSubject(t.FullName, e, r.ResultName);
            siberia.todoList.addToDoForPatient(f, o)
        }
        function l(n) {
            return function(t) {
                t.preventDefault();
                var f = i()
                  , e = u(f)
                  , r = v().value();
                r = r && r.pop();
                ot(f.Id, e.Id, r, n)
            }
        }
        function ot(t, i, u, o) {
            n.ajax({
                type: "POST",
                url: siberia.config.urls.acceptResult(),
                contentType: "application/json",
                data: JSON.stringify({
                    resultId: t,
                    patientId: i,
                    requestId: u,
                    publish: o
                }),
                success: function(t) {
                    siberia.validation.processAjaxErrors(n(".js-error-message"), t.Errors) && (f.removeSelectedItem(),
                    r())
                },
                error: function() {
                    siberia.validation.showGridNetworkError(!0)
                },
                complete: function() {
                    e.spinner(!1)
                }
            })
        }
        function st(n) {
            n.preventDefault();
            siberia.linkPatientPopup.init(h)
        }
        function ht(n) {
            n.preventDefault();
            siberia.assignDoctorPopup.init(y)
        }
        function ct() {
            n(".js-cancel-link-patient-btn").click(function() {
                h(null)
            })
        }
        function lt() {
            n(".js-move-button").click(function() {
                siberia.todoList.isOpenAndMinimized() || e.spinner(!0)
            })
        }
        function at() {
            var t = n(".js-toolbar-filter-popup");
            n(".js-btn-show-toolbar-filter").click(function() {
                t.fadeToggle("fast")
            });
            vt(t)
        }
        function vt(t) {
            var i = n(".js-toolbar-filter-popup form");
            if (i) {
                i.kendoValidator();
                n(".js-btn-cancel-lab-result-filter").on("click", function() {
                    t.fadeOut("fast")
                });
                n(".js-btn-apply-lab-result-filter").on("click", function(n) {
                    n.preventDefault();
                    i.valid() && (f.clearState(),
                    pt(),
                    o().dataSource.read().then(function() {
                        requestAnimationFrame(r)
                    }),
                    t.fadeOut("fast"))
                })
            }
        }
        function yt() {
            return {
                resultFilter: t
            }
        }
        function pt() {
            var i = a("#DoctorName")
              , r = a("#PatientName");
            t.isFiltered = !0;
            t.resultName = n("#ResultName").val();
            t.laboratoryName = n("#LaboratoryName").val();
            t.collectionDate = s("#CollectionDate");
            t.requestDate = s("#RequestDate");
            t.patientName = r.text;
            t.patientId = r.id;
            t.doctorName = i.text;
            t.doctorId = i.id;
            t.patientBirthDate = s("#PatientBirthDate")
        }
        function s(t) {
            var i = n(t).data("kendoDatePicker");
            return i ? i.value() : null
        }
        function a(t) {
            var i = n(t).data("kendoComboBox")
              , r = {
                id: null,
                value: null
            };
            return i && (r.id = i.value(),
            r.text = i.text()),
            r
        }
        function wt() {
            var r = n(".js-collapse-linked-result-pnl")
              , i = n(".js-linked-patient-container")
              , t = "expanded";
            r.click(function() {
                t === "expanded" ? (i.animate({
                    height: "15px"
                }),
                t = "collapsed",
                n(this).find(".icon").addClass("icon-down").removeClass("icon-up")) : (i.animate({
                    height: "auto"
                }),
                t = "expanded",
                n(this).find(".icon").removeClass("icon-down").addClass("icon-up"))
            })
        }
        function bt() {
            n(".js-accept-btn").on("click", l(!1));
            n(".js-accept-publish-btn").on("click", l(!0))
        }
        function kt() {
            n(".js-new-patient-btn").on("click", fi)
        }
        function dt() {
            n("#sendSmsBtn").on("click", ft)
        }
        function gt() {
            n(".js-todo-btn").on("click", et)
        }
        function ni() {
            n(".js-delete-result-btn").on("click", ui)
        }
        function ti() {
            n(".js-print-result-btn").on("click", function() {
                var n = i();
                window.open(n.PrintUrl, "_blank")
            })
        }
        function ii() {
            n(".js-link-patient").on("click", st)
        }
        function ri() {
            n(".js-assign-doctor").on("click", ht)
        }
        function ui() {
            if (confirm(text.global.confirms.deleteLabResult)) {
                e.spinner(!0);
                var t = i();
                n.ajax({
                    type: "POST",
                    url: siberia.config.urls.deleteResult(),
                    contentType: "application/json",
                    data: JSON.stringify({
                        resultId: t.Id
                    }),
                    success: function(t) {
                        siberia.validation.processAjaxErrors(n(".js-error-message"), t.Errors) && (f.removeSelectedItem(),
                        r())
                    },
                    error: function() {
                        siberia.validation.showGridNetworkError(!0)
                    },
                    complete: function() {
                        e.spinner(!1)
                    }
                })
            }
        }
        function fi(n) {
            n.preventDefault();
            var t = i()
              , r = {
                name: t.PatientFirstName,
                surname: t.PatientLastName,
                sex: t.PatientSex,
                phone: t.PatientPhone,
                dateOfBirth: t.PatientDateOfBirth,
                salutationId: t.PatientSalutationId
            }
              , u = {
                patientDetails: r,
                action: siberia.config.urls.createPatientAndAcceptResult({
                    resultId: t.Id
                }),
                successCallback: ei
            };
            siberia.patientInfoPopup.openPatientPopupWindow(text.global.titles.addPatientFromResult, u)
        }
        function ei(t) {
            siberia.validation.processAjaxErrors(n(".js-error-message"), t.Errors) && (f.removeSelectedItem(),
            r())
        }
        function v() {
            return n("#PatientLabRequests").data("kendoMultiSelect")
        }
        function oi() {
            var n = v(), t, r;
            n && !n._request && (t = i(),
            r = u(t),
            r ? n.dataSource.read({
                patientId: r.Id,
                resultTypeId: t.LabResultTypeId
            }).then(function() {
                n.enable(n.dataSource.data().length > 0)
            }) : (n.dataSource.data([]),
            n.enable(!1)))
        }
        function h(n) {
            var t = i();
            t && t.set("LinkedPatient", n)
        }
        function y() {
            r();
            f.removeSelectedItem()
        }
        function p() {
            var t = i(), r = u(t), f, e;
            if (!r) {
                f = {
                    NextAppointmentInfo: undefined,
                    OnGInfo: undefined
                };
                w(f);
                return
            }
            e = n("#laboratory-result-list").data("get-patient-additional-info");
            n.ajax({
                type: "POST",
                url: e,
                data: {
                    patientId: r.Id,
                    doctorId: t.DoctorId
                },
                success: function(t) {
                    siberia.validation.processAjaxErrors(n(".js-error-message"), t.Errors) && w(t)
                },
                error: function() {
                    siberia.validation.showGridNetworkError(!0)
                }
            })
        }
        function w(t) {
            var i, r, u;
            t && (t.NextAppointmentInfo && (i = b(t.NextAppointmentInfo)),
            n(".js-next-patient-appointment").html(i || ""),
            r = t.OnGInfo != null,
            n(".js-patient-ong-info").toggle(r),
            t.OnGInfo && (u = k(t.OnGInfo)),
            n(".js-patient-ong-info").html(u || ""))
        }
        var f, e, t = {
            isFiltered: !1,
            resultName: undefined,
            laboratoryName: undefined,
            collectionDate: undefined,
            requestDate: undefined,
            patientName: undefined,
            patientId: undefined,
            doctorName: undefined,
            doctorId: undefined,
            patientBirthDate: undefined
        }, b = kendo.template(n("#template-patient-next-appointment-url").html() || ""), k = kendo.template(n("#template-patient-ong-info").html() || "");
        return {
            doInit: d,
            onLabResultLinkedToPatient: h,
            onLabResultAssignedToDoctor: y,
            getFilter: yt,
            updatePatientAdditionalData: p
        }
    }();
    n(document).ready(function() {
        siberia.labResultsView.doInit()
    })
}(jQuery),
function(n) {
    function a(n) {
        f(n, r)
    }
    function v(i) {
        i.preventDefault();
        var u = n(t.migrationGrid).data("kendoGrid").dataItem(this.closest("tr"));
        siberia.popup.create(t.delayedMigration.popup, {
            windowOptions: {
                title: "Set migration start delay"
            },
            success: r,
            clear: function() {
                n(t.delayedMigration.cancel).toggle(u.HasDelayedStart);
                n(t.delayedMigration.migrationId).val(u.MigrationId);
                n(t.delayedMigration.startDate).val(u.HasDelayedStart ? u.DelayedStartDate : "")
            }
        })
    }
    function y(n) {
        confirm(text.global.confirms.deleteItemGeneric) && f(n, r)
    }
    function p(i) {
        var u = n(t.delayedMigration.migrationId).val();
        f(i, function() {
            siberia.popup.close(t.delayedMigration.popup);
            r()
        }, u)
    }
    function f(i, r, u) {
        var f, o, s, e;
        i.preventDefault();
        f = n(i.currentTarget);
        o = f.attr("href");
        u || (s = n(t.migrationGrid).data("kendoGrid").dataItem(f.closest("tr")),
        u = s.MigrationId);
        e = n(t.spinnerContainer);
        e.spinner(!0);
        n.post(o, {
            migrationId: u
        }).done(function(n) {
            siberia.validation.processGridActionAjaxErrors(n.Errors, !0) && r(n)
        }).fail(function() {
            siberia.validation.showGridNetworkError(!0)
        }).always(function() {
            e.spinner(!1)
        })
    }
    function r() {
        var i = n(t.migrationGrid).data("kendoGrid");
        i.dataSource.read()
    }
    var o = '[name$="ObstetricConsultAppointmentTypeIds"]'
      , t = {
        spinnerContainer: ".js-global-spinner-container",
        migrationGrid: "#migration-list-grid",
        migrationActions: {
            start: ".js-migration-start",
            delayStart: ".js-delay-migration-start",
            "delete": ".js-delete-migration-record"
        },
        delayedMigration: {
            popup: "#delay-start-migration-popup",
            startDate: "#DelayedStart",
            migrationId: "#MigrationId",
            cancel: ".js-cancel-delayed-start"
        }
    }
      , s = function(t) {
        return n.ajax({
            type: "POST",
            url: t,
            contentType: "application/json"
        })
    }
      , i = function(n) {
        return n.id
    }
      , h = function(n, t) {
        return siberia.common.toArray(n).filter(function(n) {
            return n != t
        })
    }
      , u = function(t) {
        return kendo.widgetInstance(n("#" + t))
    }
      , c = function(n) {
        return n.value()
    }
      , l = function(n) {
        return n.reduce(function(n, t) {
            return n.concat(t)
        })
    }
      , e = function(n, t) {
        n[i(t)].forEach(function(t) {
            var i = u(t)
              , r = n[t].map(u)
              , f = l(r.map(c));
            i.dataSource.filter({
                logic: "and",
                filters: f.map(function(n) {
                    return {
                        field: "Id",
                        operator: "neq",
                        value: n
                    }
                })
            })
        })
    };
    n(document).ready(function() {
        var r = siberia.common.toArray(n("select.js-migration-settings-consult-type")), f, c;
        if (r.length != 0) {
            n(t.migrationGrid).on("click", t.migrationActions.start, a).on("click", t.migrationActions.delayStart, v).on("click", t.migrationActions.delete, y);
            n(t.delayedMigration.cancel).on("click", p);
            f = r.reduce(function(n, t) {
                return n[i(t)] = h(r, t).map(i),
                n
            }, {});
            r.map(i).map(u).forEach(function(n) {
                n.bind("change", function(n) {
                    e(f, n.sender.element.get(0))
                })
            });
            c = function(t, i) {
                var r = n(t)
                  , u = kendo.widgetInstance(r);
                u.value(i);
                setTimeout(function() {
                    e(f, r.get(0))
                }, 10)
            }
            ;
            n(".js-migration-settings").on("click", function(t) {
                var i = n(t.target);
                s(i.attr("data-settings-url")).then(function(n) {
                    siberia.popup.create("#migration-settings-popup", {
                        windowOptions: {
                            title: text.global.titles.popupMigrationSettings,
                            width: "630"
                        },
                        init: function() {
                            c(o, n.ObstetricConsultAppointmentTypeIds)
                        }
                    })
                })
            })
        }
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.functions");
    var t = 5242880
      , i = function(t, i, r) {
        var u = new FormData;
        return u.append("fileUploader", i),
        r(u),
        n.ajax({
            type: "POST",
            url: t,
            data: u,
            processData: !1,
            contentType: !1
        })
    }
      , r = function(n) {
        return function(t) {
            for (var i in n)
                n.hasOwnProperty(i) && t.append(i, n[i])
        }
    }
      , f = function(n, t) {
        return i(siberia.config.urls.uploadFile(), n, r(t))
    }
      , e = function(n, t) {
        return i(siberia.config.urls.appendFile(), n, r({
            guid: t
        }))
    }
      , u = function(i, r, f) {
        var o = i.slice(f, f + t, i.type);
        return o.size == 0 ? n.when(r) : e(o, r.Guid).then(function() {
            return u(i, r, f + o.size)
        })
    };
    siberia.functions.uploadBlob = function(n, i) {
        var r = n.slice(0, t, n.type);
        return f(r, i).then(function(t) {
            return u(n, t, r.size)
        })
    }
    ;
    siberia.functions.getBlob = function(t) {
        return n.Deferred(function(n) {
            var i = new XMLHttpRequest;
            i.open("GET", t, !0);
            i.responseType = "blob";
            i.onload = function() {
                this.status == 200 && n.resolve(this.response)
            }
            ;
            i.send()
        })
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.upload.file");
    siberia.upload.file = function() {
        function i() {
            n("#fileUploader").length > 0 && n("#fileUploader").data("kendoUpload").bind("select", u);
            n("[id^=upload-file-list-grid], #clinical-document-list").each(function() {
                var t = n(this)
                  , i = t.data("kendoGrid")
                  , r = "tr";
                i || (i = t.data("kendoListView"),
                r = "div");
                t.on("click", ".js-client-grid-download", function(t) {
                    if (t.currentTarget.href.indexOf("?") < 0) {
                        t.preventDefault();
                        t.stopPropagation();
                        var u = i.dataItem(n(t.currentTarget).closest(r))
                          , f = t.currentTarget.href + "?fileGuid=" + u.Guid
                          , e = t.currentTarget.href;
                        t.currentTarget.href = f;
                        t.currentTarget.click();
                        t.currentTarget.href = e
                    }
                })
            })
        }
        function r(t) {
            var r = t ? "#" + t : null
              , i = n(r || "#fileUploader").data("kendoUpload").wrapper;
            i.find('input:not([id="' + (t || "fileUploader") + '"]), ul').each(function() {
                n(this).remove()
            });
            i.first().addClass("k-upload-empty")
        }
        function u(n) {
            t(n, "#Attachment_FileName")
        }
        function t(t, i) {
            var r, u;
            t.files && t.files.length > 0 ? (r = t.files[0].name,
            r && (u = r.substr(0, r.lastIndexOf(".")) || r,
            n(i).val(u))) : n(i).val("")
        }
        return {
            init: i,
            clearSelectedFile: r,
            onFileSelected: t
        }
    }();
    n(document).ready(function() {
        siberia.upload.file.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.newInternalMessage");
    siberia.newInternalMessage = function() {
        function v() {
            return {
                text: n("#NewInternalMessage_SelectedRecipientToIds").data("kendoMultiSelect").input.val()
            }
        }
        function y() {
            return {
                text: n("#NewInternalMessage_SelectedRecipientCcIds").data("kendoMultiSelect").input.val()
            }
        }
        function p() {
            a || (t.spinner(!0),
            n.ajax({
                type: "POST",
                url: l,
                success: function(n) {
                    a = !0;
                    siberia.multiSelect.attach(r, n, "RecipientKey");
                    siberia.multiSelect.attach(u, n, "RecipientKey")
                },
                complete: function() {
                    t.spinner(!1)
                }
            }))
        }
        function o(i) {
            var r = siberia.internalMessaging.getCurrentMessageId();
            r && (t.spinner(!0),
            n.ajax({
                type: "POST",
                url: i,
                data: {
                    messageId: r
                },
                success: function(n) {
                    it(n);
                    t.spinner(!1)
                }
            }))
        }
        function it(n) {
            r.value(n.SelectedRecipientToIds);
            u.value(n.SelectedRecipientCcIds);
            e.val(n.Subject);
            f.value(n.Body)
        }
        var i, t, s, h, c, l, r, u, e, f, a, w = function() {
            siberia.multiSelect.clear(r);
            siberia.multiSelect.clear(u);
            e.val("");
            r.dataSource.filter({});
            u.dataSource.filter({});
            f && f.value("")
        }, b = function() {
            f || (n("#NewInternalMessage_Body").kendoEditor({
                encoded: !1
            }),
            f = n("#NewInternalMessage_Body").data("kendoEditor"),
            siberia.validation.initValidationFor(n("#new-internal-message-popup").find("form"), n("#new-internal-message-popup").find("form .js-validate")))
        }, k = function() {
            t = n("#new-internal-message-popup");
            i = t.data("kendoWindow");
            n("#btnMessagingNew").click(d);
            n("#btnMessagingReply").click(g);
            n("#btnMessagingReplyAll").click(nt);
            n("#btnMessagingForward").click(tt);
            s = t.data("get-reply-message");
            h = t.data("get-reply-all-message");
            c = t.data("get-forward-message");
            l = t.data("get-recipients");
            r = n("#NewInternalMessage_SelectedRecipientToIds").data("kendoMultiSelect");
            u = n("#NewInternalMessage_SelectedRecipientCcIds").data("kendoMultiSelect");
            e = n("#NewInternalMessage_Subject")
        }, d = function() {
            i.title(text.global.titles.addMessage)
        }, g = function() {
            i.title(text.global.titles.popupReply);
            o(s)
        }, nt = function() {
            i.title(text.global.titles.popupReplyAll);
            o(h)
        }, tt = function() {
            i.title(text.global.titles.popupForward);
            o(c)
        };
        return {
            clearPopup: w,
            activatePopup: b,
            init: k,
            loadRecipients: p,
            onToMultiSelectAdditionalData: v,
            onCcMultiSelectAdditionalData: y
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.internalMessaging");
    siberia.internalMessaging = function() {
        function kt() {
            siberia.popup.create("#internal-messenger-popup", {
                openPopupBtn: ".js-mail-btn",
                windowOptions: {
                    title: text.global.titles.popupInternalMessaging,
                    width: "800"
                },
                clear: siberia.newInternalMessage.loadRecipients,
                close: wi
            });
            t.data("kendoWindow").bind("activate", ui)
        }
        function dt() {
            siberia.popup.create("#new-internal-message-popup", {
                openPopupBtn: ".js-new-message",
                windowOptions: {
                    width: "600"
                },
                clear: siberia.newInternalMessage.clearPopup,
                success: pi
            });
            n("#new-internal-message-popup").data("kendoWindow").bind("activate", siberia.newInternalMessage.activatePopup)
        }
        var t, w, ft, et, ot, b, k, d, wt, st, i, e, v, y, o, s, h, u = {
            leftPanelTabSelected: undefined,
            leftPanelSelectedMessage: undefined,
            leftPanelScroll: 0,
            rightPanelScroll: 0,
            isOpened: !1,
            isBusy: !1,
            isInit: !0,
            canContinueInboxLoading: !0,
            canContinueSentLoading: !0,
            canContinueTrashLoading: !0
        }, g, nt = {
            trash: 0,
            restore: 1
        }, r = {
            getCurrentMailList: function() {
                return n(o.contentElement(o.select().index()))
            },
            getCurrentTabIndex: function() {
                return o.select().index()
            },
            getCurrentListView: function() {
                return n(o.contentElement(o.select().index())).find(".js-messages-list").data("kendoListView")
            },
            getDate: function(n) {
                return new Date(parseInt(n.replace("/Date(", "").replace(")/", ""), 10))
            }
        }, bt = function() {
            return i.MessageId
        }, gt = function() {
            g == nt.trash && at()
        }, ni = function() {}, ti = function() {
            if (t = n("#internal-messenger-popup"),
            t.length == 0) {
                st = !1;
                return
            }
            w = t.data("view-message");
            ft = t.data("move-to-trash");
            et = t.data("restore-from-trash");
            ot = t.data("delete-messages");
            wt = t.data("get-current-location-timezone");
            b = t.data("inbox-scroll");
            k = t.data("sent-scroll");
            d = t.data("trash-scroll");
            v = t.find("#MailTabs");
            y = t.find(".mail-view-body");
            o = v.kendoTabStrip().data("kendoTabStrip");
            s = t.find("#btnMessagingTrash");
            h = t.find("#btnMessagingRestore");
            st = !0;
            kt();
            dt();
            siberia.newInternalMessage.init();
            oi();
            si();
            ii()
        }, ii = function() {
            s.hide();
            h.hide();
            t.find(".k-tabstrip-items").on("click", function() {
                var n = r.getCurrentMailList()
                  , t = n.find(".js-message-marked")
                  , i = t.length > 0;
                l(i)
            })
        }, l = function(n) {
            var t = r.getCurrentTabIndex();
            t === 0 || t === 1 ? (n ? s.show() : s.hide(),
            h.hide()) : n ? (s.show(),
            h.show()) : (s.hide(),
            h.hide())
        }, ri = function() {
            var n = r.getCurrentMailList();
            u.leftPanelScroll = n.scrollTop();
            u.rightPanelScroll = y.scrollTop()
        }, ui = function() {
            var t = r.getCurrentMailList();
            t.scrollTop() != u.leftPanelScroll && t.scrollTop(u.leftPanelScroll);
            y.scrollTop() != u.rightPanelScroll && y.scrollTop(u.rightPanelScroll);
            e && e != -1 && (n(o.items()[e]).click(),
            e = null);
            ei();
            tt(!1);
            it();
            hi();
            u.isOpened = !0
        }, fi = function() {
            t.find(".js-message-view-wrapper").html("");
            n("#btnMessagingReply").enable(!1);
            n("#btnMessagingReplyAll").enable(!1);
            n("#btnMessagingForward").enable(!1);
            i = null;
            siberia.cookies.removeCookie("CurrentMessageId");
            siberia.cookies.removeCookie("CurrentMessageIsSent")
        }, ei = function() {
            var n, r, t;
            i || (n = siberia.cookies.getCookie("CurrentMessageId"),
            r = siberia.cookies.getCookie("CurrentMessageIsSent").toLowerCase(),
            n != "" && n != 0 && (t = {
                MessageId: n,
                IsSent: r
            },
            i = t,
            yi(t)))
        }, oi = function() {
            s.click(ci);
            h.click(li);
            v.find(".js-messages-list").on("scroll", rt)
        }, si = function() {
            var n = t.find("#messages-inbox").data("kendoListView")
              , i = t.find("#messages-sent").data("kendoListView")
              , r = t.find("#messages-trash").data("kendoListView");
            f(n);
            f(i);
            f(r)
        }, f = function(n) {
            var t, i;
            n && (t = n.element.find(".js-message-wrapper"),
            t.unbind("click"),
            t.bind("click", yt),
            i = n.element.find("input:checkbox"),
            i.unbind("click"),
            i.bind("click", vt))
        }, ht = function() {
            if (u.canContinueInboxLoading) {
                var e = t.find("#messages-inbox").data("kendoListView");
                c(e, b, !1, !0, function(t, e) {
                    u.canContinueInboxLoading = t.HasMoreItems;
                    var o = e.items().length;
                    n(t.Items).each(function(n, t) {
                        t.SentDate = r.getDate(t.SentDate);
                        i && t.MessageId == i.MessageId && t.IsSent == i.IsSent && (t.Selected = !0);
                        e.dataSource.insert(o, t);
                        o++
                    });
                    f(e)
                })
            }
        }, ct = function() {
            if (u.canContinueSentLoading) {
                var e = t.find("#messages-sent").data("kendoListView");
                c(e, k, !1, !0, function(t, e) {
                    u.canContinueSentLoading = t.HasMoreItems;
                    var o = e.items().length;
                    n(t.Items).each(function(n, t) {
                        t.SentDate = r.getDate(t.SentDate);
                        i && t.MessageId == i.MessageId && t.IsSent == i.IsSent && (t.Selected = !0);
                        e.dataSource.insert(o, t);
                        o++
                    });
                    f(e)
                })
            }
        }, lt = function() {
            if (u.canContinueTrashLoading) {
                var e = t.find("#messages-trash").data("kendoListView");
                c(e, d, !1, !0, function(t, e) {
                    u.canContinueTrashLoading = t.HasMoreItems;
                    var o = e.items().length;
                    n(t.Items).each(function(n, t) {
                        t.SentDate = r.getDate(t.SentDate);
                        i && t.MessageId == i.MessageId && t.IsSent == i.IsSent && (t.Selected = !0);
                        e.dataSource.insert(o, t);
                        o++
                    });
                    f(e)
                })
            }
        }, tt = function(i) {
            var u = !i
              , e = t.find("#messages-inbox").data("kendoListView");
            c(e, b, !0, u, function(t, i) {
                n(n(t).get().reverse()).each(function(n, t) {
                    t.SentDate = r.getDate(t.SentDate);
                    i.dataSource.insert(0, t)
                });
                f(i)
            })
        }, it = function() {
            var i = t.find("#messages-sent").data("kendoListView");
            c(i, k, !0, !0, function(t, i) {
                n(n(t).get().reverse()).each(function(n, t) {
                    t.SentDate = r.getDate(t.SentDate);
                    i.dataSource.insert(0, t)
                });
                f(i)
            })
        }, hi = function() {
            var i = t.find("#messages-trash").data("kendoListView");
            c(i, d, !0, !0, function(t, i) {
                n(n(t).get().reverse()).each(function(n, t) {
                    t.SentDate = r.getDate(t.SentDate);
                    i.dataSource.insert(0, t)
                });
                f(i)
            })
        }, c = function(n, t, i, r, f) {
            i = i || !1;
            u.isBusy = !0;
            var e = function(n) {
                return i ? n.first() : n.last()
            }(n.items()).data("id")
              , o = {
                lastMessageId: e,
                returnNewerMessages: i
            };
            a(t, o, r, !1, function(t) {
                f(t, n);
                u.isBusy = !1;
                siberia.popup.center("#internal-messenger-popup")
            })
        }, rt = function() {
            var i;
            if (!u.isBusy) {
                var f = r.getCurrentMailList().scrollTop() + r.getCurrentMailList().height()
                  , e = n(this).data("kendoListView")
                  , t = e.items().last();
                if (t.length != 0 && (i = t.position().top,
                i + t.height() / 2 <= f))
                    switch (r.getCurrentTabIndex()) {
                    case 0:
                        ht();
                        break;
                    case 1:
                        ct();
                        break;
                    case 2:
                        lt()
                    }
            }
        }, ci = function() {
            g = nt.trash;
            r.getCurrentTabIndex() == 2 ? siberia.confirmationPopup.open("#confirmation-popup", gt, ni) : at()
        }, at = function() {
            var s = r.getCurrentMailList(), h = s.find(".js-messages-list"), i = h.data("kendoListView"), e = s.find(".js-message-marked"), c, o, v;
            e.length != 0 && (c = n.map(e.get(), function(t) {
                var r = i.dataSource.getByUid(n(t).data("uid"));
                return {
                    MessageId: r.get("MessageId"),
                    IsSent: r.get("IsSent")
                }
            }),
            e.each(function() {
                var r = n(this).data("uid")
                  , t = i.dataSource.getByUid(r);
                t.Selected && fi();
                i.dataSource.remove(t)
            }),
            l(!1),
            f(i),
            o = r.getCurrentTabIndex() == 2,
            v = o ? ot : ft,
            a(v, JSON.stringify(c), !0, !0, function(n) {
                if (!o) {
                    var i = t.find("#messages-trash").data("kendoListView");
                    ut(n, i, function() {
                        u.canContinueTrashLoading = !0;
                        lt()
                    });
                    f(i)
                }
            }),
            rt.call(h))
        }, ut = function(t, u, e) {
            var o = u.dataSource.data(), s;
            if (o.length == 0) {
                n(n(t).get().reverse()).each(function(n, t) {
                    t.SentDate = r.getDate(t.SentDate);
                    i && t.MessageId == i.MessageId && t.IsSent == i.IsSent && (t.Selected = !0);
                    u.dataSource.insert(0, t)
                });
                f(u);
                return
            }
            s = !1;
            n(t).each(function() {
                var f = r.getDate(this.SentDate), t, n, e;
                for (this.SentDate = f,
                i && this.MessageId == i.MessageId && this.IsSent == i.IsSent && (this.Selected = !0),
                t = -1,
                n = 0; n < o.length; n++)
                    if (e = o[n],
                    e.get("SentDate") <= f) {
                        t = n;
                        break
                    }
                t == -1 ? s = !0 : u.dataSource.insert(t, this)
            });
            s && e()
        }, li = function() {
            g = nt.restore;
            ai()
        }, ai = function() {
            var o = r.getCurrentMailList(), s = o.find(".js-messages-list"), i = s.data("kendoListView"), e = o.find(".js-message-marked"), h;
            e.length != 0 && (h = n.map(e.get(), function(t) {
                var r = i.dataSource.getByUid(n(t).data("uid"));
                return {
                    MessageId: r.get("MessageId"),
                    IsSent: r.get("IsSent")
                }
            }),
            e.each(function() {
                var t = n(this).data("uid")
                  , r = i.dataSource.getByUid(t);
                i.dataSource.remove(r)
            }),
            l(!1),
            f(i),
            a(et, JSON.stringify(h), !0, !0, function(i) {
                var r = [], e = [], o, s;
                n(i).each(function() {
                    this.IsSent ? e.unshift(this) : r.unshift(this)
                });
                r.length > 0 && (o = t.find("#messages-inbox").data("kendoListView"),
                ut(r, o, function() {
                    u.canContinueInboxLoading = !0;
                    ht()
                }),
                f(o));
                e.length > 0 && (s = t.find("#messages-sent").data("kendoListView"),
                ut(e, s, function() {
                    u.canContinueSentLoading = !0;
                    ct()
                }),
                f(s))
            }),
            rt.call(s))
        }, vt = function(t) {
            t.stopPropagation();
            var u = r.getCurrentListView(), f = n(this).parent().data("uid"), e = u.dataSource.getByUid(f), i;
            if (i = n(this).is(":checked") ? !0 : !1,
            e.set("Checked", i.toString()),
            i)
                l(!0);
            else {
                var o = r.getCurrentMailList()
                  , s = o.find(".js-message-marked")
                  , h = s.length > 0;
                l(h)
            }
            p(u, f)
        }, yt = function(t) {
            t.stopPropagation();
            var i = r.getCurrentListView();
            pt(this, i);
            vi(n(this), i)
        }, pt = function(t, i) {
            var u = n(t).data("uid"), f = v.find(".js-message-wrapper.selected-status"), e, r, o, s;
            if (f.length > 0) {
                if (e = f.parent().data("kendoListView"),
                r = f.data("uid"),
                r == u)
                    return;
                o = e.dataSource.getByUid(r);
                o.set("Selected", "false");
                p(e, r)
            }
            s = i.dataSource.getByUid(u);
            s.set("Selected", "true");
            p(i, u)
        }, vi = function(r, u) {
            var e = r.data("uid"), f = u.dataSource.getByUid(e), o;
            i && f.MessageId == i.MessageId && f.IsSent == i.IsSent || (o = {
                MessageId: r.data("id"),
                IsSent: r.data("is-sent")
            },
            a(w, o, !0, !1, function(o) {
                t.find(".js-message-view-wrapper").html(o);
                n("#btnMessagingReply").enable();
                n("#btnMessagingReplyAll").enable();
                n("#btnMessagingForward").enable();
                var s = n(".js-message-view");
                (s && (i = {
                    MessageId: r.data("id"),
                    IsSent: r.data("is-sent")
                }),
                f.IsRead) || (f.set("IsRead", "true"),
                p(u, e))
            }))
        }, yi = function(i) {
            a(w, i, !0, !1, function(r) {
                var u, f, o;
                t.find(".js-message-view-wrapper").html(r);
                n("#btnMessagingReply").enable();
                n("#btnMessagingReplyAll").enable();
                n("#btnMessagingForward").enable();
                u = t.find('.js-message-wrapper[data-id="' + i.MessageId + '"][data-is-sent="' + i.IsSent + '"]');
                f = u.parent(".js-messages-list");
                e = -1;
                switch (f.attr("id")) {
                case "messages-inbox":
                    e = 0;
                    break;
                case "messages-sent":
                    e = 1;
                    break;
                case "messages-trash":
                    e = 2;
                    break;
                default:
                    t.spinner(!1);
                    return
                }
                o = f.data("kendoListView");
                pt(u, o)
            })
        }, a = function(i, r, u, f, e) {
            u && t.spinner(!1);
            var o = {
                type: "POST",
                url: i,
                data: r,
                success: function(n) {
                    siberia.validation.processGridActionAjaxErrors(n.Errors, !0) && e && e(f ? n.Data : n)
                },
                error: function() {
                    siberia.validation.showGridNetworkError(!0)
                },
                complete: function() {
                    t.spinner(!1)
                }
            };
            f && (o.dataType = "json",
            o.contentType = "application/json; charset=utf-8");
            n.ajax(o)
        }, pi = function() {
            tt(!1);
            it()
        }, p = function(n, t) {
            var i = n.element.find('[data-uid="' + t + '"]'), r;
            i.on("click", yt);
            r = i.find("input:checkbox");
            r.on("click", vt)
        }, wi = function() {
            ri();
            u.isOpened = !1
        }, bi = function() {
            return u.isOpened
        };
        return {
            init: ti,
            getNew: tt,
            getCurrentMessageId: bt,
            getNewerSentMessages: it,
            isOpened: bi
        }
    }();
    n(document).ready(function() {
        siberia.internalMessaging.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.todoList");
    siberia.todoList = function() {
        function ci() {
            var t = n(".js-todo-grid-advanced-filter", i);
            if (!t.length || s.currentSortType != r.all)
                return null;
            var u = n("#ToDoList_FromUserId", t).data("kendoMultiSelect").value()
              , o = n("#ToDoList_RecipientIds", t).data("kendoMultiSelect").value()
              , h = n("#ToDoList_PatientIds", t).data("kendoMultiSelect").value()
              , f = n("#ToDoList_DueDateFrom", t).data("kendoDatePicker").value()
              , e = n("#ToDoList_DueDateTo", t).data("kendoDatePicker").value()
              , c = n("#ToDoList_ShowUrgentOnly", t).prop("checked");
            return {
                FromUserId: u && u.length ? u[0] : null,
                RecipientIds: o,
                PatientIds: h,
                DueDateFromString: f ? kendo.toString(f, siberia.config.formats.dateFormat) : null,
                DueDateToString: e ? kendo.toString(e, siberia.config.formats.dateFormat) : null,
                ShowUrgentOnly: c
            }
        }
        function li() {
            var t = n(".js-todo-grid-advanced-filter", i);
            t.length && (n("#ToDoList_FromUserId", t).data("kendoMultiSelect").value([]),
            n("#ToDoList_RecipientIds", t).data("kendoMultiSelect").value([]),
            n("#ToDoList_PatientIds", t).data("kendoMultiSelect").value([]),
            n("#ToDoList_ShowUrgentOnly", t).prop("checked", !1),
            n("#ToDoList_DueDateFrom", t).data("kendoDatePicker").value(""),
            n("#ToDoList_DueDateTo", t).data("kendoDatePicker").value(""))
        }
        function ai() {
            var t = n(".js-todo-grid-advanced-filter", i);
            if (t.length) {
                t.on("click", ".js-apply-filter", h);
                t.on("click", ".js-reset", li)
            }
        }
        function vi(t) {
            t.currentSortType == r.due ? n(".js-due-today-filter").show() : n(".js-due-today-filter").hide()
        }
        function yi(t) {
            var u = n("#todo-items-grid").data("kendoGrid");
            u.showColumn("OwnerUserFullName");
            u.showColumn("SentToList");
            u.showColumn("SentToListNumber");
            switch (t.currentSortType) {
            case r.due:
            case r.completed:
                u.hideColumn("SentToList");
                u.hideColumn("SentToListNumber");
                n(".js-todo-grid-advanced-filter", i).hide();
                break;
            case r.assigned:
                u.hideColumn("OwnerUserFullName");
                u.hideColumn("SentToListNumber");
                n(".js-todo-grid-advanced-filter", i).hide();
                break;
            case r.all:
                u.hideColumn("SentToList");
                n(".js-todo-grid-advanced-filter", i).show();
                siberia.popup.center(i)
            }
        }
        function ki() {
            siberia.popup.create(i, {
                openPopupBtn: ".js-todo-list-btn",
                windowOptions: {
                    title: text.global.titles.popupeTaskList,
                    width: 1100,
                    modal: !1
                }
            });
            tt.data("kendoWindow").bind("activate", nr);
            n("#todoFileUploader").length > 0 && n("#todoFileUploader").data("kendoUpload").bind("select", nu);
            n("#todo-items-grid").data("kendoGrid").bind("dataBound", function() {
                yi(s)
            })
        }
        function wt() {
            n(".js-todo-actions").on("click", dr)
        }
        function b(t, i) {
            n(t).on("click", function(t) {
                s.currentSortType = i;
                s.isTabChanged = !0;
                n(".js-todo-all-sort-button").removeClass("selected");
                n(".js-todo-open-sort-button").removeClass("selected");
                n(".js-todo-assigned-sort-button").removeClass("selected");
                n(".js-todo-completed-sort-button").removeClass("selected");
                n(t.currentTarget).addClass("selected");
                n(u).data("kendoGrid").dataSource.page(1)
            })
        }
        function di() {
            n("#js-popup-complete-and-submit").on("click", function() {
                var t = n("#ToDoItemReply_IsFinished");
                t.length > 0 && t.val("True")
            })
        }
        function gi() {
            b(".js-todo-all-sort-button", r.all);
            b(".js-todo-open-sort-button", r.due);
            b(".js-todo-assigned-sort-button", r.assigned);
            b(".js-todo-completed-sort-button", r.completed)
        }
        function nr() {
            s.isInit && h();
            s.isInit = !1
        }
        function tr(n, t) {
            et(null, function() {
                ir(n, t)
            }, null, null)
        }
        function ir(t, i) {
            var u, r;
            t.UserId && (u = n("#todo-item-popup [name$=ToIds]").data("kendoMultiSelect"),
            u.value(t.UserId));
            t.Id && (r = [],
            r.push({
                PatientId: t.Id,
                PatientFullName: t.FullName,
                HighlightedFullName: t.FullName,
                PatientDateOfBirth: t.DateOfBirth,
                HighlightedDateOfBirth: t.DateOfBirth,
                PatientNumber: t.PatientNumber,
                HighlightedPatientNumber: t.HighlightedPatientNumber,
                PatientIsInactive: t.PatientIsInactive
            }),
            siberia.multiSelect.attachValue("#todo-item-popup [name$=PatientId]", r, "PatientId", !0));
            n("#todo-item-popup [name$=Subject]").val(i)
        }
        function et(r, u, f, e) {
            var o = n(t).data("popupContentUrl");
            siberia.popup.create(t, {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addeTask,
                    width: "700",
                    actions: ["Minimize", "Close"]
                },
                preLoadOptions: {
                    showSpinnerForParentPopup: !1,
                    spinnerContainer: i,
                    dataUrl: o,
                    type: "POST",
                    dataType: "html",
                    data: {
                        etaskId: 0,
                        popuptype: nt.Create
                    },
                    preLoadSuccess: function(n) {
                        st(n, rr)
                    },
                    preLoadError: null,
                    preLoadComplete: function() {
                        l || (ht(t),
                        l = !0)
                    }
                },
                clear: function() {
                    var i = n(t).find("[name$=DueDateStr]").data("kendoDateTimePicker");
                    i.value(siberia.common.currentLocationDateTime());
                    i.trigger("change");
                    u && u()
                },
                success: function(n, t, i) {
                    f && f(n, t, i);
                    siberia.todoPatientCounters.refresh(!0)
                },
                close: function() {
                    e && e();
                    fr(t);
                    ot()
                }
            })
        }
        function ot() {
            n(t).html("")
        }
        function st(i, r) {
            n(t).html(i);
            siberia.popup.center(t);
            r && r()
        }
        function rr() {
            var r = n(t), i;
            ti(r);
            y = r.find("#ToDoItem_PatientId").data("kendoMultiSelect");
            y.bind("change", wr);
            ei = r.find("#ToDoItem_ToIds").data("kendoMultiSelect");
            oi = r.find("#ToDoItem_CcIds").data("kendoMultiSelect");
            i = r.find("#ToDoItem_DueDateStr").data("kendoDateTimePicker");
            i.bind("open", function(n) {
                n.view === "date" && i.bind("change", function() {
                    var n = i.value()
                      , t = n.getDate()
                      , r = n.getMonth()
                      , u = n.getFullYear()
                      , f = new Date(u,r,t);
                    i.value(f);
                    i.unbind("change")
                })
            });
            n("#todo-attach-file-button").click(g);
            n("#todo-attach-file-button-in-edit").click(g);
            siberia.validation.initValidationFor(n(t).find("form"), n(t).find(".js-validate"))
        }
        function ur(i) {
            et(i, null, function(t) {
                h();
                (t.Data[0].ToIds == null || n.inArray(w, t.Data[0].ToIds) >= 0) && ct(e.Add)
            }, function() {
                var i = n(t).data("kendoWindow");
                i.wrapper.toggleClass("minimized-popup", !1);
                h()
            })
        }
        function fr(t) {
            var i = n(t), u = i.find("#ToDoItem_PatientId").data("kendoMultiSelect"), r;
            u.unbind("change");
            r = i.find("#ToDoItem_DueDateStr").data("kendoDateTimePicker");
            r.unbind("change");
            r.unbind("open");
            lu(i)
        }
        function ht(t) {
            var f = n(i).data("kendoWindow"), o = f.wrapper, r = n(t).data("kendoWindow"), u = r.wrapper, s = u.width(), e;
            r.element.hide = function() {
                n(i).is(":visible") && (k = !0,
                f.close());
                u.height(0);
                u.width(90);
                r.options.modal = !1;
                n(".k-overlay").hide();
                var t = u.find(".k-header").outerHeight()
                  , e = n(window).width() - s - 2
                  , o = n(window).scrollTop() + n(window).height() - t;
                u.addClass("minimized-popup");
                u.css({
                    top: o,
                    left: e,
                    position: "fixed"
                })
            }
            ;
            e = r.restore;
            r.restore = function() {
                k && (k = !1,
                f.open());
                var t = u.css("z-index")
                  , i = n(".k-overlay");
                return i.length ? i.show().css("z-index", t - 1) : n('<div class="k-overlay" style="z-index: ' + (t - 1) + ';"><\/div>').insertBefore(n(r.wrapper)),
                o.css("z-index", t - 2),
                u.removeClass("minimized-popup"),
                r.options.modal = !0,
                e.call(r),
                this.center()
            }
        }
        function bt(n) {
            kt(n, null, function() {
                h();
                ut && ut()
            }, null)
        }
        function er() {
            n("#js-popup-complete-and-submit").off("click");
            n(".js-reply-button").off("click");
            n("#todo-attach-file-button").off("click");
            n("#todo-attach-file-button-in-edit").off("click")
        }
        function kt(r, u, f) {
            var e = n(t).data("popupContentUrl");
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.etaskReply,
                    width: "630",
                    actions: ["Minimize", "Close"]
                },
                preLoadOptions: {
                    showSpinnerForParentPopup: !1,
                    spinnerContainer: i,
                    dataUrl: e,
                    type: "POST",
                    dataType: "html",
                    data: {
                        etaskId: r.Id,
                        popuptype: nt.Edit
                    },
                    preLoadSuccess: function(n) {
                        st(n, or)
                    },
                    preLoadError: null,
                    preLoadComplete: function() {
                        l || (ht(t),
                        l = !0);
                        hr(r)
                    }
                },
                success: function(n, t, i) {
                    u && u(n, t, i);
                    siberia.todoPatientCounters.refresh(!0)
                },
                close: function() {
                    f && f();
                    er();
                    ot()
                }
            })
        }
        function or() {
            var r = n(t), i;
            ti(r);
            n("#todo-attach-file-button").on("click", g);
            n("#todo-attach-file-button-in-edit").on("click", g);
            i = n(t).find("#ToDoItemReply_DueDateStr").data("kendoDateTimePicker");
            i && i.bind("open", function(n) {
                n.view === "date" && i.bind("change", function() {
                    var n = i.value()
                      , t = n.getDate()
                      , r = n.getMonth()
                      , u = n.getFullYear()
                      , f = new Date(u,r,t);
                    i.value(f);
                    i.unbind("change")
                })
            });
            di();
            siberia.validation.initValidationFor(n(t).find("form"), n(t).find(".js-validate"))
        }
        function sr() {
            siberia.validation.clearValidationErrors(n(t).find("form"));
            n(t).text("")
        }
        function hr(i) {
            var u, f, r, e, s;
            w = parseInt(n(t + " [name$=CurrentUserId]").val(), 10);
            o = i.PatientId;
            rt = i.Id;
            it = i.QuickConsultUrl;
            n("#js-popup-complete-and-submit").toggle(!i.DisableFinish);
            u = n("#ToDoItemReply_ToIds").data("kendoMultiSelect");
            u && u.value(i.OwnerId);
            f = n("#ToDoItemReply_CcIds").data("kendoMultiSelect");
            f && f.value(n.grep(i.CcIds, function(n) {
                return n != i.OwnerId && n != w
            }).concat(n.grep(i.ToIds, function(n) {
                return n != i.OwnerId && n != w
            })));
            n("#ToDoEditPatientInfo").toggle(i.HasPatient);
            n("#ToDoItemReply_Subject").val(i.Subject);
            n("#ToDoItemReply_PatientDateOfBirth").val(i.PatientDateOfBirth);
            n("#ToDoItemReply_PatientMobilePhone").text(i.PatientMobilePhone);
            n(t + " .js-name-container").text(i.PatientFullName);
            n("#ToDoEditDemographicsLink").attr("href", i.DemographicsUrl);
            n("#ToDoEditQuickConsult").on("click", dt);
            n("#ToDoItemReply_Id").val(i.Id);
            r = n("#ToDoItemReply_DueDateStr");
            r.length > 0 && (r.data("kendoDateTimePicker").value(i.DueDateStr),
            r.trigger("change"));
            n("#ToDoItemReply_Notes").val("");
            e = n("#ToDoItemReply_IsUrgent");
            e.length > 0 && e.prop("checked", i.IsUrgent);
            n("#ToDoItemReply_FileId").val("");
            n("#ToDoItemReply_From").text(i.CurrentUserName);
            n("#ToDoItemReply_IsFinished").val(i.IsFininished ? "True" : "False");
            n("#ToDoEditQuickConsult").toggle(i.ShowQuickConsult);
            n(".js-attached-filename").text("");
            n(".js-reply-button").toggle(!i.IsFinished);
            s = i.PatientMobilePhone.length > 0;
            n(t + " .js-send-sms").toggle(s);
            d()
        }
        function cr(i) {
            w = n("#ToDoList_CurrentUserId").val();
            o = i.PatientId;
            rt = i.Id;
            it = i.QuickConsultUrl;
            n("#ToDoEditPatientInfo").toggle(i.HasPatient);
            n(t + " #ToDoItemView_Subject").text(i.Subject);
            n("#ToDoItemView_PatientDateOfBirth").val(i.PatientDateOfBirth);
            n("#ToDoItemView_PatientMobilePhone").text(i.PatientMobilePhone);
            n(t + " .js-name-container").text(i.PatientFullName);
            n("#ToDoEditDemographicsLink").attr("href", i.DemographicsUrl);
            n("#ToDoEditQuickConsult").on("click", dt);
            n("#ToDoItemView_Id").val(i.Id);
            n("#ToDoItemView_OwnerName").text(i.OwnerUserFullName);
            n("#ToDoItemView_IsFinished").val(i.IsFininished ? "True" : "False");
            n("#ToDoEditQuickConsult").toggle(i.ShowQuickConsult);
            var r = i.PatientMobilePhone.length > 0;
            n(t + " .js-send-view-sms").toggle(r);
            d()
        }
        function lr(t) {
            var i = n(u).data("kendoGrid")
              , r = i.dataItem(n(t.currentTarget).closest("tr"));
            ar(r, null)
        }
        function ar(r, u) {
            var f = n(t).data("popupContentUrl");
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.etaskView,
                    width: "630",
                    actions: ["Minimize", "Close"]
                },
                preLoadOptions: {
                    showSpinnerForParentPopup: !1,
                    spinnerContainer: i,
                    dataUrl: f,
                    type: "POST",
                    dataType: "html",
                    data: {
                        etaskId: r.Id,
                        popuptype: nt.View
                    },
                    preLoadSuccess: function(n) {
                        st(n, null)
                    },
                    preLoadError: null,
                    preLoadComplete: function() {
                        l || (ht(t),
                        l = !0);
                        cr(r)
                    }
                },
                success: null,
                close: function() {
                    u && u();
                    ot()
                }
            })
        }
        function dt(n) {
            n.preventDefault();
            gt(o, t, it)
        }
        function vr(t) {
            t.preventDefault();
            var r = p.dataItem(n(t.currentTarget).closest("tr"));
            gt(r.PatientId, i, r.QuickConsultUrl)
        }
        function gt(t, i, r) {
            n(i).spinner(!0);
            n.ajax({
                type: "POST",
                async: !1,
                url: r,
                contentType: "application/json",
                data: JSON.stringify({
                    patientId: t
                }),
                success: function(t) {
                    siberia.validation.processAjaxErrors(n(ft), t.Errors) && window.open(t.redirectUrl, "_blank");
                    n(i).spinner(!1)
                },
                error: function() {
                    n(i).spinner(!1)
                }
            })
        }
        function d() {
            n(t).spinner(!0);
            n("#history-section").remove();
            n(t + " .js-etask-history").html("");
            n.ajax({
                type: "POST",
                url: n(t).data("get-history-url"),
                contentType: "application/json",
                data: JSON.stringify({
                    itemId: rt
                }),
                success: function(i) {
                    n(t + " .js-etask-history").html(i);
                    n("#history-section").css("max-height", "calc(100vh - 590px)");
                    siberia.popup.center(t)
                }
            });
            n(t).spinner(!1)
        }
        function yr() {
            var t = n(u).data("kendoGrid").dataSource
              , i = t.data().length;
            t.sync().done(function() {
                i === t.data().length && ct(e.Delete)
            })
        }
        function h() {
            n(u).data("kendoGrid").dataSource.read();
            wt()
        }
        function pr(t) {
            var f = n(i).attr("data-finish-todo-url")
              , o = n(i).attr("data-unfinish-todo-url")
              , r = n(t.currentTarget).is(":checked")
              , u = p.dataItem(n(t.currentTarget).closest("tr"));
            n.ajax({
                type: "POST",
                url: r ? f : o,
                contentType: "application/json",
                data: JSON.stringify({
                    id: u.Id
                }),
                success: function(i) {
                    siberia.validation.processGridActionAjaxErrors(i.Errors, !0) ? (u.set("IsFinished", r),
                    h(),
                    ct(r ? e.Finish : e.Unfinish)) : n(t.currentTarget).prop("checked", !r)
                }
            })
        }
        function ct(n) {
            var t = 0;
            c.is(":hidden") || (t = parseInt(c.text()));
            switch (n) {
            case e.Add:
                t++;
                break;
            case e.Delete:
                t--;
                break;
            case e.Finish:
                t--;
                break;
            case e.Unfinish:
                t++
            }
            t > 0 ? (c.text(t),
            c.show()) : (c.text(0),
            c.hide());
            n !== e.Add && siberia.todoPatientCounters.refresh(!0)
        }
        function wr() {
            var t = y.value();
            t[0] ? (o = t[0],
            n.ajax({
                type: "POST",
                url: lt,
                data: {
                    patientId: o
                },
                success: function(n) {
                    n && n.Errors && siberia.validation.showFormValidationError(a.find("form"), n.Errors.PatientId.errors[0])
                }
            })) : (o = "",
            pi.hide(),
            wi.hide())
        }
        function br() {
            siberia.grid.initClientGrid({
                gridSelector: u,
                saveAndCloseSelector: null,
                saveSelector: null,
                addAction: ur,
                editAction: bt,
                deleteAction: yr
            });
            n(u).data("kendoGrid").element.on("click", ".js-view-etask", lr)
        }
        function kr() {
            n("#TodoAttachment_FileName").val("");
            n("#TodoAttachment_Description").val("")
        }
        function dr() {
            var t = n(i), r, u;
            t.spinner(!0);
            r = n(this).data("todo-action-id");
            u = n(this).data("todo-id");
            n.ajax({
                type: "POST",
                url: at,
                cache: !1,
                data: {
                    actionId: r,
                    itemId: u
                },
                success: function() {
                    h()
                },
                complete: function() {
                    t.spinner(!1)
                }
            })
        }
        function gr() {
            siberia.popup.create("#todo-upload-file-popup", {
                windowOptions: {
                    title: text.global.titles.popupAttachFile,
                    width: "400"
                },
                clear: function() {
                    siberia.upload.file.clearSelectedFile("todoFileUploader");
                    kr()
                },
                success: function(t) {
                    siberia.validation.processAjaxErrors(n("#todo-upload-file-form"), t.Errors) && (n("#ToDoItem_FileId").val(t),
                    n("#ToDoItemReply_FileId").val(t),
                    n(".js-attached-filename").text(n("#TodoAttachment_FileName").val()))
                }
            })
        }
        function nu(n) {
            siberia.upload.file.onFileSelected(n, "#TodoAttachment_FileName")
        }
        function tu(t) {
            if (t[0]) {
                var i = t[0];
                siberia.popup.create("#todo-items-for-patient-popup", {
                    windowOptions: {
                        title: text.global.titles.popupOpenedPatientEtasks(i.PatientFullName),
                        width: "800"
                    },
                    clear: function() {
                        n("#todo-items-for-patient-grid").data("kendoGrid").dataSource.read()
                    }
                })
            }
        }
        function iu(n) {
            n.preventDefault();
            ut = si;
            var t = y.value()
              , i = y.dataSource.data().filter(function(n) {
                return n.PatientId == t[0]
            });
            a.find(".js-popup-cancel").click();
            tu(i)
        }
        function ru(t) {
            t.preventDefault();
            var i = f.find("#ToDoItemReply_PatientName").text()
              , r = f.find("#ToDoItemReply_PatientDateOfBirth").val()
              , u = f.find("#ToDoItemReply_PatientIsInactive").val()
              , e = {
                patients: [{
                    PatientId: o,
                    PatientFullName: i,
                    HighlightedFullName: i,
                    PatientDateOfBirth: r,
                    HighlightedDateOfBirth: r,
                    PatientNumber: "",
                    HighlightedPatientNumber: "",
                    PatientIsInactive: u == "True"
                }]
            }
              , s = n(t.currentTarget).data("send-sms-url")
              , h = f.find("#ToDoItemReply_Id").val();
            siberia.sms.showPopup(e, s, function() {
                return {
                    todoId: h
                }
            }, !0, d)
        }
        function uu(t) {
            t.preventDefault();
            var i = f.find(".js-name-container").text()
              , r = f.find("#ToDoItemView_PatientDateOfBirth").val()
              , u = f.find("#ToDoItemView_PatientIsInactive").val()
              , e = {
                patients: [{
                    PatientId: o,
                    PatientFullName: i,
                    HighlightedFullName: i,
                    PatientDateOfBirth: r,
                    HighlightedDateOfBirth: r,
                    PatientNumber: "",
                    HighlightedPatientNumber: "",
                    PatientIsInactive: u == "True"
                }]
            }
              , s = n(t.currentTarget).data("send-sms-url")
              , h = f.find("#ToDoItemView_Id").val();
            siberia.sms.showPopup(e, s, function() {
                return {
                    todoId: h
                }
            }, !0, d)
        }
        function fu(t) {
            var f, u, i, r, e;
            for (t.preventDefault(),
            f = n(t.currentTarget).data("item-id"),
            u = p.dataSource.data(),
            r = 0; r < u.length; r++)
                if (u[r].Id === f) {
                    i = u[r];
                    break
                }
            i && (e = {
                patients: [{
                    PatientId: i.PatientId,
                    PatientFullName: i.PatientFullName,
                    HighlightedFullName: i.PatientFullName,
                    PatientDateOfBirth: i.PatientDateOfBirth,
                    HighlightedDateOfBirth: i.PatientDateOfBirth,
                    PatientNumber: "",
                    HighlightedPatientNumber: "",
                    PatientIsInactive: i.PatientIsInactive
                }]
            },
            siberia.sms.showPopup(e, vt, function() {
                return {
                    todoId: f
                }
            }, !0))
        }
        function eu(n) {
            siberia.popup.close("#todo-items-for-patient-popup");
            bt(n)
        }
        function ou(t) {
            var i = n(t).data("kendoWindow"), r;
            return i && (r = n(i.wrapper).is(":visible"),
            r) ? !0 : !1
        }
        function g(t) {
            t.preventDefault();
            n(this).blur();
            gr()
        }
        function su(t) {
            var r = t.sender.element.data("exceptValueOf")
              , u = n("select" + r).map(function(t, i) {
                return n(i).data("kendoMultiSelect").value()
            })
              , f = u.map(function(n, t) {
                return t
            })
              , e = n.unique(f)
              , i = [];
            n(e).each(function(n, t) {
                i.push({
                    field: "Id",
                    operator: "neq",
                    value: t
                })
            });
            t.sender.dataSource.filter(i)
        }
        function hu(n) {
            n.sender.dataSource.filter([])
        }
        function ni(n) {
            n && n.data("kendoMultiSelect") != null && (n.data("kendoMultiSelect").bind("open", su),
            n.data("kendoMultiSelect").bind("close", hu))
        }
        function cu() {
            return siberia.popup.restoreIfActive(yt) || siberia.popup.restoreIfActive(ft)
        }
        function ti(n) {
            var t = n.find("[name$=ToIds]")
              , i = n.find("[name$=CcIds]");
            ni(t);
            ni(i)
        }
        function lu(n) {
            var t = n.find("[name$=ToIds]")
              , i = n.find("[name$=CcIds]");
            ii(t);
            ii(i)
        }
        function ii(n) {
            n && n.data("kendoMultiSelect") != null && (n.data("kendoMultiSelect").unbind("open"),
            n.data("kendoMultiSelect").unbind("close"))
        }
        function ui(t) {
            var i = n(t).data("kendoWindow"), r, u;
            return i && (r = i.element.height(),
            u = n(i.wrapper).is(":visible"),
            u && r === 0) ? !0 : !1
        }
        function au() {
            return ui(ft) || ui(yt)
        }
        var e = {
            Add: 0,
            Delete: 1,
            Finish: 2,
            Unfinish: 3
        }, r = {
            due: 0,
            assigned: 1,
            completed: 2,
            all: 3
        }, nt = {
            Create: 0,
            Edit: 1,
            View: 2
        }, tt, a, f, fi, y, ei, oi, p, o, w, it, rt, si, ut, s = {
            isInit: !0,
            currentSortType: r.due
        }, c, lt, at, vt, t = "#todo-item-popup", ft = "#todo-item-edit-popup", yt = "#todo-item-create-popup", i = "#todo-items-popup", u = "#todo-items-grid", v = n(i).find("[name$=FilterOnlyDueToday]"), hi = n(i).data("saveDueFilterState"), pt, l, k, ri;
        v.on("click", function() {
            n.ajax({
                type: "POST",
                async: !1,
                url: hi,
                contentType: "application/json",
                data: JSON.stringify({
                    filterOnlyDueToday: v.prop("checked")
                }),
                success: function() {},
                error: function() {
                    siberia.showErrorNotification(text.global.status.networkError)
                }
            });
            v.val(v.prop("checked"));
            h()
        });
        pt = function() {
            return vi(s),
            {
                advancedFilter: ci(),
                sortType: s.currentSortType,
                showOnlyDueToDayTasks: s.currentSortType == r.due && v.length > 0 && v.prop("checked")
            }
        }
        ;
        var pi = siberia.validation.ValidationSummary.getInstance(t)
          , wi = siberia.validation.ValidationSummary.getInstance(t)
          , bi = function() {
            return {
                patientId: o
            }
        };
        return l = !1,
        k = !1,
        ri = function() {
            if (tt = n(i),
            a = n(t),
            f = n(t),
            fi = n("#todo-items-for-patient-popup"),
            c = n("#unfinishedToDosIndicator"),
            p = n(u).data("kendoGrid"),
            lt = a.data("check-existing-patient-todos-url"),
            at = a.data("set-action-url"),
            vt = tt.data("send-sms-url"),
            p) {
                ki();
                br();
                gi();
                ai();
                n(u).data("kendoGrid").bind("dataBound", function() {
                    wt()
                });
                siberia.common.addUnloadRule(function() {
                    return ou(t) ? !1 : !0
                }, null);
                n(i).data("kendoWindow").bind("open");
                n(u).on("click", ".js-todo-finish", pr);
                n(u).on("click", ".js-open-quick-consult", vr);
                n(u).on("click", ".js-focusout-helper", function(n) {
                    n.currentTarget.blur()
                });
                a.on("click", "#show-patient-todos-list", iu);
                n(u).on("click", ".js-send-sms", fu);
                f.on("click", ".js-send-sms", ru);
                f.on("click", ".js-send-view-sms", uu);
                siberia.grid.initClientGrid({
                    gridSelector: "#todo-items-for-patient-grid",
                    editAction: eu
                })
            }
        }
        ,
        {
            init: ri,
            onCurrentSortTypeData: pt,
            addToDoForPatient: tr,
            onCurrentPatientData: bi,
            clearPopup: sr,
            addItemHandler: et,
            editItemHandler: kt,
            restorePopup: cu,
            isOpenAndMinimized: au
        }
    }();
    n(document).ready(function() {
        siberia.todoList.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.todoPatientCounters");
    siberia.todoPatientCounters = function() {
        function r(n) {
            n && n.OutstandingToDoCount ? (t.text(n.OutstandingToDoCount),
            t.show()) : t.hide()
        }
        function i(n) {
            return siberia.constants.localStoragePatientCountersKey + n
        }
        function f(n) {
            return siberia.localStorage.getJSON(i(n), {})
        }
        function h(n, t) {
            var u = f(t);
            u.data = n;
            u.date = (new Date).valueOf();
            siberia.localStorage.setJSON(i(t), u);
            n && r(n)
        }
        function c(n, t) {
            return Math.floor((n - t) / 1e3)
        }
        function e() {
            return t.data("patient-id")
        }
        function o(t) {
            if (u() && !siberia.partialLogout.suspendRequests()) {
                var s = e()
                  , l = (new Date).valueOf()
                  , o = f(s);
                t === !0 || !o.date || !o.data || c(l, o.date) >= siberia.config.localStorageCountersExpirationInSeconds ? (o.date = l,
                siberia.localStorage.setJSON(i(s), o),
                n.ajax({
                    type: "GET",
                    url: siberia.config.urls.getOutstandingToDoItemsCount() + "?patientId=" + s,
                    success: function(n) {
                        h(n, s)
                    }
                })) : r(o.data)
            }
        }
        function u() {
            return t || (t = n(s)),
            t.length
        }
        function l() {
            if (u()) {
                var n = e();
                siberia.localStorage.registerKeyChanges(i(n), function(n) {
                    var t = n.newValue && JSON.parse(n.newValue);
                    t && t.data && r(t.data)
                });
                o()
            }
        }
        var s = ".js-outstanding-patient-todo-counter"
          , t = null;
        return {
            init: l,
            exist: u,
            refresh: o
        }
    }();
    n(document).ready(function() {
        siberia.todoPatientCounters.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.intervals");
    siberia.intervals = function() {
        var u = function() {
            return (document.hidden ? siberia.config.refreshCountersInactiveIntervalInSeconds : siberia.config.refreshCountersIntervalInSeconds) * 1e3
        }
          , i = null
          , t = function() {
            i = setTimeout(r, u())
        }
          , r = function() {
            siberia.internalMessaging && siberia.internalMessaging.isOpened() && siberia.internalMessaging.getNew(!0);
            siberia.counters && siberia.counters.refresh();
            siberia.todoPatientCounters && siberia.todoPatientCounters.exist() && siberia.todoPatientCounters.refresh();
            t()
        }
          , f = function() {
            if (n(".js-mail-btn").length > 0 || n("#menu-panelbar").length > 0 || n("#newNotificationsIndicator").length > 0 || siberia.todoPatientCounters && siberia.todoPatientCounters.exist()) {
                t();
                n(document).on("visibilitychange", function(n) {
                    clearTimeout(i);
                    n.target.hidden ? t() : r()
                })
            }
        };
        return {
            init: f
        }
    }();
    n(document).ready(function() {
        siberia.intervals.init()
    })
}(jQuery),
function(n) {
    function r() {
        t = n("#exception-bulkbillclaim-list-grid").data("kendoGrid");
        n("#exception-bulkbillclaim-list-grid").on("click", ".js-client-grid-view", u);
        i = n("#finalised-bulkbillclaim-list-grid").data("kendoGrid");
        n("#finalised-bulkbillclaim-list-grid").on("click", ".js-client-grid-view", f)
    }
    function u(i) {
        var r = n(i.currentTarget).closest("tr")
          , u = t.dataItem(r);
        siberia.popup.create("#claim-exception-popup", {
            submitText: text.global.labels.update,
            windowOptions: {
                title: text.global.titles.popupClaimViewExceptions,
                width: "600"
            },
            ajax: {
                enabled: !1
            },
            clear: function() {
                n("#claim-exceptions-info").val(u.ExceptionsXml)
            },
            success: function() {}
        })
    }
    function f(t) {
        var r = n(t.currentTarget).closest("tr")
          , u = i.dataItem(r).Id
          , f = n("#finalized-container").data("report-url")
          , e = kendo.format(f, u);
        window.open(e)
    }
    var t, i;
    n(document).ready(function() {
        r()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.finalizedReport");
    var i = "#FinalizedReportInvoices"
      , t = "#FinalizedReportInvoices";
    siberia.finalizedReport = function() {
        function r() {
            n(i) && n(i).length != 0 && (u(),
            n(t).data("kendoGrid").bind("detailInit", function(n) {
                f(n)
            }))
        }
        function u() {
            var r = n("#FinalizedReport").data("finalized-report"), u;
            r && (u = n(i).data("kendoGrid"),
            u.dataSource.data([]),
            n(t).spinner(!0),
            n.ajax({
                type: "POST",
                url: r,
                contentType: "application/json",
                success: function(i) {
                    n(t).spinner(!1);
                    e(i.Data)
                },
                error: function() {
                    n(t).spinner(!1)
                }
            }))
        }
        function f(t) {
            var r = n(t.detailRow).find('div[data-role="grid"]').data("kendoGrid")
              , i = [];
            n(t.data.Items).each(function() {
                i.push({
                    ItemId: this.ItemId,
                    InvoiceId: this.InvoiceId,
                    ItemNumber: this.ItemNumber,
                    TotalString: this.TotalString,
                    MedicarePaidString: this.MedicarePaidString
                })
            });
            r.dataSource.data(i)
        }
        function e(i) {
            if (i && i.length > 0) {
                var u = n(t).data("kendoGrid")
                  , f = 0
                  , e = 0
                  , r = [];
                n(i).each(function() {
                    this.Items && this.Items.length > 0 && (r.push({
                        InvoiceId: this.InvoiceId,
                        InvoiceNumber: this.InvoiceNumber,
                        PatientFullName: this.PatientFullName,
                        InvoiceDate: this.InvoiceDate,
                        Items: this.Items
                    }),
                    n(this.Items).each(function() {
                        f += 1;
                        e += this.TotalFee
                    }))
                });
                n(t).data("kendoGrid").dataSource.data(r);
                o(u);
                n(t).show()
            }
        }
        function o(n) {
            n.expandRow(n.tbody.find("tr.k-master-row"))
        }
        return {
            init: r
        }
    }();
    n(document).ready(function() {
        siberia.finalizedReport.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.feeEstimateHistory");
    siberia.feeEstimateHistory = function() {
        function u() {
            n(i).length !== 0 && (siberia.grid.initClientGrid({
                gridSelector: i,
                customDelete: f,
                confirmText: ""
            }),
            t.find(".js-popup-unlink").click(o))
        }
        function f(i, r) {
            var u = t.data("linked-appointments-url")
              , f = t.data("patient-id");
            n("body").spinner(!0);
            n.ajax({
                type: "POST",
                url: u,
                contentType: "application/json",
                data: JSON.stringify({
                    PatientId: f,
                    FeeEstimateId: i.QuoteId
                }),
                success: function(u) {
                    if (n("body").spinner(!1),
                    u.Total > 0) {
                        var f = t.find(".js-popup-unlink");
                        f.data("fee-estimate-id", i.QuoteId);
                        f.data("fee-estimate-name", i.QuoteName);
                        e(u)
                    } else
                        confirm(text.global.confirms.deleteItemGeneric) && (r.remove(i),
                        r.sync())
                },
                error: function() {
                    siberia.notification.showErrorNotification(text.global.status.ajaxError)
                },
                complete: function() {
                    n("body").spinner(!1)
                }
            })
        }
        function e(t) {
            var i = kendo.template(n("#LinkedAppointmentsTemplate").html());
            n("#linked-appointments-container").html(i(t));
            siberia.popup.create(r, {
                windowOptions: {
                    title: text.global.labels.warning,
                    width: "450"
                }
            })
        }
        function o() {
            var i = t.data("unlink-appointments-url")
              , r = t.data("patient-id")
              , u = n(this).data("fee-estimate-id")
              , f = n(this).data("fee-estimate-name");
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                data: JSON.stringify({
                    PatientId: r,
                    FeeEstimateId: u
                }),
                success: function() {
                    siberia.notification.showSuccessNotification(text.global.status.feeEstimateUnlinked(f))
                },
                error: function() {
                    siberia.notification.showErrorNotification(text.global.status.ajaxError)
                }
            });
            t.find(".js-popup-cancel").click()
        }
        var i = "#fee-estimate-history-grid"
          , r = "#fee-estimate-history-warning-popup"
          , t = n(r);
        return {
            init: u
        }
    }();
    n(document).ready(function() {
        siberia.feeEstimateHistory.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.feeEstimate");
    siberia.feeEstimate = function() {
        function tt() {
            var t = n(".js-fee-estimate-container");
            if (ti(),
            t.length !== 0) {
                w = n("#QuoteId").val();
                t.on("click", "#btnQuoteSaveAndClose", function(t) {
                    c = !0;
                    var i = n("#fee-estimate-container").data("fee-estimate-save-and-close");
                    e(i, t, this, function(t) {
                        n("#IsNew").attr("value", !1);
                        t.Notifications && window.localStorage.setItem(siberia.config.constant.notificationsLocalStorageItem, JSON.stringify(t.Notifications));
                        window.location.href = t.RedirectUrl
                    })
                });
                t.on("click", "#btnQuoteSave.js-client-grid-save", function(t) {
                    var i = n("#fee-estimate-container").data("fee-estimate-save-url");
                    e(i, t, this, function(t) {
                        n(".js-fee-estimate-container").html(t);
                        f();
                        d()
                    })
                });
                t.on("click", "#quoteSaveAndPrint", function(t) {
                    var i = n("#fee-estimate-container").data("fee-estimate-save-url")
                      , r = window.open("about:blank", "_blank");
                    e(i, t, this, function(t) {
                        n(".js-fee-estimate-container").html(t);
                        f();
                        d();
                        var i = n("#fee-estimate-container").data("fee-estimate-print-view-url");
                        r.location.href = kendo.format(i, n("#QuoteId").val())
                    })
                });
                f();
                fi()
            }
        }
        function v() {
            n(u).data("kendoMultiSelect").dataSource.read()
        }
        function it() {
            var t = [];
            n(a).each(function() {
                var i = n(this).find("#Checklist_Id").val()
                  , r = n(this).find("#Checklist_NotifyMeId").val()
                  , u = siberia.checklistTemplate.collectChecklistControls(n(this).find(".js-checklist-item"));
                t.push({
                    Id: i,
                    NotifyMeId: r,
                    Name: n(this).attr("name"),
                    Items: u
                })
            });
            n("#ChecklistsSerialized").val(JSON.stringify(t))
        }
        function rt(t) {
            confirm(text.global.confirms.deleteChecklist) && n(t.currentTarget).closest(a).remove()
        }
        function b() {
            var t = n(u).data("kendoMultiSelect");
            t.value().length < 1 ? n(l).addClass("btn-disabled") : n(l).removeClass("btn-disabled")
        }
        function ut(t) {
            t.preventDefault();
            var i = n(t.target).closest("div.js-checklist-container");
            siberia.checklistTemplate.addChecklistItem(i, !0)
        }
        function ft(t) {
            var r = n(u).data("kendoMultiSelect").dataItems(), i;
            r.length <= 0 || (t.preventDefault(),
            n(t.currentTarget).blur(),
            i = n(".js-global-spinner-container"),
            i.spinner(!0),
            n.ajax({
                type: "POST",
                url: n("#ChecklistTemplates").data("get-checklist-url"),
                contentType: "application/json",
                data: JSON.stringify({
                    checklistCount: s,
                    model: r[0]
                }),
                success: function(t) {
                    s++;
                    var i = n("#checklist-list-view");
                    i.append(t);
                    siberia.multiSelect.clearValue(u);
                    b()
                },
                complete: function() {
                    i.spinner(!1)
                }
            }))
        }
        function et() {
            siberia.favorites.init("#fee-estimate-form", {
                saveFavoriteUrl: n("#fee-estimate-form .js-save-favorite").data("save-favorite-url"),
                getFavoriteDataAction: function() {
                    return {
                        BillingAccountTypeId: n("#QuoteAccountTypeId").val(),
                        MprTypeId: siberia.invoiceFeeEstimateCommon.getMprTypeId(h),
                        IsMprForPrivateFeesApplied: n("#IsMprForPrivateFeesApplied").prop("checked"),
                        IsMprForSafetyNetApplied: n("#IsMprForSafetyNetApplied").prop("checked"),
                        LocationId: i("#LocationId", "DropDownList"),
                        ExpirationMonths: i("#ExpirationMonths", "DropDownList"),
                        ProcedureDuration: i("#ProcedureDuration", "NumericTextBox"),
                        ProcedureTypeIds: t("#ProcedureTypeIds"),
                        AssistantId: t("#AssistantId"),
                        AnaesthetistId: t("#AnaesthetistId"),
                        AssistantAnaesthetistId: t("#AssistantAnaesthetistId"),
                        OthersInvolvedIds: t("#OthersInvolvedIds"),
                        AnaestheticTypeId: i("#AnaestheticTypeId", "DropDownList"),
                        IntroductionText: n("#IntroductionText").val(),
                        NotesText: n("#NotesText").val(),
                        PatientNotes: n("#PatientNotes").val(),
                        KnownGapAmount: i("#KnownGapAmount", "NumericTextBox"),
                        FastingRequirements: ot(),
                        Equipment: st(),
                        SelectedAllergies: ht(),
                        Items: h.dataSource.data()
                    }
                },
                loadFavoriteAction: function(t) {
                    if (t && t[0]) {
                        var i = n("#FavoriteId").attr("data-load-favorite-url");
                        e(i, null, null, function(i) {
                            n(".js-fee-estimate-container").html(i);
                            f();
                            n("#FavoriteId").data("kendoMultiSelect").value(t);
                            n("#fee-estimate-form .js-delete-favorite").removeClass("btn-disabled")
                        })
                    }
                }
            })
        }
        function ot() {
            var i = n("#FastingRequirements"), t;
            return i.length ? (t = i.val(),
            t ? t : null) : null
        }
        function st() {
            var i = n("#Equipment"), t;
            return i.length ? (t = i.val(),
            t ? t : null) : null
        }
        function ht() {
            var t = n("#SelectedAllergies");
            return t.length ? t.data("kendoMultiSelect").value() : null
        }
        function i(t, i) {
            var r = n(t).data("kendo" + i);
            return r ? r.value() : null
        }
        function t(t) {
            var i = n(t).data("kendoMultiSelect"), r, u;
            return i ? (r = i.value(),
            u = i.options.maxSelectedItems,
            u == null || u > 1 ? r : r[0]) : null
        }
        function ct() {
            n(".js-fee-estimate-assistant-new").click(function() {
                siberia.rightSidePanel.setPanelsZIndex();
                n(window).trigger("rc-open-create-contact-panel", [undefined, function(n) {
                    siberia.rightSidePanel.resetPanelsZIndex();
                    vt(n)
                }
                , !0, !1])
            });
            n(".js-fee-estimate-anaesthetist-new").click(function() {
                siberia.rightSidePanel.setPanelsZIndex();
                n(window).trigger("rc-open-create-contact-panel", [undefined, function(n) {
                    siberia.rightSidePanel.resetPanelsZIndex();
                    yt(n)
                }
                , !0, !1])
            });
            n(".js-fee-estimate-assistant-anaesthetist-new").click(function() {
                siberia.rightSidePanel.setPanelsZIndex();
                n(window).trigger("rc-open-create-contact-panel", [undefined, function(n) {
                    siberia.rightSidePanel.resetPanelsZIndex();
                    pt(n)
                }
                , !0, !1])
            });
            n(".js-add-fee-estimate-others-involved").click(function() {
                siberia.rightSidePanel.setPanelsZIndex();
                n(window).trigger("rc-open-create-contact-panel", [undefined, function(n) {
                    siberia.rightSidePanel.resetPanelsZIndex();
                    wt(n)
                }
                , !0, !1])
            })
        }
        function lt(t) {
            t.preventDefault();
            var u = n(this).attr("action")
              , i = n(this).attr("field-id")
              , r = n(this).attr("hidden-id");
            u === "edit" ? siberia.feeEstimateTextAreaPopup.edit({
                fieldId: i,
                hiddenId: r
            }) : siberia.feeEstimateTextAreaPopup.create({
                quoteId: w,
                fieldId: i,
                hiddenId: r
            })
        }
        function at() {
            n(".js-fee-estimate-template-popup").click(lt)
        }
        function vt(n) {
            var t = siberia.contact.convertContactForCommonSearch(n);
            siberia.multiSelect.attachValue("#AssistantId", [t], "Id")
        }
        function yt(n) {
            var t = siberia.contact.convertContactForCommonSearch(n);
            siberia.multiSelect.attachValue("#AnaesthetistId", [t], "Id")
        }
        function pt(n) {
            var t = siberia.contact.convertContactForCommonSearch(n);
            siberia.multiSelect.attachValue("#AssistantAnaesthetistId", [t], "Id")
        }
        function wt(t) {
            var i = siberia.contact.convertContactForCommonSearch(t)
              , r = n("#OthersInvolvedIds").data("kendoMultiSelect");
            siberia.multiSelect.appendOrAttach(r, [i], "Id")
        }
        function bt(t, i, r) {
            var u = n(".js-new-fee-estimate-popup-content").data("fee-estimate-for-appointment-popup-url")
              , f = kendo.format(u, t);
            return y(f, i, r)
        }
        function kt(t, i, r) {
            var u = n(".js-new-fee-estimate-popup-content").data("fee-estimate-for-patient-popup-url")
              , f = kendo.format(u, t);
            return y(f, i, r)
        }
        function dt(t, i, r) {
            var u = n(".js-new-fee-estimate-popup-content").data("fee-estimate-for-consult-popup-url")
              , f = kendo.format(u, t);
            return y(f, i, r)
        }
        function y(t, i, r) {
            return n.Deferred(function(u) {
                var f, e = function() {
                    f && (f.close(),
                    f = null)
                };
                siberia.popup.create("#NewFeeEstimateEmptyPopup", {
                    windowOptions: {
                        title: text.global.titles.addProcedureFeeEstimate,
                        width: "600"
                    },
                    preLoadOptions: {
                        dataType: "",
                        dataUrl: t,
                        preLoadSuccess: function(n) {
                            return n.Errors ? (siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)),
                            !1) : (ni(n, r),
                            !0)
                        }
                    },
                    preSubmit: function() {
                        i === !0 && (f = window.open("about:blank", "_blank"))
                    },
                    success: function(n) {
                        ii(n, f);
                        u.resolve(n)
                    },
                    close: function() {
                        n("#NewFeeEstimateEmptyPopup .js-new-fee-estimate-popup-content").html("");
                        n("#NewFeeEstimateEmptyPopup .js-popup-cancel").hide();
                        n("#NewFeeEstimateEmptyPopup .js-save-fee-estimate-settings").hide()
                    },
                    ajaxError: function() {
                        e()
                    },
                    error: function() {
                        e()
                    },
                    extraData: function() {
                        var t = n("#NewFeeEstimateEmptyPopup #ProcedureTypeIds").data("kendoMultiSelect")
                          , i = t && t.value()
                          , r = n("#NewFeeEstimateEmptyPopup #PartnerSettings_ProcedureTypeIds").data("kendoMultiSelect")
                          , u = r && r.value();
                        return {
                            SortedProcedureTypeIds: i ? i.toString() : null,
                            "PartnerSettings.SortedProcedureTypeIds": u ? u.toString() : null
                        }
                    }
                })
            })
        }
        function gt() {
            var t, r = " (add new)", u = "_c_", i = n("#SelectedAllergies").data("kendoMultiSelect");
            i != null && (i._retrieveData = !1,
            i.bind("dataBound", function() {
                if ((t || this._prev) && t != this._prev) {
                    t = this._prev;
                    t = t.replace("'", " ");
                    var i = !1;
                    n.each(this.dataSource.data(), function(n, u) {
                        return u.AllergenName == t || u.AllergenName == t + r ? (i = !0,
                        !1) : !0
                    });
                    n.each(this.value(), function(n, r) {
                        return r == t ? (i = !0,
                        !1) : !0
                    });
                    i || (this.dataSource.add({
                        IsCustomItem: !0,
                        AllergenName: t + r,
                        AllergenKey: u + t,
                        AllergenType: "custom-allergen",
                        FastTrackType: null
                    }),
                    this.open());
                    t = null
                }
            }));
            siberia.multiSelect.fixServerFiltering("#SelectedAllergies", "AllergenName")
        }
        function ni(t, i) {
            if (n("#NewFeeEstimateEmptyPopup .js-new-fee-estimate-popup-content").html(t),
            n("#NewFeeEstimateEmptyPopup .js-popup-cancel").show(),
            n("#NewFeeEstimateEmptyPopup .js-save-fee-estimate-settings").show(),
            siberia.invoiceFeeEstimateCommon.initNinetyDayGapToggle(n("#NewFeeEstimateEmptyPopup #MainPatientSettings")),
            siberia.invoiceFeeEstimateCommon.initNinetyDayGapToggle(n("#NewFeeEstimateEmptyPopup #PartnerSettings")),
            siberia.invoiceFeeEstimateCommon.initDisableOutPatientModeForEclipse(n("#NewFeeEstimateEmptyPopup #MainPatientSettings")),
            siberia.invoiceFeeEstimateCommon.initDisableOutPatientModeForEclipse(n("#NewFeeEstimateEmptyPopup #PartnerSettings"), "PartnerSettings"),
            siberia.form.initHandleEnterForForm(n("#NewFeeEstimateEmptyPopup form")),
            i) {
                var r = n('[id$="ProcedureTypeIds"]', "#NewFeeEstimateEmptyPopup").data("kendoMultiSelect");
                r && r.value(i)
            }
            p();
            n('#NewFeeEstimateEmptyPopup input[type="radio"]').on("change", function() {
                p()
            })
        }
        function p() {
            n(r + " input.js-workcover-billing:checked").length > 0 ? n(r + " #fee-estimate-workcover-options").show() : n(r + " #fee-estimate-workcover-options").hide()
        }
        function ti() {
            n("#NewFeeEstimateEmptyPopup").on("click", "input[type=radio][name=IsMainPatient]", function() {
                n(this).val() === "True" ? (n(".js-new-fee-estimate-popup-content #PartnerSettings").hide(),
                n(".js-new-fee-estimate-popup-content #MainPatientSettings").show(),
                r = "#NewFeeEstimateEmptyPopup #MainPatientSettings") : (n(".js-new-fee-estimate-popup-content #MainPatientSettings").hide(),
                n(".js-new-fee-estimate-popup-content #PartnerSettings").show(),
                r = "#NewInvoiceEmptyPopup #PartnerSettings");
                p()
            })
        }
        function ii(t, i) {
            var u = n(".js-fee-estimate-settings").data("fee-estimate-edit-settings-url")
              , r = kendo.format(u, t);
            i ? i.location.href = r : window.location.href = r
        }
        function o(t) {
            var i = n("#fee-estimate-container").data("fee-estimate-refresh-url");
            e(i, null, null, function(i) {
                n(".js-fee-estimate-container").html(i);
                f();
                t && typeof t == "function" && t()
            })
        }
        function f() {
            h = n("#items-grid").data("kendoGrid");
            siberia.invoiceFeeEstimateCommon.initReferralEvents(n("#ReferralId"));
            siberia.invoiceFeeEstimateCommon.initGridEvents("#items-grid", o);
            itemsAutosuggest(!0, {
                refreshAction: o
            });
            var t = n(".js-fee-estimate-container").find("#LocationId").data("kendoDropDownList");
            t && t.bind("change", function() {
                var t = this.value();
                n("#items-grid").parent(".js-items-grid-container").find(".js-current-location-id").val(t);
                o()
            });
            siberia.multiSelect.setInitialValues();
            ct();
            at();
            et();
            ui();
            ri();
            gt()
        }
        function ri() {
            n(u).on("change", b);
            n(l).on("click", ft);
            n("#checklist-list-view").on("click", ".js-add-checklist-item", ut);
            n("#checklist-list-view").on("click", g, rt);
            n("#ProcedureTypeIds").on("change", v);
            n("#DuplicateProcedureTypes").on("change", v);
            n("#LocationId").on("change", v);
            n("#QuoteTabs").data("kendoTabStrip").bind("activate", function(t) {
                var i = n(nt);
                i.length > 0 && t.contentElement.id === "QuoteTabs-3" ? i.hide() : i.show()
            });
            s = n(a).length
        }
        function ui() {
            var t = n("#ProcedureTypeIds").data("kendoMultiSelect")
              , i = n("#DuplicateProcedureTypes").data("kendoMultiSelect");
            t && i && (k(t, i),
            k(i, t))
        }
        function k(n, t) {
            n.bind("change", function(i) {
                i.isDuplicate || (t.value(n.value()),
                t.trigger("change", {
                    isDuplicate: !0
                }))
            })
        }
        function fi() {
            n(window).on("unload", function() {
                var r = siberia.common.toBoolean(n("#IsNew").val()), i, t;
                r === !0 && (n(".js-global-spinner-container").spinner(!0),
                i = n("#QuoteId").val(),
                t = kendo.format(n("#fee-estimate-container").data("fee-estimate-delete-quote-url"), i),
                siberia.common.isInternetExplorer() ? n.ajax({
                    url: t,
                    type: "POST",
                    async: !1
                }) : navigator.sendBeacon(t),
                n(".js-global-spinner-container").spinner(!1))
            });
            c = !1;
            siberia.common.addUnloadRule(function() {
                return c
            }, null, "");
            n(window).on("beforeunload", function() {
                var i = siberia.common.toBoolean(n("#IsNew").val()), t;
                i === !0 && (t = n("#QuoteId").val(),
                siberia.cookies.addDeletedNewFeeEstimateId(t))
            })
        }
        function e(i, r, u, f) {
            var e;
            r && r.preventDefault();
            u && n(u).blur();
            n("#items-grid").trigger("siberia-serialize-data");
            n(".js-global-spinner-container").spinner(!0);
            it();
            var c = siberia.invoiceFeeEstimateCommon.getAttachedItemNumber(n("#items-grid"))
              , o = t("#ProcedureTypeIds")
              , s = {
                attachedItemNumber: c,
                SortedProcedureTypeIds: o && o.toString()
            }
              , h = n("#IsMprForPrivateFeesApplied").prop("checked");
            h && n("#IsMprForPrivateFeesApplied").prop("disabled") && (s.IsMprForPrivateFeesApplied = h);
            e = n("#fee-estimate-form");
            e.ajaxSubmit({
                url: i + location.search,
                data: s,
                success: function(t) {
                    n(".js-global-spinner-container").spinner(!1);
                    siberia.validation.processAjaxErrors(e, t.Errors) ? f && f(t) : n("#items-errors-container").hide()
                },
                error: function() {
                    n(".js-global-spinner-container").spinner(!1);
                    siberia.validation.showFormNetworkError(e)
                }
            })
        }
        function d() {
            var t = n("#btnQuoteSave"), i = n("#js-ramsay-notification"), r, u;
            i.length ? (r = i.data("type"),
            u = i.data("message"),
            r === "success" ? siberia.notification.showSuccessNotification(u, t, null, null, !0) : r === "fail" && (siberia.notification.showErrorNotification(u, !1, null, null, !0),
            siberia.notification.showSuccessNotification(text.global.status.feeEstimateSaved, t))) : siberia.notification.showSuccessNotification(text.global.status.feeEstimateSaved, t)
        }
        function ei() {
            return {
                data: JSON.stringify({
                    doctorId: n("#DoctorId").val(),
                    locationId: i("#LocationId", "DropDownList"),
                    procedureTypeIds: t("#ProcedureTypeIds")
                })
            }
        }
        function oi() {
            return {
                text: n("#SelectedAllergies").data("kendoMultiSelect").input.val()
            }
        }
        var s = 0, h, c, w, r = "#NewFeeEstimateEmptyPopup #MainPatientSettings", u = "#ChecklistTemplates", l = ".js-add-selected-checklist", g = ".js-checklist-delete", a = ".js-checklist-container", nt = ".js-fee-estimate-records";
        return {
            init: tt,
            initFeeEstimatePopupForAppointment: bt,
            initFeeEstimatePopupForPatient: kt,
            initFeeEstimatePopupForConsult: dt,
            onLoadingProcedureChecklistTemplates: ei,
            refresh: o,
            onLoadingAllergies: oi
        }
    }();
    n(document).ready(function() {
        siberia.feeEstimate.init()
    })
}(jQuery),
function() {
    siberia.ensureObject("siberia.cookies");
    siberia.cookies = function() {
        function n(n, t) {
            document.cookie = escape(n) + "=" + escape(t) + "; path=/"
        }
        function s(n) {
            for (var t, r = n + "=", u = document.cookie.split(";"), i = 0; i < u.length; i++)
                if (t = u[i].trim(),
                t.indexOf(r) == 0)
                    return t.substring(r.length, t.length);
            return ""
        }
        function t(n) {
            var t = new Date;
            t.setDate(t.getDate() - 1);
            document.cookie = escape(n) + "=;expires=" + t
        }
        function h(t) {
            n(r, t)
        }
        function c(t) {
            n(u, t)
        }
        function l() {
            t("CachedSchedulerDate")
        }
        function a(n) {
            i(f, n)
        }
        function v(n) {
            i(e, n)
        }
        function i(n, t) {
            document.cookie = escape(n + "_" + t) + "=" + o + ";max-age=10; path=/"
        }
        var r = "Location"
          , u = "SchedulerViewId"
          , f = "Invoice"
          , e = "FeeEstimate"
          , o = "Deleted";
        return {
            setCookie: n,
            getCookie: s,
            removeCookie: t,
            saveLocation: h,
            removeCachedSchedulerDate: l,
            saveSchedulerViewId: c,
            addDeletedNewInvoiceId: a,
            addDeletedNewFeeEstimateId: v
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.patientNotifications");
    siberia.patientNotifications = function() {
        function d() {
            n("#notification-template-grid").length !== 0 && (a = n(".js-patient-notifications-container").data("email-notification-template-url"),
            v = n(".js-patient-notifications-container").data("sms-notification-template-url"),
            ct(),
            siberia.grid.initClientGrid({
                gridSelector: "#notification-template-grid",
                saveAndCloseSelector: null,
                saveSelector: null,
                addAction: tt,
                editAction: it,
                deleteAction: nt,
                isCustomEditing: !0
            }),
            n("#notification-switcher-grid").data("kendoGrid").bind("dataBound", g),
            n("#example-popup").kendoWindow({
                modal: !0,
                visible: !1
            }),
            n(".js-change-noreply-email").click(function(t) {
                t.preventDefault();
                var i = n(this).closest("form")
                  , r = n(this);
                siberia.common.submitForm(i, r, text.global.status.noReplySettingsSaved, null)
            }))
        }
        function g() {
            n(".switcher-tooltip-eye").click(function(t) {
                let i = n("#example-popup").data("kendoWindow");
                i.content('<img style="width:350px;" src="' + unescape(t.currentTarget.getAttribute("image-tooltip-url")) + '">');
                i.center().open()
            });
            n(".js-notification-switcher").change(function(t) {
                n(".js-global-spinner-container").spinner(!0);
                n.ajax({
                    type: "POST",
                    url: "AppointmentNotificationTemplates/UpdateNotificationSwitcherState",
                    contentType: "application/json",
                    data: JSON.stringify({
                        isEnabled: t.target.checked,
                        id: t.target.id
                    }),
                    success: function() {
                        n(".js-global-spinner-container").spinner(!1)
                    },
                    complete: function() {
                        n(".js-global-spinner-container").spinner(!1);
                        n("#notification-switcher-grid").data("kendoGrid").dataSource.read()
                    }
                })
            })
        }
        function nt() {
            n("#notification-template-grid").data("kendoGrid").dataSource.sync()
        }
        function r(n) {
            return n == 1 ? "#email-notification-template-popup" : "#sms-notification-template-popup"
        }
        function p(n, t) {
            return n == 1 ? t ? text.global.titles.addEmailNotificationTemplate : text.global.titles.editEmailNotificationTemplate : t ? text.global.titles.addSmsNotificationTemplate : text.global.titles.editSmsNotificationTemplate
        }
        function tt(t, i) {
            var u = n(i.target).data("param")
              , f = r(u)
              , e = n(f);
            siberia.popup.create(f, {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: p(u, !0),
                    resizable: !0,
                    width: "1110",
                    height: "737",
                    actions: ["Maximize", "Close"],
                    resize: function() {
                        siberia.common.resizeTemplateList(e);
                        siberia.common.initMinPopupSize(e)
                    }
                },
                clear: function() {
                    et(u, f)
                },
                success: function() {
                    w()
                },
                cancel: function() {
                    t.cancel()
                },
                init: function() {
                    siberia.common.resizeTemplateList(e)
                }
            })
        }
        function it(t) {
            var i = t.TypeId
              , f = r(i)
              , u = n(f);
            siberia.popup.create(r(i), {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: p(i, !1),
                    resizable: !0,
                    width: "1110",
                    height: "737",
                    actions: ["Maximize", "Close"],
                    resize: function() {
                        siberia.common.resizeTemplateList(u);
                        siberia.common.initMinPopupSize(u)
                    }
                },
                clear: function() {
                    s(t, i)
                },
                success: function() {
                    w()
                },
                init: function() {
                    siberia.common.resizeTemplateList(u)
                }
            })
        }
        function w() {
            n("#notification-template-grid").data("kendoGrid").dataSource.read()
        }
        function b(i) {
            h(t, !1, function(n) {
                n.bind("execute", f);
                n.bind("paste", f);
                n.bind("keyup", function() {
                    c !== n.value() && f()
                })
            });
            n("#PortalCustomisedMessageTemplate_Name").val(i.Name);
            var u = n(t).find(".js-letter-templates-text")
              , r = u.data("kendoEditor");
            r && (r.value(i.Text),
            c = r.value())
        }
        function s(t, i) {
            var a = r(i), u = i == 1 ? "#EmailAppointmentNotificationTemplate" : "#SmsAppointmentNotificationTemplate", f, e, o, s, c, l;
            n(u + "_Id").val(t.Id);
            n(u + "_Name").val(t.Name);
            n(u + "_Subject").val(t.Subject);
            n(u + "_TypeId").val(i ? i : t.TypeId);
            n(u + "_HasDefaultLayout").val(t.HasDefaultLayout);
            n(u + "_IsActiveValue").prop("checked", t.IsActiveValue);
            n(u + "_DoNotSendIfConfirmed").prop("checked", t.DoNotSendIfConfirmed);
            n(u + "_NotifyBeforeValue").data("kendoDropDownList").value(t.NotifyBeforeValue);
            n(u + "_WhenToSendValue").data("kendoDropDownList").value(t.WhenToSendValue);
            f = n(u + "_SelectedLocations").data("kendoMultiSelect");
            f.dataSource.data(t.Locations);
            f.value(t.SelectedLocations);
            e = n(u + "_SelectedAppointmentTypes").data("kendoMultiSelect");
            e.dataSource.data(t.AppointmentTypes);
            e.value(t.SelectedAppointmentTypes);
            o = n(u + "_SelectedDoctors").data("kendoMultiSelect");
            o.dataSource.data(t.Doctors);
            o.value(t.SelectedDoctors);
            s = i == 2;
            h(a, s);
            c = n(a).find(".js-letter-templates-text");
            s ? c.val(t.Text) : (l = c.data("kendoEditor"),
            l && l.value(t.Text))
        }
        function rt(i) {
            var r = n(t);
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.customiseYourMessage,
                    resizable: !0,
                    width: "1110",
                    height: "737",
                    actions: ["Maximize", "Close"],
                    resize: function() {
                        siberia.common.resizeTemplateList(r);
                        siberia.common.initMinPopupSize(r)
                    }
                },
                clear: function() {
                    ft(i);
                    r.find("#publish-to-portal-button").toggleClass("btn-disabled", !0)
                },
                success: function(n) {
                    e = n.Data.length ? n.Data[0] : null
                },
                init: function() {
                    siberia.common.resizeTemplateList(r);
                    n("#publish-to-portal-button").click(function() {
                        siberia.popup.create(l, {
                            windowOptions: {
                                title: text.global.titles.confirm
                            },
                            init: function() {
                                y || (ut(),
                                y = !0)
                            }
                        })
                    })
                }
            })
        }
        function ut() {
            n("#confirm-publishing-custom-message-popup-publish-button").click(function() {
                n.ajax({
                    type: "POST",
                    url: "PortalCustomiseMessageEditor/CreateOrUpdate",
                    contentType: "application/json",
                    data: JSON.stringify({
                        "PortalCustomisedMessageTemplate.Name": n("#PortalCustomisedMessageTemplate_Name")[0].value,
                        "PortalCustomisedMessageTemplate.Text": n("#PortalCustomisedMessageTemplate_Text")[0].value
                    }),
                    success: function() {
                        siberia.popup.close(l);
                        siberia.popup.close(t);
                        n(".published-to-portal-label").toggle(!0)
                    },
                    complete: function() {}
                })
            })
        }
        function ft(i) {
            if (e) {
                b(e);
                return
            }
            var r = n(t);
            r.spinner(!0);
            n.ajax({
                type: "POST",
                url: i,
                success: function(n) {
                    n && b(n);
                    r.spinner(!1)
                },
                error: function() {
                    r.spinner(!1)
                }
            })
        }
        function et(t, i) {
            var r, u;
            if (o[t]) {
                s(o[t], t);
                return
            }
            r = n(i);
            r.spinner(!0);
            u = t == 1 ? a : v;
            n.ajax({
                type: "POST",
                url: u,
                success: function(n) {
                    n && (o[t] = n,
                    s(n, t));
                    r.spinner(!1)
                },
                error: function() {
                    r.spinner(!1)
                }
            })
        }
        function h(t, r, f) {
            var e = n(t).find(".js-letter-templates-text"), o = n(t).find(".js-letter-templates-subject"), h = n(".js-email-preview"), s;
            if (n(".js-sms-warning", t).toggle(r),
            n(".js-notification-subject").toggle(!r),
            h.toggle(!r),
            r) {
                n(".js-field-template", t).off("click");
                n(".js-field-template", t).click(function() {
                    k(i ? e : o, n(this).data("templateCode"))
                });
                e.on("focus", function() {
                    u(e, o)
                });
                u(e, o)
            } else
                s = e.data("kendoEditor"),
                s || (e.kendoEditor({
                    encoded: !1,
                    tools: ["formatting", "bold", "italic", "underine", "justifyLeft", "justifyCenter", "justifyRight", "insertOrderedList", "insertUnorderedList", "indent", "createLink", "insertImage", "createTable", "fontName", "fontSize"]
                }),
                s = e.data("kendoEditor"),
                f && f(s)),
                n(".js-field-template", t).off("click"),
                n(".js-field-template", t).click(function() {
                    i ? ht(s, n(this).data("templateCode")) : k(o, n(this).data("templateCode"))
                }),
                n(s.body).focus(function() {
                    u(e, o)
                }),
                u(e, o),
                h.off("click"),
                h.click(function() {
                    var n = s.value();
                    ot(t, n)
                });
            o.on("focus", function() {
                st(e, o)
            })
        }
        function ot(t, i) {
            var r = n(t)
              , u = siberia.common.toBoolean(r.find('[name$="HasDefaultLayout"]').val());
            u ? (r.spinner(!0),
            n.ajax({
                type: "POST",
                url: siberia.config.urls.emailTransformToDefaultPracticeLayout(),
                data: {
                    Text: i
                },
                success: function(n) {
                    n && !n.Errors && siberia.printPreview.letter({
                        text: n
                    })
                },
                complete: function() {
                    r.spinner(!1)
                }
            })) : siberia.printPreview.letter({
                text: i
            })
        }
        function u(t, r) {
            i = !0;
            t.data("kendoEditor") ? n(t.data("kendoEditor").body).css("background-color", "#fffcd3") : t.addClass("selected-field");
            r.removeClass("selected-field")
        }
        function st(t, r) {
            i = !1;
            t.data("kendoEditor") ? n(t.data("kendoEditor").body).css("background-color", "") : t.removeClass("selected-field");
            r.addClass("selected-field")
        }
        function k(n, t) {
            var i = n[0], u, r, f;
            document.selection ? (i.focus(),
            u = document.selection.createRange(),
            u.text = t) : i.selectionStart || i.selectionStart == "0" ? (r = i.selectionStart,
            f = i.selectionEnd,
            i.value = i.value.substring(0, r) + t + i.value.substring(f, i.value.length),
            i.selectionStart = r + t.length,
            i.selectionEnd = r + t.length,
            i.focus()) : i.value += t
        }
        function ht(n, t) {
            n.exec("inserthtml", {
                value: t
            })
        }
        function ct() {
            var i = n(t)
              , r = i.find("form")
              , u = n(".js-patient-notifications-container").data("customise-your-message-editor-url");
            n(".js-customise-your-message-editor").on("click", function() {
                rt(u);
                r.find(".js-popup-submit").toggleClass("btn-disabled", !0)
            });
            lt(i);
            r.find("input").on("input", f)
        }
        function f() {
            var i = n(t).find("form");
            i.find("#publish-to-portal-button").toggleClass("btn-disabled", !i.valid())
        }
        function lt(n) {
            var t = n.find("ul[id^=letter-templates-panelbar-]"), i;
            t.length && (i = t.kendoPanelBar().data("kendoPanelBar"),
            i.expand(t.find(".k-item"), !0))
        }
        var e = null, c, o = [], t = "#customise-your-message-editor-popup", l = "#confirm-publishing-custom-message-popup", a, v, i = !0, y = !1;
        return {
            init: d,
            initPopupControls: h
        }
    }();
    n(document).ready(function() {
        siberia.patientNotifications.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.patientDecease");
    siberia.patientDecease = function() {
        function s() {
            var r = n("#PatientId").val();
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.popupDeceasedPatient,
                    width: "800"
                },
                preLoadOptions: {
                    showSpinnerForParentPopup: !0,
                    dataUrl: n(t).attr("data-patient-decease-info-url"),
                    data: {
                        patientId: r
                    },
                    dataType: "",
                    preLoadSuccess: function(i) {
                        return siberia.validation.processAjaxErrors(n(t + " form"), i.Errors) ? (n(t + " #PatientDeceasePopupData").html(i),
                        h(),
                        siberia.grid.initClientGrid({
                            gridSelector: "#upload-file-list-grid-deceased-documents",
                            addAction: c,
                            editAction: l,
                            confirmText: text.global.confirms.deleteFile
                        }),
                        !0) : !1
                    }
                },
                clear: function() {
                    v();
                    n("#DeceasedPatientInfo_PatientId").val(r)
                },
                success: function(i) {
                    siberia.validation.processAjaxErrors(n(t + " form"), i.Errors) && (n("#PatientIsDeceased").val(!0),
                    siberia.notification.showSuccessNotification(text.global.status.dataSaved))
                },
                preSubmit: function() {
                    var t = n("#upload-file-list-grid-deceased-documents").data("kendoGrid");
                    n(i + "_UploadedFilesSerialized").val(JSON.stringify(t.dataSource.data()))
                },
                ajaxError: function(i) {
                    i.Errors[""] && siberia.validation.showFormValidationError(n(t), i.Errors[""].errors)
                }
            })
        }
        function h() {
            n(i + "_IsDeceased").val() != "True" ? (n(".js-patient-decease").show(),
            n(".js-patient-decease-update").hide(),
            n(".js-patient-not-decease").hide()) : (n(".js-patient-decease").hide(),
            n(".js-patient-decease-update").show(),
            n(".js-patient-not-decease").show())
        }
        function u(t, i) {
            n("#" + i + "_Guid").val(t.Guid);
            n("#" + i + "_FileName").val(t.FileName);
            n("#" + i + "_DocumentDate").val(t.DocumentDateDisplay);
            n("#" + i + "_Description").val(t.Description);
            n("#" + i + "_DocumentTypeId").data("kendoDropDownList").value(t.DocumentTypeId);
            n("#" + i + "_IsReferralFile").val(t.IsReferralFile);
            n(".js-document-type").hide()
        }
        function c(n) {
            siberia.popup.create("#upload-file-popup", {
                windowOptions: {
                    title: text.global.titles.addFile,
                    width: "400"
                },
                clear: function() {
                    siberia.upload.file.clearSelectedFile();
                    u(n.item, "Attachment")
                },
                success: function(t) {
                    f(n.item, "Attachment", t, t)
                },
                cancel: function() {
                    n.cancel()
                }
            })
        }
        function f(t, i, r, u) {
            var f, o, e, s;
            r ? (t.set("Guid", r.Guid),
            t.set("CanBePreviewed", u.CanBePreviewed),
            t.set("CssPostfix", u.CssPostfix)) : t.set("Guid", n("#" + i + "_Guid").val());
            f = n("#" + i + "_DocumentDate").data("kendoDatePicker").value() || siberia.common.currentLocationDate();
            o = kendo.toString(f, siberia.config.formats.dateFormat);
            t.set("DocumentDate", f);
            t.set("DocumentDateDisplay", o);
            t.set("DocumentTypeId", n("#" + i + "_DocumentTypeId").data("kendoDropDownList").value());
            t.set("FileName", n("#" + i + "_FileName").val());
            t.set("Description", n("#" + i + "_Description").val());
            t.FullFileName || (e = n('#upload-file-popup input[type="file"]')[0].files[0].name,
            s = e.substr(e.lastIndexOf(".")) || "",
            t.set("FullFileName", n("#" + i + "_FileName").val() + s))
        }
        function l(n, t) {
            t.preventDefault();
            siberia.popup.create("#edit-uploaded-file-popup", {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.editFileDescription,
                    width: "400"
                },
                clear: function() {
                    u(n, "EditAttachment")
                },
                success: function(t) {
                    t == "OK" && f(n, "EditAttachment")
                }
            })
        }
        function a() {
            n(".js-patient-not-decease").on("click", function() {
                var r = n(t).attr("data-patient-not-decease-url")
                  , i = n(t);
                i.spinner(!0);
                n.ajax({
                    url: r,
                    type: "POST",
                    data: {
                        patientId: n("#PatientId").val()
                    },
                    success: function(i) {
                        siberia.validation.processAjaxErrors(n(t + " form"), i.Errors) && (n(t).data("kendoWindow").close(),
                        n("#PatientIsDeceased").val(!1),
                        siberia.notification.showSuccessNotification(text.global.status.dataSaved))
                    },
                    error: function() {
                        siberia.validation.showFormNetworkError(n(t + " form"))
                    },
                    complete: function() {
                        i.spinner(!1)
                    }
                })
            })
        }
        function v() {
            var t = n(".js-patient-photo")
              , i = {
                PatientPhotoUrl: t ? t.prop("src") : undefined,
                PatientName: n("#PatientName").val(),
                PatientSex: n("#PatientSex").text(),
                PatientDateOfBirth: n("#PatientDateOfBirth").val(),
                PatientMobilePhone: n("#PatientMobilePhone").text(),
                PatientAccountType: n("#PatientAccountType").text(),
                PatientAge: n("#DeceasedPatientInfo_Age").val()
            };
            r.renderHtml("#DeceasePatientInfo", e, i)
        }
        var t = "#PatientDeceasePopup"
          , i = "#DeceasedPatientInfo"
          , r = siberia.documentLetterPopupCommon.getCommon(t)
          , e = r.template("#decease-popup-patient-info-template")
          , o = function() {
            n("#btnDeceasePatient").on("click", s);
            a()
        };
        return {
            init: o
        }
    }();
    n(document).ready(function() {
        siberia.patientDecease.init()
    })
}(jQuery),
function(n) {
    function t() {
        (i(),
        n("#user-mims-requests-grid").length !== 0) && (siberia.grid.initClientGrid({
            gridSelector: "#user-mims-requests-grid",
            editSelector: ".js-client-grid-view",
            addAction: r,
            editAction: u,
            isCustomEditing: !0
        }),
        n(".js-mims-module-toggler").siberiaOnOffToggler(".js-mims-module-on-btn", ".js-mims-module-off-btn", function(t) {
            n(".js-mims-valid-date").toggle(t);
            n(".js-request-valid-date").toggle(!t)
        }))
    }
    function i() {
        var t = n("#js-user-mims-subscription-expiration-warning");
        t.length && siberia.notification.showMimsNotification(n(".js-mims-notification-message").html(), null, null, function() {
            n.post(t.attr("data-onclose-url"))
        })
    }
    function r(t) {
        siberia.popup.create("#user-mims-request-popup", {
            submitText: text.global.labels.send,
            windowOptions: {
                title: text.global.titles.createMimsSubscriptionRequests,
                width: "600"
            },
            clear: function() {
                f()
            },
            success: function() {
                n("#user-mims-requests-grid").data("kendoGrid").dataSource.read()
            },
            cancel: function() {
                t.cancel()
            }
        })
    }
    function u(n) {
        siberia.popup.create("#user-mims-request-readonly-popup", {
            windowOptions: {
                title: text.global.titles.popupMIMSRequestDetails,
                width: "400"
            },
            clear: function() {
                e(n)
            }
        })
    }
    function f() {
        siberia.multiSelect.clearValue("#UserMimsRequest_UsersIds");
        n("#UserMimsRequest_ContactFirstName").val("");
        n("#UserMimsRequest_ContactLastName").val("");
        n("#UserMimsRequest_ContactMobilePhone").data("kendoMaskedTextBox").value("");
        n("#UserMimsRequest_ContactWorkPhone").data("kendoMaskedTextBox").value("");
        n("#UserMimsRequest_ContactEmail").val("")
    }
    function e(t) {
        var i = n("#user-mims-request-readonly-popup");
        i.find(".js-user-full-name").text(t.UserFullName);
        i.find(".js-request-date").text(t.RequestDate);
        i.find(".js-contact-first-name").text(t.ContactFirstName);
        i.find(".js-contact-last-name").text(t.ContactLastName);
        i.find(".js-contact-email").text(t.ContactEmail);
        i.find(".js-contact-mobile-phone").text(t.ContactMobilePhone);
        i.find(".js-contact-work-phone").text(t.ContactWorkPhone)
    }
    n(document).ready(function() {
        t()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.userSchedule");
    siberia.userSchedule = function() {
        function ht() {
            if (t = n("#user-scheduler-grid").data("kendoGrid"),
            t) {
                kt();
                dt();
                gt();
                wt();
                tt();
                c = n("#SelectedDoctors").data("kendoMultiSelect");
                i = n("#SelectedLocations").data("kendoMultiSelect");
                d = n("#FavoriteUserSchedules").data("kendoMultiSelect");
                c.bind("change", ci);
                i.bind("change", ai);
                n("#user-scheduler-grid").on("click", ".js-clear-day", vi);
                n("#user-scheduler-grid").on("click", ".js-cell-grid-add", yi);
                n("#user-scheduler-grid").on("click", ".js-cell-grid-repeat-day", pi);
                n(".js-user-schedule-repeat-day-popup").siberiaToggler({
                    selectedClass: l
                });
                var r = n("#kendo-container-with-appointment-categories").data("kendoDropDownList");
                r && (o = r.dataSource.data());
                n(".js-save-user-schedule").click(function(t) {
                    t.preventDefault();
                    n(this).blur();
                    g(!1)
                })
            }
        }
        function a() {
            var u = i.value()
              , r = [];
            return n.each(t.dataSource.data(), function(t, i) {
                var f = {
                    dayOfWeekId: i.DayOfWeekId,
                    activities: []
                };
                n.each(u, function(t, r) {
                    var u = ct(i.DayOfWeekId, r);
                    n.merge(f.activities, u)
                });
                r.push(f)
            }),
            r
        }
        function ct(t, i) {
            var r = []
              , f = p(t, i)
              , u = f.data("kendoGrid");
            return u && n.each(u.dataSource.data(), function(n, t) {
                r.push({
                    locationId: i,
                    schedulerCategoryId: t.SchedulerCategoryId,
                    fromTime: kendo.toString(t.FromTime, "HH:mm"),
                    toTime: kendo.toString(t.ToTime, "HH:mm")
                })
            }),
            r
        }
        function p(t, i) {
            return n("#user-scheduler-cell-" + t + "-" + i)
        }
        function lt() {
            return n('[id^="user-scheduler-cell-"]')
        }
        function at(t) {
            return n('[id^="user-scheduler-cell-' + t + '-"]')
        }
        function g(t) {
            var u = n("#user-scheduler-area").data("save-user-schedule-url"), r, i, e, o;
            if (u) {
                r = null;
                i = c.value();
                i && i.length > 0 && (r = i[0]);
                var s = kendo.toString(n("#from-date").data("kendoDatePicker").value(), siberia.config.formats.dateFormat)
                  , h = kendo.toString(n("#to-date").data("kendoDatePicker").value(), siberia.config.formats.dateFormat)
                  , f = n(".js-global-spinner-container");
                f.spinner(!0);
                e = a();
                o = {
                    userId: r,
                    startDate: s,
                    endDate: h,
                    weekDays: e,
                    weekDayIdsToApplySchedule: vt(),
                    warningsConfirmed: t
                };
                n.ajax({
                    type: "POST",
                    url: u,
                    data: JSON.stringify(o),
                    contentType: "application/json",
                    success: function(t) {
                        if (siberia.validation.processAjaxErrors(n("#user-scheduler-area"), t.Errors),
                        t.Errors)
                            n("#confirm-and-force-save-changes").on("click", function() {
                                n("#confirm-and-force-save-changes").off("click");
                                ti()
                            });
                        else
                            nt()
                    },
                    complete: function() {
                        f.spinner(!1)
                    }
                })
            }
        }
        function nt() {
            siberia.notification.showSuccessNotification(text.global.status.userScheduleSavedSuccessfully, n(".user-scheduler-period"));
            pt();
            yt()
        }
        function vt() {
            var t = [];
            return n(".js-week-days-filter").each(function(i, r) {
                n(r).prop("checked") && t.push(n(r).val())
            }),
            t
        }
        function yt() {
            n(".k-dirty").closest('[data-role="grid"]').each(function() {
                var t = n(this).data("kendoGrid");
                t.dataSource.sync()
            })
        }
        function pt() {
            var t = i.value()
              , r = lt();
            n.each(r, function(i, r) {
                var u = n(r), e = u.attr("data-location-id"), f;
                n.inArray(e, t) === -1 && (f = u.data("kendoGrid"),
                f && (f.dataSource.data([]),
                s(u, 0)))
            })
        }
        function tt() {
            var t = kendo.parseDate(n("#location-current-date").data("location-date"), siberia.config.formats.dateFormat), i, f;
            n("#WeekSelectionCalendar").data("kendoCalendar").value(t);
            i = u(t, !0);
            f = u(t, !1);
            r.Monday = i;
            r.Sunday = f;
            ft()
        }
        function wt() {
            siberia.favorites.init("#doctor-scheduler-container", {
                saveFavoriteUrl: n("#doctor-scheduler-container .js-save-favorite").data("save-favorite-url"),
                clearMultiSelectOnFormChange: !1,
                validateFavoriteDataAction: bt,
                getFavoriteDataAction: function() {
                    return {
                        Schedules: a()
                    }
                },
                loadFavoriteAction: function() {
                    v()
                },
                clearFavoriteDataAction: function() {
                    v()
                }
            });
            n("#WeekSelectionCalendar").data("kendoCalendar").bind("change", it)
        }
        function it() {
            var t = n("#FavoriteUserSchedules").data("kendoMultiSelect");
            d && t.value([])
        }
        function bt(t) {
            var r = n("#user-scheduler-area").data("validate-user-schedule-template-url"), i, u;
            r || t && t();
            i = n("#user-scheduler-page");
            i.spinner(!0);
            u = a();
            n.ajax({
                type: "POST",
                url: r,
                data: JSON.stringify(u),
                contentType: "application/json",
                success: function(i) {
                    siberia.validation.processAjaxErrors(n("#user-scheduler-area"), i.Errors);
                    i.Errors || t && t()
                },
                complete: function() {
                    i.spinner(!1)
                }
            })
        }
        function rt(t) {
            t._buttonNever.closest("li").hide();
            t._buttonCount.click();
            var r = siberia.common.currentLocationDate()
              , u = new Date(r.getFullYear() + 5,r.getMonth(),r.getDate())
              , i = t._until;
            i.setOptions({
                format: siberia.config.formats.dateFormat,
                parseFormats: [siberia.config.formats.dateFormat],
                max: u
            });
            i.element.bind("change", function() {
                var t = kendo.parseDate(n(this).val(), siberia.config.formats.dateFormat);
                (!t || t > u) && i.value(i._value)
            })
        }
        function kt() {
            var r = !1
              , t = n("#user-schedule-recurrence-rule-popup")
              , i = n("#UserScheduleRecurring_RecurrenceRule", t).data("kendoRecurrenceEditor");
            i._frequency.bind("change", function() {
                rt(i)
            });
            siberia.popup.create(t, {
                openPopupBtn: "#UserScheduleRecurrenceRuleBtn",
                windowOptions: {
                    title: text.global.titles.popupRecurringScheduler,
                    width: "570px"
                },
                extraData: function() {
                    return {
                        "UserScheduleRecurring.RecurrenceRule": i.value(),
                        "UserScheduleRecurring.WarningsConfirmed": r
                    }
                },
                clear: function() {
                    r = !1;
                    var f = siberia.common.currentLocationDate()
                      , e = new Date(f.setDate(f.getDate() + 7))
                      , o = u(e, !0);
                    i.value("");
                    n("#UserScheduleRecurring_UserId", t).val(c.value()[0]);
                    n("#UserScheduleRecurring_FromDate", t).data("kendoDatePicker").value(o);
                    n("#UserScheduleRecurring_WeekDaysSerialized", t).val(JSON.stringify(a()));
                    rt(i)
                },
                ajaxError: function() {
                    if (n("#confirm-and-force-save-changes", t).length)
                        n("#confirm-and-force-save-changes", t).one("click", function() {
                            r = !0;
                            n(".js-popup-submit", t).trigger("click")
                        })
                },
                success: nt
            })
        }
        function dt() {
            var t = n("#WeekSelectionCalendar").data("kendoCalendar");
            t.bind("change", function(n) {
                var t = n.sender.value();
                r.Monday = u(t, !0);
                r.Sunday = u(t, !1);
                ft();
                ut().length && v()
            })
        }
        function ut() {
            var t = n("#SelectedDoctors").data("kendoMultiSelect");
            return t ? t.value() : []
        }
        function ft() {
            n("#from-date").data("kendoDatePicker").value(r.Monday);
            n("#to-date").data("kendoDatePicker").value(r.Sunday);
            var t = kendo.toString(r.Monday, siberia.config.formats.dateFormat) + " - " + kendo.toString(r.Sunday, siberia.config.formats.dateFormat);
            n("#current-selected-week").data("selected-monday", kendo.toString(r.Monday, siberia.config.formats.dateFormat));
            n("#current-selected-week").val(t)
        }
        function gt() {
            var t = n("#from-date").data("kendoDatePicker")
              , i = n("#to-date").data("kendoDatePicker");
            t.bind("change", function(n) {
                var r = n.sender.value(), f, e;
                r && (f = u(r, !0),
                e = u(r, !1),
                t.value(f),
                i.value(e))
            });
            i.bind("change", function(n) {
                var r = n.sender.value(), f;
                r && (t.value() > r && (r = t.value()),
                f = u(r, !1),
                i.value(f))
            })
        }
        function u(n, t) {
            var u = n.getDay(), r = new Date(n), i;
            return t ? (i = u - 1,
            r.setDate(r.getDate() - (i < 0 ? 6 : i))) : (i = 7 - u,
            r.setDate(r.getDate() + (i > 6 ? 0 : i))),
            r
        }
        function ni(n) {
            n && h.push(n)
        }
        function ti() {
            g(!0)
        }
        function ii(n) {
            for (var i, t = 0; t < o.length; t++)
                if (i = o[t],
                i.Id === n)
                    return i.Text;
            return text.global.labels.unknown
        }
        function ri() {
            n(".js-user-schedule-control").show()
        }
        function ui() {
            n(".js-user-schedule-control").hide()
        }
        function fi() {
            var t = []
              , r = i.dataItems();
            n.each(r, function(n, i) {
                t.push(i.Id)
            });
            n.each(h, function(i, r) {
                r.cells && n.each(r.cells, function(i, r) {
                    n.inArray(r.LocationId, t) === -1 && t.push(r.LocationId)
                })
            });
            i.value(t)
        }
        function et() {
            var u = [], f = i.dataItems(), r;
            for (n.each(f, function(n, i) {
                u.push(i.ColumnIndex);
                t.showColumn(i.ColumnIndex)
            }),
            r = 1; r < t.columns.length; ++r)
                n.inArray(r, u) === -1 && t.hideColumn(r);
            u.length > 0 && u.length === t.columns.length - 1 && (t.hideColumn(0),
            t.showColumn(0))
        }
        function ot(t) {
            var r = i.value();
            n.each(h, function(i, u) {
                if (n.inArray(u.locationId, r) >= 0 && t(u)) {
                    var f = p(u.dayOfWeekId, u.locationId);
                    f.length === 1 && (u.cells && u.cells.length > 0 ? ei(f, u) : w(f, []),
                    u.rendered = !0)
                }
            })
        }
        function ei(t, i) {
            var r = !1;
            n.each(i.cells, function(n, u) {
                return u.LocationId === i.locationId ? (w(t, u.Activities),
                r = !0,
                !1) : !0
            });
            r || w(t, [])
        }
        function w(t, i) {
            for (var u, r = 0; r < i.length; ++r)
                i[r].ActivityId = r + 1;
            u = new kendo.data.DataSource({
                data: i,
                autoSync: !1,
                schema: {
                    model: {
                        id: "ActivityId",
                        fields: {
                            ActivityId: {
                                editable: !1
                            },
                            SchedulerCategoryId: {},
                            TimeLable: {
                                editable: !1
                            },
                            FromTime: {},
                            SeparatorLabel: {
                                editable: !1
                            },
                            ToTime: {}
                        }
                    }
                },
                change: function(n) {
                    (n.action == "itemchange" || n.action == "add" || n.action == "remove") && it()
                }
            });
            t.kendoGrid({
                editable: !0,
                scrollable: !1,
                dataSource: u,
                columns: [{
                    field: "SchedulerCategoryId",
                    title: text.global.columns.columnActivity,
                    attributes: {
                        "class": "category-cell"
                    },
                    template: "#: siberia.userSchedule.getSchedulerCategoryNameById(SchedulerCategoryId) #",
                    editor: oi
                }, {
                    field: "TimeLable",
                    attributes: {
                        "class": "time-label-cell"
                    },
                    template: "<label>" + text.global.labels.time + ":<\/label>"
                }, {
                    field: "FromTime",
                    attributes: {
                        "class": "time-cell-from"
                    },
                    title: text.global.columns.columnFrom,
                    format: "{0:HH:mm}",
                    editor: si
                }, {
                    field: "SeparatorLabel",
                    attributes: {
                        "class": "time-separator"
                    },
                    template: '<span class="separator">-<\/span>'
                }, {
                    field: "ToTime",
                    attributes: {
                        "class": "time-cell-to"
                    },
                    title: text.global.columns.columnTo,
                    format: "{0:HH:mm}",
                    editor: hi
                }, {
                    command: [{
                        name: "remove",
                        text: '<i class="k-icon k-delete" />',
                        click: bi
                    }]
                }],
                toolbar: [{
                    template: kendo.template(n("#user-scheduler-cell-grid-toolbar-template").html())
                }],
                edit: function(n) {
                    var i = n.container.find("input")
                      , t = i.data("kendoDropDownList");
                    t || (t = i.data("kendoTimePicker"));
                    t && t.open()
                },
                save: function() {
                    e = !0
                }
            });
            s(t, i.length)
        }
        function oi(t, i) {
            var r = n('<input required data-text-field="Text" data-value-field="Id" data-bind="value:' + i.field + '"/>')
              , u = n(o).filter(function(n, t) {
                return !t.IsDisabled || t.Id == i.model.SchedulerCategoryId
            })
              , f = new kendo.data.DataSource({
                data: u
            });
            r.appendTo(t).kendoDropDownList({
                autoBind: !1,
                dataTextField: "Text",
                dataValueField: "Id",
                dataSource: f,
                change: b
            })
        }
        function si(t, i) {
            var r = n('<input id="user-schedule-from-time" data-text-field="' + i.field + '" data-value-field="' + i.field + '" data-bind="value:' + i.field + '" data-format="' + i.format + '" onkeydown="return false;" />');
            r.appendTo(t).kendoTimePicker({
                interval: f,
                change: b
            })
        }
        function hi(t, i) {
            var r = n('<input id="user-schedule-to-time" data-text-field="' + i.field + '" data-value-field="' + i.field + '" data-bind="value:' + i.field + '" data-format="' + i.format + '" onkeydown="return false;" />');
            r.appendTo(t).kendoTimePicker({
                interval: f,
                change: b
            })
        }
        function b(n) {
            var t = n.sender.wrapper.closest('[data-role="grid"]').data("kendoGrid");
            t.closeCell()
        }
        function ci(n) {
            siberia.multiSelect.clear(i);
            var t = n.sender.value();
            t && t.length > 0 ? (tt(),
            v()) : ui();
            li()
        }
        function li() {
            n(".js-week-days-filter").each(function(t, i) {
                n(i).prop("checked", !0)
            })
        }
        function v() {
            var r, i;
            for (e = !1,
            r = n(".js-global-spinner-container"),
            r.spinner(!0),
            h = [],
            i = 1; i < t.columns.length; ++i)
                t.showColumn(i);
            t.dataSource.read()
        }
        function ai() {
            var n = function(n) {
                return n.rendered !== !0
            };
            ot(n);
            et();
            wi()
        }
        function vi(t) {
            var i = n(t.currentTarget), r;
            i.hasClass("btn-disabled") || (r = at(i.data("day-of-week-id")),
            n.each(r, function() {
                var t = n(this).data("kendoGrid"), i, r;
                if (t)
                    while (n(this).find(".k-grid-remove").length > 0)
                        i = n(this).find(".k-grid-remove:first"),
                        r = n(i).closest("tr"),
                        st(r, t)
            }))
        }
        function yi(r) {
            var u, v, p, h, l, a, c, w;
            r.preventDefault();
            n(r.currentTarget).blur();
            var g = t.dataItem(n(r.target).closest("tr")), b = n(r.target).closest("div.user-scheduler-cell"), nt = i.dataItems(), tt = b.attr("data-location-id"), d;
            n.each(nt, function(n, t) {
                tt === t.Id && (d = t)
            });
            u = b.data("kendoGrid");
            u && (v = n(o).filter(function(n, t) {
                return !t.IsDisabled
            }),
            p = "",
            v.length > 0 && (p = v[0].Id),
            a = u.dataSource.data(),
            a.length > 0 ? (c = kendo.parseDate(a[a.length - 1].ToTime),
            c.getHours() === 23 && c.getMinutes() === f ? (h = new Date(2e3,0,1,23,0,0,0),
            l = k(h, f)) : (h = c,
            l = k(c, f))) : (w = kendo.parseDate(d.WorkStartTime),
            h = w,
            l = k(w, f)),
            e = !0,
            u.dataSource.add({
                ActivityId: 0,
                SchedulerCategoryId: p,
                FromTime: kendo.toString(h, "HH:mm"),
                ToTime: kendo.toString(l, "HH:mm")
            }),
            s(n(r.target), u.dataSource.total()),
            y(g.DayOfWeekId))
        }
        function pi(t) {
            t.preventDefault();
            var i = n(t.currentTarget).closest("div.user-scheduler-cell");
            siberia.popup.create("#user-schedule-repeat-day-popup", {
                windowOptions: {
                    title: text.global.titles.cloneUserScheduleDayActivities,
                    width: "300px"
                },
                ajax: {
                    enabled: !1
                },
                clear: function() {
                    n(".js-user-schedule-repeat-day").removeClass(l);
                    n(".js-user-schedule-repeat-day-all").removeClass(l)
                },
                success: function() {
                    var r = i.attr("data-location-id")
                      , t = i.data("kendoGrid").dataSource.data();
                    n(".js-user-schedule-repeat-day." + l).each(function(i, u) {
                        var e = n(u).attr("data-week-day-id"), f = n('div[data-location-id="' + r + '"][data-day-of-week="' + e + '"]'), o;
                        f.length && (o = f.data("kendoGrid"),
                        o.dataSource.data(t.slice()),
                        y(e),
                        s(f, t.length))
                    })
                }
            })
        }
        function k(n, t) {
            return new Date(n.getTime() + t * 6e4)
        }
        function wi() {
            var t = n(".js-clear-day");
            n.each(t, function() {
                var t = n(this).data("day-of-week-id");
                y(t)
            })
        }
        function y(t) {
            for (var u, f = n('.js-clear-day[data-day-of-week-id="' + t + '"]'), e = i.dataItems(), r = 0; r < e.length; r++)
                if (u = p(t, e[r].Id).data("kendoGrid"),
                u && u.dataItems().length > 0) {
                    f.removeClass("btn-disabled");
                    return
                }
            f.addClass("btn-disabled")
        }
        function bi(t) {
            t.preventDefault();
            n(t.currentTarget).blur();
            var i = n(t.target).closest("tr");
            st(i, this)
        }
        function st(n, i) {
            var u = n.parents("tr"), f = i.dataItem(n), r;
            s(n, i.dataSource.total() - 1);
            e = !0;
            i.dataSource.remove(f);
            r = t.dataItem(u);
            y(r.DayOfWeekId)
        }
        function s(n, t) {
            n.closest('td[role="gridcell"]').toggleClass("unavailable-day-location", t === 0)
        }
        function ki() {
            var f = null, e = null, i = ut(), u, t;
            return i && i.length > 0 && (f = i[0]),
            u = n("#FavoriteUserSchedules").data("kendoMultiSelect"),
            u && (t = u.value(),
            t && t.length > 0 && (e = t[0])),
            {
                userId: f,
                startDate: kendo.toString(r.Monday, siberia.config.formats.dateFormat),
                favoriteId: e
            }
        }
        function di(n) {
            if (e) {
                n.preventDefault();
                e = !1;
                return
            }
        }
        function gi() {
            var i = function() {
                return !0
            }, t;
            fi();
            ot(i);
            ri();
            et();
            t = n(".js-global-spinner-container");
            t.spinner(!1)
        }
        var f = 5, r = {
            Monday: null,
            Sunday: null
        }, t, h, o = [], c, i, d, e = !1, l = "checked-day";
        return {
            init: ht,
            pushCell: ni,
            getSchedulerCategoryNameById: ii,
            onWeekScheduleLoading: ki,
            onSchedulerGridDataBinding: di,
            onSchedulerGridDataBound: gi,
            getFirstOrLastDay: u
        }
    }();
    n(document).ready(function() {
        siberia.userSchedule.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.logoutAll");
    siberia.logoutAll = function() {
        function t() {
            var t = n(".js-logout-all-container .js-logout-all-button");
            t.length && t.click(function(t) {
                t.preventDefault();
                var i = n(this);
                siberia.common.submitForm(i.closest("form"), i, text.global.status.logoutAllSuccessed)
            })
        }
        return {
            init: t
        }
    }();
    n(document).ready(function() {
        siberia.logoutAll.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.claims");
    siberia.claims = function() {
        function gt() {
            var i = n(ct), h, c, r;
            if (i && (h = i.find("#finalizationConfirmed"),
            h.bind("change", function(n) {
                i.find(".js-popup-submit").toggleClass("btn-disabled", !n.target.checked)
            })),
            l = n("#claiming-tabs").data("kendoTabStrip"),
            l) {
                l.bind("select", ii);
                t = n("#claiming-tabs-area");
                nt = t.data("get-claim-raw-request-url");
                tt = t.data("get-claim-processing-report-url");
                it = t.data("get-claim-payment-report-url");
                a = t.data("finalize-claim-url");
                rt = t.data("restore-claim-url");
                dt = t.data("restore-item-url");
                v = t.data("move-accepted-to-finalised-url");
                ut = t.data("resubmit-invoice-url");
                ft = t.data("submit-invoice-url");
                et = t.data("move-to-draft-url");
                ot = t.data("delete-draft-invoice-url");
                st = t.data("get-invoice-deletion-info-url");
                ht = t.data("submit-all-draft-url");
                n("#claiming-tabs").on("click", ".js-add-claim-manual-payment", at);
                n("#claiming-tabs").on("click", ".js-finalise-accepted-claim", ui);
                c = function() {
                    var i = l.select().index()
                      , t = n("#claiming-export-to-excel-form");
                    switch (i) {
                    case s.inProgress:
                        return {
                            exportData: yt(),
                            exportUrl: t.data("in-progress-url")
                        };
                    case s.exception:
                        return {
                            exportData: pt(),
                            exportUrl: t.data("exception-url")
                        };
                    case s.finalised:
                        return {
                            exportData: wt(),
                            exportUrl: t.data("finalised-url")
                        }
                    }
                }
                ;
                r = n(e + ", " + f + ", " + o);
                n("#claiming-export-to-excel-button").exportToExcelButton(c, r);
                siberia.grid.setExpandMode(e);
                siberia.grid.setExpandMode(f);
                siberia.grid.setExpandMode(o);
                n(r).each(function() {
                    n(this).data("kendoGrid").bind("detailInit", function(n) {
                        ti(n)
                    })
                });
                siberia.kendoTooltipWrapper(e);
                siberia.kendoTooltipWrapper(f);
                siberia.claimFilter.addOnFilteringCallback(function() {
                    u(1)
                });
                n(e).data("kendoGrid").bind("dataBound", ni);
                n(f).data("kendoGrid").bind("dataBound", p);
                n(o).data("kendoGrid").bind("dataBound", p);
                n(o).data("kendoGrid").dataSource.bind("requestEnd", fi);
                n("#btnSubmitAllDraft").click(function() {
                    ai()
                })
            }
        }
        function ni() {
            p();
            var t = bt();
            n("#btnSubmitAllDraft").toggle(!!(t && t.length))
        }
        function p() {
            n.each(y, function(n, t) {
                t.remove()
            });
            y = [];
            n(".js-grid-actions-cell").each(function(t, r) {
                var u = n(r)
                  , f = u.data("actions");
                if (f) {
                    var e = i.setActionFunctions(f)
                      , o = u.find(".dropdown-button-wrapper").dropDownButton(e)
                      , s = o.data("dropDown");
                    y.push(s)
                }
            })
        }
        function u(n) {
            var t = l.select().index();
            switch (t) {
            case s.inProgress:
                c(e, n);
                break;
            case s.exception:
                c(f, n);
                break;
            case s.finalised:
                c(o, n)
            }
        }
        function ti(t) {
            var i = n(t.detailRow).find('div[data-role="grid"]').data("kendoGrid");
            t.data.ChildItems.length > 0 && i.dataSource.data(t.data.ChildItems)
        }
        function ii(t) {
            if (!kt) {
                var u = n(t.item), i, s = "js-" + k + "-tab", h = "js-" + d + "-tab", l = "js-" + g + "-tab", r;
                u.hasClass(s) ? (i = e,
                r = s) : u.hasClass(h) ? (i = f,
                r = h) : u.hasClass(l) && (i = o,
                r = l);
                siberia.claimFilter.changeTabCallback(r);
                c(i)
            }
        }
        function c(i, r) {
            var u = n(i).data("kendoGrid");
            u.dataSource.data([]);
            t.spinner(!0);
            ri(i);
            u.dataSource.one("requestEnd", function(r) {
                r.response && r.response.Total ? n(i).show() : w(i);
                t.spinner(!1)
            });
            u.dataSource.one("error", function() {
                w(i);
                t.spinner(!1)
            });
            r ? u.dataSource.page(r) : u.dataSource.read()
        }
        function ri(t) {
            n(t + "-no-data").hide()
        }
        function w(t) {
            n(t + "-no-data").show();
            n(t).hide()
        }
        function ui(t) {
            var i, r, f;
            t.preventDefault();
            i = n(t.currentTarget).closest("tr");
            r = i.closest('div[data-role="grid"]').data("kendoGrid");
            r && (f = r.dataItem(i),
            f && n.post(v, {
                claimId: f.Id
            }).done(function() {
                u()
            }).fail(function() {
                siberia.notification.showErrorPopup(text.global.status.networkError)
            }))
        }
        function lt(t, i, r, u, e) {
            var o, s, h, c, l, a;
            i && (o = i.dataItem(t),
            o && r && (s = n(f).data("kendoGrid"),
            h = t.closest(".k-detail-row"),
            h.length > 0 && (l = h.prev(),
            c = s.dataItem(l).uid),
            a = function() {
                si(s, i, o, c, f);
                siberia.claimCounters.updateClaimCounters();
                u && u()
            }
            ,
            b(r, o.Id, a, e)))
        }
        function fi(n) {
            ei(n.response && n.response.AdditionalData)
        }
        function ei(t) {
            var r = n(o).find("table"), i = r.find("tfoot"), u, f;
            t ? (u = kendo.template(n("#finalized-claims-totals-row-template").html()),
            f = u(t),
            i.length > 0 && i.remove(),
            r.append(f)) : i.remove()
        }
        function b(t, i, r, u) {
            var f = n(ct);
            siberia.popup.create(f, {
                windowOptions: {
                    title: text.global.titles.warning,
                    width: "600"
                },
                customSubmitUrl: t,
                clear: function() {
                    var t = n(f);
                    t.find("#ClaimFinalization_Id").val(i);
                    t.find("#ClaimFinalization_Notes").val("");
                    t.find("#finalizationConfirmed").prop("checked", !1);
                    t.find(".js-popup-submit").addClass("btn-disabled")
                },
                preLoadOptions: {
                    dataUrl: f.attr("data-get-adjustment-data-url"),
                    data: {
                        claimId: i
                    },
                    dataType: "",
                    preLoadSuccess: function(t) {
                        return n("#invoice-claim-adjustment", f).text(t.Data.ClaimAdjustmentStr),
                        n("#invoice-claim-adjustment-label", f).text(t.Data.ClaimAdjustmentLabel),
                        !0
                    }
                },
                success: r,
                cancel: u
            })
        }
        function at(t, i) {
            var r = i.dataItem(t);
            r && siberia.invoicePaymentsPopup.open({
                popupSelector: "#claim-manual-payment-popup",
                hidePaymentTypeSwitch: !0,
                invoiceData: {
                    "ClaimManualPayments.ClaimId": r.Id
                },
                clearPopup: function(t) {
                    var i = "";
                    r.InvoiceNumber ? i = r.InvoiceNumber : r.Invoices && (i = r.Invoices.Text);
                    n(".js-invoice-number-field", t).text(i)
                },
                successAction: function(n) {
                    if (n && n.NeedToAcceptAndBalance) {
                        var r = function() {
                            c(f)
                        };
                        lt(t, i, a, r, r)
                    } else
                        c(f)
                }
            })
        }
        function oi(t, i) {
            siberia.invoicePaymentsPopup.open({
                popupSelector: "#claim-manual-payment-popup",
                hidePaymentTypeSwitch: !0,
                invoiceData: {
                    "ClaimManualPayments.ClaimId": t
                },
                clearPopup: function(t) {
                    n(".js-invoice-number-field", t).text(i)
                },
                successAction: function(n) {
                    n && n.NeedToAcceptAndBalance ? b(a, t, function() {
                        u()
                    }, function() {
                        u()
                    }) : u()
                }
            })
        }
        function si(t, i, r, u, f) {
            var o = n(window).scrollTop(), e;
            r.ItemId && n(t.dataSource.data()).each(function(n, u) {
                if (u.Id === r.ClaimId) {
                    if (hi(u.ChildItems, r.ItemId),
                    i.dataSource.data().length === 0) {
                        var f = vt(t, u.uid)
                          , e = t.dataItem(f);
                        t.dataSource.remove(e)
                    }
                    return !1
                }
                return !0
            });
            i.dataSource.remove(r);
            u && (e = vt(t, u),
            t.expandRow(e));
            t.dataSource.data().length == 0 && w(f);
            n(window).scrollTop(o)
        }
        function hi(t, i) {
            n(t).each(function(n) {
                return this.ItemId == i ? (t.splice(n, 1),
                !1) : !0
            })
        }
        function vt(n, t) {
            return n.tbody.find('tr[data-uid="' + t + '"]')
        }
        function ci() {
            n("#exception-claims").data("kendoGrid").dataSource.read()
        }
        function li() {
            n("#finalized-claims").data("kendoGrid").dataSource.read()
        }
        function yt() {
            return siberia.claimFilter.getFilterData()
        }
        function pt() {
            return siberia.claimFilter.getFilterData()
        }
        function wt() {
            return siberia.claimFilter.getFilterData()
        }
        function bt() {
            var t = n(e).data("kendoGrid").dataSource.data()
              , i = t.filter(function(n) {
                return n.Claim.Status === "Draft" && !n.Claim.Error && !n.Claim.Warning && n.Patient && !n.Patient.VerificationError
            });
            return i.map(function(n) {
                var t = JSON.parse(n.ClaimingActions).userData;
                return t.invoiceId
            })
        }
        function ai() {
            var r = bt()
              , i = {
                InvoiceIds: r
            };
            (!i || i.InvoiceIds && i.InvoiceIds.length) && (t.spinner(!0),
            n.post(ht, i).done(function() {
                u();
                siberia.claimCounters.updateClaimCounters()
            }).fail(function() {
                siberia.notification.showErrorPopup(text.global.status.networkError)
            }).always(function() {
                t.spinner(!1)
            }))
        }
        var l, t, kt, k = "in-progress-claims", d = "exception-claims", g = "finalized-claims", e = "#" + k, f = "#" + d, o = "#" + g, nt, tt, it, a, dt, rt, v, ut, ft, et, ot, st, ht, ct = "#claim-finalization-warning-popup", s = {
            inProgress: 0,
            exception: 1,
            finalised: 2
        }, h = {
            draft: 0,
            submitted: 1,
            exception: 2,
            ready: 3,
            finalized: 4,
            failed: 5
        }, r = {
            submit: 0,
            edit: 1,
            "delete": 2,
            moveToDraft: 3,
            view: 4,
            resubmit: 5,
            acceptAndBalance: 6,
            manualPayment: 7,
            restore: 8,
            showClaimRawRequest: 9,
            showClaimProcessingReport: 10,
            showClaimPaymentReport: 11,
            moveFromAcceptedToFinalise: 12
        }, i = {
            submit: function(n) {
                i.doAction(ft, {
                    invoiceId: n.invoiceId,
                    fromStatusId: n.status,
                    itemIds: n.itemIds
                }, i.processSuccessResult)
            },
            edit: function(n, t) {
                n.status !== h.draft ? i.moveToDraft(n, t, function() {
                    i.goToInvoice(n.invoiceId, t)
                }) : i.goToInvoice(n.invoiceId, t)
            },
            "delete": function(r) {
                r.status === h.draft && (t.spinner(!0),
                n.post(st, {
                    invoiceId: r.invoiceId,
                    invoiceItemIds: r.itemIds
                }).done(function(f) {
                    f.ExceptionMessage ? (t.spinner(!1),
                    siberia.notification.showErrorPopup(f.ExceptionMessage, function() {
                        u()
                    })) : (n("#delete-draft-invoice-popup .js-confirmation-title").html(f.ConfirmationMessage),
                    t.spinner(!1),
                    siberia.confirmationPopup.open("#delete-draft-invoice-popup", function() {
                        i.doAction(ot, {
                            itemIds: r.itemIds
                        }, i.processSuccessResult)
                    }))
                }).fail(function() {
                    t.spinner(!1);
                    siberia.notification.showErrorPopup(text.global.status.networkError)
                }))
            },
            moveToDraft: function(n, t, r) {
                i.doAction(et, {
                    invoiceId: n.invoiceId,
                    fromStatusId: n.status,
                    itemIds: n.itemIds
                }, function(n) {
                    n.Errors ? siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)) : r && r();
                    u();
                    siberia.claimCounters.updateClaimCounters()
                })
            },
            view: function(n, t) {
                i.goToInvoice(n.invoiceId, t)
            },
            resubmit: function(n) {
                i.doAction(ut, {
                    invoiceId: n.invoiceId,
                    fromStatusId: n.status,
                    itemIds: n.itemIds
                }, i.processSuccessResult)
            },
            manualPayment: function(n, t) {
                if (n.status === h.submitted && oi(n.claimId, n.invoiceNumber),
                n.status === h.exception) {
                    var i = t.closest("tr")
                      , r = t.closest('div[data-role="grid"]').data("kendoGrid");
                    at(i, r)
                }
            },
            acceptAndBalance: function(n, t) {
                if (n.status === h.submitted && b(a, n.claimId, function() {
                    u()
                }),
                n.status === h.exception) {
                    var i = t.closest("tr")
                      , r = t.closest('div[data-role="grid"]').data("kendoGrid");
                    lt(i, r, a);
                    siberia.claimCounters.updateClaimCounters()
                }
            },
            restore: function(n, t) {
                i.doAction(rt, {
                    claimId: n.claimId
                }, function(r) {
                    r.Errors ? siberia.notification.showErrorPopup(siberia.notification.getFirstError(r.Errors)) : r.Message ? siberia.notification.showErrorPopup(r.Message) : i.goToInvoice(n.invoiceId, t)
                })
            },
            moveFromAcceptedToFinalised: function(n) {
                i.doAction(v, {
                    claimId: n.claimId
                }, i.processSuccessResult)
            },
            showRawClaimRequest: function(n) {
                i.doAction(nt, {
                    claimId: n.claimId
                }, function(n) {
                    n.Errors ? siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)) : siberia.infoPopup.show(n, null, {
                        title: text.global.titles.claimRawRequest,
                        width: 600
                    })
                })
            },
            showClaimProcessingReport: function(n) {
                i.doAction(tt, {
                    claimId: n.claimId
                }, function(n) {
                    n.Errors ? siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)) : siberia.infoPopup.show(n, null, {
                        title: text.global.titles.claimProcessingReport,
                        width: 600
                    })
                })
            },
            showClaimPaymentReport: function(n) {
                i.doAction(it, {
                    claimId: n.claimId
                }, function(n) {
                    n.Errors ? siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)) : siberia.infoPopup.show(n, null, {
                        title: text.global.titles.claimPaymentReport,
                        width: 600
                    })
                })
            },
            processSuccessResult: function(n) {
                n && (n.success ? u() : n.invoiceValidationWarnings ? u() : n.errorMessage ? (siberia.notification.showErrorPopup(n.errorMessage),
                u()) : n.Errors && siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)),
                siberia.claimCounters.updateClaimCounters())
            },
            doAction: function(i, r, u) {
                t.spinner(!0);
                n.post(i, r).done(function(n) {
                    u && u(n)
                }).fail(function() {
                    siberia.notification.showErrorPopup(text.global.status.networkError)
                }).always(function() {
                    t.spinner(!1)
                })
            },
            goToInvoice: function(n, t) {
                var i = t.closest("tr").find("a.js-invoice-link");
                i.length > 0 ? i[0].click() : console.error("link is not found for invoice id " + n)
            },
            getActionFunction: function(n) {
                switch (n) {
                case r.submit:
                    return this.submit;
                case r.edit:
                    return this.edit;
                case r.delete:
                    return this.delete;
                case r.moveToDraft:
                    return this.moveToDraft;
                case r.view:
                    return this.view;
                case r.resubmit:
                    return this.resubmit;
                case r.manualPayment:
                    return this.manualPayment;
                case r.acceptAndBalance:
                    return this.acceptAndBalance;
                case r.restore:
                    return this.restore;
                case r.showClaimRawRequest:
                    return this.showRawClaimRequest;
                case r.showClaimProcessingReport:
                    return this.showClaimProcessingReport;
                case r.showClaimPaymentReport:
                    return this.showClaimPaymentReport;
                case r.moveFromAcceptedToFinalise:
                    return this.moveFromAcceptedToFinalised
                }
            },
            setActionFunctions: function(n) {
                return n.mainAction.action = this.getActionFunction(n.mainAction.actionId),
                n.subActions && n.subActions.forEach(function(n) {
                    n.action = i.getActionFunction(n.actionId)
                }),
                n
            }
        }, y = [];
        return {
            init: gt,
            changedExceptionToolbarFilter: ci,
            getExceptionClaimData: pt,
            changedFinalizedToolbarFilter: li,
            getFinalizedClaimData: wt,
            getInProgressClaimData: yt
        }
    }();
    n(document).ready(function() {
        siberia.claims.init()
    })
}(jQuery),
function(n) {
    function i() {
        if (t = n("#online-report-grid"),
        t.length != 0)
            n("#refresh-online-report").on("click", r)
    }
    function r() {
        t.data("kendoGrid").dataSource.read()
    }
    var t;
    n(function() {
        i()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.operatingList");
    siberia.operatingList = function() {
        function i() {
            n("#operating-lists-grid").length !== 0 && (siberia.grid.initClientGrid({
                gridSelector: "#operating-lists-grid",
                editSelector: null,
                duplicateSelector: null,
                deleteSelector: null,
                saveSelector: null,
                saveAndCloseSelector: null,
                addAction: e,
                isCustomEditing: !0
            }),
            siberia.grid.initClientGrid({
                gridSelector: "#procedure-list-grid",
                addSelector: null,
                editSelector: null,
                duplicateSelector: null,
                deleteSelector: null,
                saveAndCloseSelector: null
            }),
            r(),
            f())
        }
        function r() {
            n("#operating-lists-grid").on("click", ".js-operating-list-pdf", function(i) {
                i.preventDefault();
                n(this).blur();
                var r = n("#operating-lists-grid").data("kendoGrid")
                  , u = r.dataItem(n(i.currentTarget).closest("tr"));
                window.open(t(u.Id))
            });
            n("#operating-lists-grid").on("click", ".js-operating-list-email", function(t) {
                t.preventDefault();
                n(this).blur();
                var r = n("#operating-lists-grid").data("kendoGrid")
                  , i = r.dataItem(n(t.currentTarget).closest("tr"));
                confirm(text.global.confirms.sendOperationList(kendo.toString(i.Date, siberia.config.formats.dateFormat))) && u(i.Id)
            })
        }
        function t(t) {
            return kendo.format(n("#operating-lists-grid").data("get-pdf-url"), t)
        }
        function u(t) {
            var i = n(".js-global-spinner-container"), r;
            i.spinner(!0);
            r = n("#operating-lists-grid").data("send-email-url");
            n.ajax({
                type: "POST",
                url: r,
                contentType: "application/json",
                data: JSON.stringify({
                    id: t
                }),
                success: function(t) {
                    t.Errors && n.each(t.Errors, function(n, t) {
                        siberia.notification.showErrorNotification(t.errors[0], !0)
                    })
                },
                error: function() {
                    siberia.validation.showGridNetworkError(!0)
                },
                complete: function() {
                    i.spinner(!1)
                }
            })
        }
        function f() {
            var i = n("#procedure-list-grid")
              , t = i.data("kendoGrid");
            if (t) {
                i.on("click", ".js-toggle-detail-section", function(i) {
                    var r = t.dataItem(n(i.currentTarget));
                    r.set("ShowDetails", !r.ShowDetails)
                });
                i.kendoSortable({
                    filter: "table > tbody > tr",
                    connectWith: i,
                    cursor: "move",
                    placeholder: function(n) {
                        return n.clone().addClass("k-state-hover").css("opacity", .5)
                    },
                    hint: function(i) {
                        var r = n("<div><\/div>").text(t.dataItem(i).Patient.FullName).html();
                        return n('<div class="k-draggable">' + r + "<\/div>")
                    },
                    change: function(n) {
                        var r = n.oldIndex
                          , u = n.newIndex
                          , i = t.dataSource.at(r);
                        t.dataSource.remove(i);
                        t.dataSource.insert(u, i)
                    }
                })
            }
        }
        function e(n) {
            siberia.popup.create("#new-operating-list-popup", {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addOperatingList,
                    width: "500"
                },
                clear: function() {
                    h()
                },
                success: function(t) {
                    t && o(t, n.cancel)
                },
                cancel: function() {
                    n.cancel()
                }
            })
        }
        function o(i, r) {
            var u = null
              , e = function() {
                u && u.close()
            }
              , f = function() {
                e();
                var t = n("#operating-lists-grid").data("kendoGrid");
                t && t.dataSource.read()
            };
            siberia.popup.create("#operating-list-popup", {
                submitUrlAttr: "data-submit-url",
                windowOptions: {
                    title: text.global.titles.popupOperatingList,
                    width: "800"
                },
                clear: function() {
                    s(i)
                },
                preSubmit: function(t) {
                    n(t.currentTarget).hasClass("js-save-and-print") && (u = window.open("about:blank", "_blank"))
                },
                success: function(n) {
                    u && n.Data && (u.location.href = t(n.Data[0].Id));
                    c()
                },
                cancel: function() {
                    r && r()
                },
                ajaxError: f,
                error: f
            })
        }
        function s(t) {
            var r, u, i;
            n("#OperatingList_Id").val(t.Id);
            n("#OperatingList_LocationId").val(t.LocationId);
            n("#OperatingList_DoctorId").val(t.DoctorId);
            n("#OperatingList_Date").val(t.Date);
            n("#OperatingList_StartTime").val(t.StartTime);
            n("#OperatingList_EndTime").val(t.EndTime);
            n("#OperatingList_CreatedById").val(t.CreatedById);
            r = kendo.template(n("#OperatingListHeaderTemplate").html());
            n("#OperatingListHeader").html(r(t));
            u = n("#procedure-list-grid").data("kendoGrid");
            i = u.dataSource;
            i.data([]);
            n.each(t.Procedures, function() {
                i.add(this)
            })
        }
        function h() {
            function c(r, u, f) {
                var e = n(".js-global-spinner-container"), s;
                e.spinner(!0);
                s = n("#new-operating-list-popup").data("get-startendtime");
                n.ajax({
                    type: "POST",
                    url: s,
                    data: {
                        LocationId: r,
                        DoctorId: u,
                        Date: f
                    },
                    success: function(n) {
                        t.value(n.StartTime);
                        i.value(n.EndTime)
                    },
                    error: o(),
                    complete: function() {
                        e.spinner(!1)
                    }
                })
            }
            function o() {
                t.value(s);
                i.value(h)
            }
            var t = n("#NewOperatingList_StartTime").data("kendoTimePicker")
              , i = n("#NewOperatingList_EndTime").data("kendoTimePicker")
              , r = n("#NewOperatingList_LocationId")
              , u = n("#NewOperatingList_DoctorId")
              , f = n("#NewOperatingList_Date")
              , s = "00:00"
              , h = "23:59"
              , e = [r, u, f];
            e.forEach(function(n) {
                n.on("change", function() {
                    var i = e.every(function(n) {
                        return n.val() !== "" && n.val() !== null
                    }), n, t;
                    i && (n = r.data("kendoMultiSelect").value()[0],
                    t = u.data("kendoMultiSelect").value()[0],
                    c(n, t, f.val()))
                })
            });
            o();
            siberia.multiSelect.clearValue("#NewOperatingList_DoctorId");
            siberia.multiSelect.clearValue("#NewOperatingList_LocationId")
        }
        function c() {
            n("#operating-lists-grid").data("kendoGrid").dataSource.read()
        }
        return {
            init: i
        }
    }();
    n(document).ready(function() {
        siberia.operatingList.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.depositHistory");
    siberia.depositHistory = function() {
        function k() {
            r(!1);
            n(".js-cheque").change(function() {
                r(!0);
                e(!1, "")
            });
            n(".js-cash").change(function() {
                r(!1);
                e(!1, "")
            });
            n(".js-card").change(function() {
                r(!1);
                e(!1, "")
            });
            n(".js-direct-deposit").change(function() {
                r(!1);
                e(!1, "")
            });
            n(".js-credit-card").change(function() {
                r(!1)
            })
        }
        function d(t) {
            var i = h(n(t.currentTarget))
              , r = s.dataItem(i.closest("tr"));
            window.open(a + "?transactionId=" + r.Id)
        }
        function r(t) {
            v(t, n("#Deposit_ChequeNumber"));
            v(t, n("#Refund_ChequeNumber"))
        }
        function v(n, t) {
            t.enable(n);
            n || t.val("")
        }
        function g(t) {
            t.type == "read" && (n("#balanceString").text(t.response.Balance),
            n("#patientNameString").text(i))
        }
        function nt() {
            siberia.popup.create("#add-deposit-history-item-popup", {
                submitText: text.global.labels.add,
                windowOptions: {
                    title: text.global.titles.addNewPayment,
                    width: "600"
                },
                preLoadOptions: {
                    dataUrl: n(".js-deposit-credit-card-section").data("get-credit-card-payment-option-url") + "?patientId=" + t,
                    type: "GET",
                    spinnerContainer: "#deposit-history-popup",
                    preLoadSuccess: function(t) {
                        n("#add-deposit-history-item-popup .js-deposit-credit-card-section").html(t);
                        n("#add-deposit-history-item-popup .js-deposit-credit-card-payment-option").toggle(!!t);
                        var i = n("#add-deposit-history-item-popup #Deposit_StripePaymentMethodId").length;
                        i ? n('#add-deposit-history-item-popup .js-credit-card input[type="radio"]').removeAttr("disabled", "disabled") : n('#add-deposit-history-item-popup .js-credit-card input[type="radio"]').attr("disabled", "disabled")
                    }
                },
                clear: function() {
                    n("#Deposit_Amount").data("kendoNumericTextBox").value(0);
                    n("#Deposit_ChequeNumber").val("");
                    n("#Deposit_TypeId")[0].checked = !0;
                    n("#Deposit_PatientId").val(t);
                    n("#Deposit_PatientFullName").text(i);
                    n("#Deposit_PaymentDateStr").val("");
                    n("#Deposit_PaymentDate").data("kendoDatePicker").value(siberia.common.currentLocationDate());
                    n("#Deposit_LocationId").data("kendoDropDownList").select(u == null ? 0 : function(n) {
                        return n.Id == u
                    }
                    );
                    n("#Deposit_DoctorId").data("kendoDropDownList").select(f == null ? 0 : function(n) {
                        return n.Id == f
                    }
                    )
                },
                preSubmit: function() {
                    var i = tt(), r, u;
                    return (n("#Deposit_PaymentDateStr").val(i),
                    r = n('#add-deposit-history-item-popup .js-credit-card [id="Deposit_TypeId"]:checked').length,
                    r) ? (u = {
                        Amount: n("#Deposit_Amount").val(),
                        LocationId: n("#Deposit_LocationId").data("kendoDropDownList").value(),
                        DoctorId: n("#Deposit_DoctorId").data("kendoDropDownList").value(),
                        PatientId: t,
                        PaymentMethodId: n("#Deposit_StripePaymentMethodId").val(),
                        PaymentDateStr: i
                    },
                    it(u),
                    !1) : !0
                },
                success: function() {
                    o()
                }
            })
        }
        function tt() {
            var t = n("#Deposit_PaymentDate").data("kendoDatePicker");
            return t ? kendo.toString(t.value(), siberia.config.formats.dateTimeFormat) : ""
        }
        function it(t) {
            var u = {
                Amount: t.Amount,
                LocationId: t.LocationId,
                DoctorId: t.DoctorId,
                PatientId: t.PatientId,
                PaymentDateStr: t.PaymentDateStr
            }, i = n("#add-deposit-history-item-popup"), r;
            i.spinner(!0);
            r = n("form", i);
            n.post(n(".js-deposit-credit-card-payment-option").data("initiate-stripe-payment-url"), u).done(function(n) {
                siberia.validation.processAjaxErrors(r, n.Errors) ? n.Data.paymentIntentSecret && rt(t.PaymentMethodId, n.Data.paymentIntentSecret, i) : i.spinner(!1)
            }).error(function() {
                i.spinner(!1);
                siberia.validation.showFormNetworkError(r)
            })
        }
        function rt(t, i, r) {
            siberia.stripe.confirmCardPayment(i, {
                payment_method: t
            }).then(function(t) {
                if (r.spinner(!1),
                t.error)
                    e(!0, t.error.message);
                else if (t.paymentIntent && t.paymentIntent.status === "succeeded") {
                    siberia.popup.close("#add-deposit-history-item-popup");
                    var i = "<strong>" + text.deposit.stripePayment.success.title + "<\/strong><br/>" + text.deposit.stripePayment.success.subtitle + " " + text.deposit.stripePayment.success.message;
                    siberia.notification.showSuccessNotification(i, n("#deposit-history-popup"), !1, null, !0)
                }
            })
        }
        function e(t, i) {
            n(".js-stripe-payment-error-section").toggle(t);
            n(".js-stripe-payment-error-message").text(i || "")
        }
        function ut() {
            siberia.popup.create("#refund-deposit-popup", {
                submitText: text.global.labels.refund,
                windowOptions: {
                    title: text.global.titles.popupRefundPayment,
                    width: "450"
                },
                clear: function() {
                    n("#Refund_RefundAmount").data("kendoNumericTextBox").value(0);
                    n("#Refund_ChequeNumber").val("");
                    n("#Refund_TypeId")[0].checked = !0;
                    n("#Refund_PatientId").val(t);
                    n("#Refund_PatientFullName").text(i);
                    n("#Refund_LocationId").data("kendoDropDownList").select(u == null ? 0 : function(n) {
                        return n.Id == u
                    }
                    );
                    n("#Refund_DoctorId").data("kendoDropDownList").select(f == null ? 0 : function(n) {
                        return n.Id == f
                    }
                    )
                },
                success: function() {
                    o()
                }
            })
        }
        function ft() {
            siberia.popup.create("#deposit-history-popup", {
                openPopupBtn: "#btnDeposits",
                windowOptions: {
                    title: text.global.titles.popupDepositHistory,
                    width: "800"
                }
            });
            t = n("#PatientId").val();
            i = n("#PatientName").val();
            o()
        }
        function y(n) {
            siberia.popup.create("#deposit-history-popup", {
                windowOptions: {
                    title: text.global.titles.popupDepositHistory,
                    width: "800"
                },
                close: n
            });
            o()
        }
        function o() {
            n("#deposit-grid").data("kendoGrid").dataSource.read()
        }
        function h(t) {
            return n(t).closest("tr")
        }
        function et(n) {
            siberia.popup.create("#deposit-history-popup", {
                windowOptions: {
                    title: text.global.titles.popupDepositHistory,
                    width: "800"
                }
            });
            t = n.PatientId;
            i = n.PatientName;
            u = n.LocationId;
            f = n.DoctorId;
            o()
        }
        var c, p, t, i, s, l, a, u, f, w = function() {
            return {
                patientId: t,
                patientName: i
            }
        }, b = function() {
            if (c = n("#deposit-history-popup"),
            p = n("#add-deposit-history-item-popup"),
            s = n("#deposit-grid").data("kendoGrid"),
            l = n("#patient-list-grid").data("kendoGrid"),
            a = n("#deposit-history-popup").data("receipt-url"),
            c.length != 0) {
                if (n("#btnDeposits").length > 0)
                    ft();
                else {
                    n("#patient-list-grid").on("click", ".js-show-deposit-history", function(r) {
                        var f = h(n(r.currentTarget))
                          , u = l.dataItem(f);
                        t = u.id;
                        i = u.FirstName.concat(" ", u.LastName);
                        y()
                    });
                    n("#BookedProceduresReportGrid").on("click", ".js-show-deposit", function(r) {
                        var e = h(n(r.currentTarget))
                          , u = n(r.delegateTarget).data("kendoGrid")
                          , f = u.dataItem(e);
                        t = f.PatientId;
                        i = f.PatientFullName;
                        y(function() {
                            u.dataSource.read()
                        })
                    })
                }
                s.dataSource.bind("requestEnd", g);
                n("#deposit-grid").on("click", ".js-deposit-receipt", d);
                k();
                n("#btnAddDepositTransaction").on("click", nt);
                n("#btnRefund").on("click", ut)
            }
        };
        return {
            init: b,
            getCurrentPatient: w,
            openDepositHistoryPopup: et
        }
    }();
    n(document).ready(function() {
        siberia.depositHistory.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.printing.common");
    siberia.printing.common = function() {
        function s() {
            window.location.origin || (window.location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : ""))
        }
        function h(n, i) {
            t(siberia.config.print.documentType.PatientLabel, n, i)
        }
        function c(n, i) {
            t(siberia.config.print.documentType.ContactLabel, n, i)
        }
        function l(n, i) {
            t(siberia.config.print.documentType.CompanyLabel, n, i)
        }
        function t(n, t, r) {
            var o = siberia.config.print.urlSettings[n].pdfUrlFormat
              , u = kendo.format(o, t, r)
              , s = function(i) {
                f(i, n, t, r, u, null)
            }
              , h = function(i) {
                e(i, n, t, r, u, null)
            };
            siberia.config.print.printingMiddlewareEnabled === "True" ? i(s, h) : window.open(u, "_blank")
        }
        function a(n) {
            siberia.printing.common.print(siberia.config.print.documentType.Pathology, null, null, n)
        }
        function v(n) {
            siberia.printing.common.print(siberia.config.print.documentType.Imaging, null, null, n)
        }
        function y(n, t) {
            siberia.printing.common.print(siberia.config.print.documentType.Envelope, t, null, n)
        }
        function p(n, t, i) {
            siberia.printing.common.print(siberia.config.print.documentType.DvaInvoice, t, i, n)
        }
        function w(n, t, i) {
            siberia.printing.common.print(siberia.config.print.documentType.BulkBillInvoice, t, i, n)
        }
        function b(n, t, r) {
            var o = Array.prototype.slice.call(arguments, 3), u = [siberia.config.print.urlSettings[n].urlFormat], f;
            u = u.concat(o);
            u.push(Date.now());
            f = [siberia.config.print.urlSettings[n].pdfUrlFormat];
            f = f.concat(o);
            var s = kendo.format.apply(this, u)
              , e = kendo.format.apply(this, f)
              , h = function(i) {
                d(n, i, s, e, t, r)
            }
              , c = function(i) {
                g(i, n, s, e, t, r)
            };
            siberia.config.print.printingMiddlewareEnabled === "True" ? i(h, c) : (window.open(e, "_blank"),
            t && t())
        }
        function i(n, t) {
            var i, r;
            navigator && navigator.platform && navigator.platform.indexOf("Mac") === 0 ? (i = function() {
                t(!0)
            }
            ,
            r = function() {
                t(!1)
            }
            ) : (i = function() {
                n(!0)
            }
            ,
            r = function() {
                n(!1)
            }
            );
            k(i, r)
        }
        function k(t, i) {
            siberia.popup.create(".js-print-popup", {
                clear: r,
                init: function() {
                    var r, u;
                    n(".js-print-popup-connecting").show();
                    r = new Image;
                    r.onload = function() {
                        n(".js-print-popup").data("kendoWindow").close();
                        t()
                    }
                    ;
                    r.onerror = function() {
                        n(".js-print-popup").data("kendoWindow").close();
                        i()
                    }
                    ;
                    u = n(".js-print-popup").data("middleware-ping-url");
                    r.src = u + "?nocache=" + (new Date).getTime()
                },
                ajax: {
                    enabled: !1
                }
            })
        }
        function r() {
            n(".js-print-popup-message").hide();
            n(".js-print-popup-connecting").hide();
            n(".js-print-popup-no-connection").hide();
            n(".js-print-popup-btns").hide();
            n(".js-print-popup .js-popup-submit").hide();
            n(".js-print-popup .js-popup-cancel").hide()
        }
        function u(t, i) {
            siberia.popup.create(".js-print-popup", {
                clear: r,
                success: function() {
                    window.open(t, "_blank");
                    i && i()
                },
                close: function() {
                    i && i()
                },
                init: function() {
                    n(".js-print-popup-connecting").hide();
                    n(".js-print-popup-no-connection").show();
                    n(".js-print-popup-cancel-text").text(n(".js-print-popup-cancel-text").attr("data-text-cancel"));
                    n(".js-print-popup .js-popup-submit").show();
                    n(".js-print-popup .js-popup-cancel").show();
                    n(".js-print-popup-btns").show()
                },
                ajax: {
                    enabled: !1
                }
            })
        }
        function d(n, t, i, r, u, e) {
            var s = o(i), h, c;
            if (s && s.Errors && e) {
                e(s.Errors);
                return
            }
            h = s.Data.JobId;
            c = s.Data.Hash;
            f(t, n, h, c, r, u)
        }
        function f(n, t, i, r, f, e) {
            var s = siberia.config.print.middwareUrlFormat, h = kendo.format(s, siberia.config.print.urlSettings[t].trayId, i, r), o;
            n ? (o = new Image,
            o.src = h,
            e && e()) : u(f, e)
        }
        function g(n, t, i, r, u, f) {
            var s = o(i), h, c;
            if (s && s.Errors && f) {
                f(s.Errors);
                return
            }
            h = s.Data.JobId;
            c = s.Data.Hash;
            e(n, t, h, c, r, u)
        }
        function e(n, t, i, r, f, e) {
            var o = siberia.config.print.macMiddwareUrls[t]
              , s = kendo.format(o, i, r);
            n ? (siberia.common.doPrinting(!0),
            window.location.href = s,
            e && e()) : u(f, e)
        }
        function o(n) {
            var t;
            return jQuery.ajax({
                url: n,
                type: "POST",
                success: function(n) {
                    t = n
                },
                async: !1
            }),
            t
        }
        return {
            init: s,
            print: b,
            printPathology: a,
            printImaging: v,
            printEnvelope: y,
            printDvaInvoice: p,
            printBulkBillInvoice: w,
            printPatientLabel: h,
            printContactLabel: c,
            printCompanyLabel: l
        }
    }();
    n(document).ready(function() {
        siberia.printing.common.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.printing.label");
    siberia.printing.label = function() {
        function e() {
            function t(t, i) {
                t.stopPropagation();
                t.preventDefault();
                var r = n(t.delegateTarget).data("kendoGrid")
                  , u = r.dataItem(n(t.currentTarget).closest("tr"));
                i([u.Id])
            }
            function f(t) {
                t.stopPropagation();
                t.preventDefault();
                var r = n("#btnPrintPatientLabel").attr("data-item-id");
                i([r])
            }
            n("#btnPrintPatientLabel").on("click", f);
            n("#patient-list-grid").on("click", ".js-print-label", function(n) {
                t(n, i)
            });
            n("#contact-list-grid").on("click", ".js-print-label", function(n) {
                t(n, r)
            });
            n("#company-list-grid").on("click", ".js-print-label", function(n) {
                t(n, u)
            });
            o()
        }
        function o() {
            var t = n("#FavoritePrintLabelSettings").data("kendoMultiSelect");
            if (t) {
                n('#printLabelSettings input[type="checkbox"]').on("click", function() {
                    siberia.multiSelect.clear(t)
                });
                t.bind("change", function(t) {
                    var i = t.sender.dataItems()[0];
                    i ? n.each(i.Settings, function(t, i) {
                        var r = n("#PrintSettings_" + t);
                        r.length > 0 && r.prop("checked", i)
                    }) : n('#printLabelSettings input[type="checkbox"]').each(function(t, i) {
                        n(i).prop("checked", !1)
                    })
                })
            }
        }
        function i(n) {
            t({
                patientIds: n
            })
        }
        function r(n) {
            t({
                contactIds: n
            })
        }
        function u(n) {
            t({
                companyIds: n
            })
        }
        function t(n) {
            var t = [], i;
            n.patientIds && n.patientIds.length > 0 && (t = t.concat(n.patientIds.map(function(n) {
                return "Patient_" + n
            })));
            n.contactIds && n.contactIds.length > 0 && (t = t.concat(n.contactIds.map(function(n) {
                return "Person_" + n
            })));
            n.companyIds && n.companyIds.length > 0 && (t = t.concat(n.companyIds.map(function(n) {
                return "Company_" + n
            })));
            i = siberia.config.print.urlSettings[siberia.config.print.documentType.PatientLabel].urlFormat;
            s(t, i, function(n) {
                siberia.printing.common.printPatientLabel(n.JobId, n.Hash)
            })
        }
        function s(t, i, r) {
            siberia.popup.create("#print-label-settings-popup", {
                windowOptions: {
                    title: text.global.titles.popupPrintLabelSettings,
                    width: "800"
                },
                customSubmitUrl: i,
                clear: function() {
                    if (siberia.multiSelect.clearValue("#FavoritePrintLabelSettings"),
                    siberia.multiSelect.attachValue("#PrintSettings_ListOfIds", [], "Id", !1),
                    n("#PrintSettings_NumberOfCopies").data("kendoNumericTextBox").value(1),
                    t) {
                        var i = n("#print-label-settings-popup").data("prefill-patient-label-data-url");
                        h(i, t)
                    }
                    n('#printLabelSettings input[type="checkbox"]').each(function(t, i) {
                        n(i).prop("checked", !1)
                    })
                },
                success: function(n) {
                    r && r(n.Data)
                }
            })
        }
        function h(t, i) {
            var u = n("#PrintSettings_ListOfIds").data("kendoMultiSelect")
              , r = n(".js-global-spinner-container");
            r.spinner(!0);
            n.ajax({
                type: "POST",
                url: t,
                contentType: "application/json",
                data: JSON.stringify({
                    ids: i
                }),
                success: function(n) {
                    siberia.multiSelect.attach(u, n, "Id", !1)
                },
                error: function() {
                    siberia.validation.showGridNetworkError(!0)
                },
                complete: function() {
                    r.spinner(!1)
                }
            })
        }
        var f = function(n) {
            return {
                text: n.filter.filters[0] != undefined ? n.filter.filters[0].value : "",
                patients: !0,
                contacts: !0,
                companies: !0
            }
        };
        return {
            init: e,
            labelSettingsPopup: t,
            patientLabelSettingsPopup: i,
            contactLabelSettingsPopup: r,
            companyLabelSettingsPopup: u,
            filterLabelIds: f
        }
    }();
    n(document).ready(function() {
        siberia.printing.label.init()
    })
}(jQuery),
function() {
    siberia.ensureObject("siberia.printing.invoice");
    siberia.printing.invoice = function() {
        function n(n, t, i) {
            n ? siberia.printing.common.printDvaInvoice(t, i, i) : siberia.printing.common.printBulkBillInvoice(t, i, i)
        }
        return {
            printInvoice: n
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.invoiceFeeEstimateCommon");
    siberia.invoiceFeeEstimateCommon = function() {
        function f(n, t, i) {
            t && t.enable(n);
            i()
        }
        function e(t, i, r) {
            var u, c, v;
            siberia.grid.initClientGrid({
                gridSelector: t,
                addSelector: ".js-add-item, .js-add-assistant-item",
                deleteSelector: ".js-client-grid-delete",
                addAction: l(i),
                deleteAction: r ? null : i,
                customDelete: r,
                confirmText: r ? "" : text.global.confirms.deleteInvoiceFeeEstimateItem
            });
            n(t).on("click", ".js-quick-button", function(t) {
                t.preventDefault();
                n(t.delegateTarget).attr("data-attached-item-number", n(t.currentTarget).attr("data-item-number"));
                i()
            });
            n(t).on("click", ".js-item-gst", s(i));
            n(t).on("click", ".js-item-select", o(i));
            var y = n(t).find(".js-mpr-rule")
              , e = n(t).find(".js-mpr-for-private-fees")
              , h = n(t).find(".js-mpr-for-safety-net")
              , a = y.is(":checked");
            e.prop("disabled", !a);
            h.prop("disabled", !a);
            u = n(t).find('.js-mpr-rule-type[data-role="dropdownlist"]').data("kendoDropDownList");
            u && (u.bind("change", function() {
                i()
            }),
            u.enable(a));
            n(t).on("click", ".js-mpr-rule", function() {
                e.prop("disabled") && e.prop("disabled", !1);
                h.prop("disabled") && h.prop("disabled", !1);
                f(this.checked, u, i);
                e.prop("disabled", !this.checked);
                h.prop("disabled", !this.checked)
            });
            n(t).on("click", ".js-mpr-for-private-fees,.js-mpr-for-safety-net", function() {
                i()
            });
            c = n(".js-location-block").find("#LocationId");
            c && c.parent().find(".k-dropdown-wrap").toggleClass("k-state-disabled", c.attr("readonly") === "readonly");
            v = n('.js-known-gap-amount[data-role="numerictextbox"]').data("kendoNumericTextBox");
            v && v.bind("change", i)
        }
        function o(t) {
            return function(i) {
                var r = n(i.currentTarget).closest(".k-grid")
                  , u = r.data("kendoGrid")
                  , f = u.dataItem(n(i.currentTarget).closest("tr"));
                f.IsSelectedForPayment = n(i.currentTarget).prop("checked");
                t()
            }
        }
        function s(t) {
            return function(i) {
                var r = n(i.currentTarget).closest(".k-grid")
                  , u = r.data("kendoGrid")
                  , f = u.dataItem(n(i.currentTarget).closest("tr"));
                f.IsGst = n(i.currentTarget).prop("checked");
                t()
            }
        }
        function h(t) {
            var r = n(t).data("kendoDropDownList");
            r && (r.bind("change", function(n) {
                i(n.sender)
            }),
            r.trigger("change"))
        }
        function i(n) {
            y(n);
            c(n)
        }
        function c(t) {
            var u = t.dataItem(), r = n('[id$="NoReferralReasonId"]'), i;
            r.length && (i = r.data("kendoDropDownList"),
            u.Id ? (i.select(0),
            i.enable(!1),
            n(".js-no-referral-reason-dropdown").hide()) : (i.enable(),
            n(".js-no-referral-reason-dropdown").show()))
        }
        function l(t) {
            return function(i, u) {
                var f = n(u.currentTarget).closest(".k-grid")
                  , e = f.data("kendoGrid")
                  , c = f.data("item-popup-content-url")
                  , l = f.data("assistant-item-popup-content-url")
                  , o = f.attr("data-find-item-url")
                  , s = f.attr("data-item-total-url")
                  , h = f.attr("data-mbs-item-data-url")
                  , a = n(u.currentTarget);
                a.hasClass("js-assistant") ? siberia.itemFee.initFeePopup(i, e, l, o, s, h, r(e, t)) : siberia.itemFee.initFeePopup(i, e, c, o, s, h, r(e, t))
            }
        }
        function r(n, t) {
            return function(i) {
                var r, f, u, e;
                if (i.IsSelectedForPayment = !0,
                r = n.wrapper.find(".js-mpr-rule"),
                i.ItemNumber && r.length > 0 && (f = r.is(":checked"),
                !f && i.CanApplyMpr && (u = kendo.parseDate(i.DateOfService, siberia.config.formats.dateTimeFormat),
                e = n.dataSource.data().filter(function(n) {
                    if (n.CanApplyMpr && n.DateOfService) {
                        var t = kendo.parseDate(n.DateOfService, siberia.config.formats.dateTimeFormat);
                        return t.getFullYear() === u.getFullYear() && t.getMonth() === u.getMonth() && t.getDate() === u.getDate()
                    }
                    return n.CanApplyMpr
                }),
                e.length === 2))) {
                    siberia.confirmationPopup.open("#mpr-confirmation-popup", function() {
                        r.trigger("click")
                    }, function() {
                        t()
                    });
                    return
                }
                t()
            }
        }
        function a(t) {
            u(t);
            n('input[name$="DoctorId"]', t).on("change", function() {
                u(t)
            })
        }
        function u(t) {
            var r = n('input[name$="DoctorId"]', t).data("kendoDropDownList"), i;
            r && (i = r.dataItem(),
            n(".js-ninety-day-gap-billing-option", t).toggle(!i || i.ShowNinetyDayGapOption))
        }
        function v(i) {
            t(i);
            n('input[type="radio"][name$="AccountTypeId"]', i).on("change", function() {
                t(i)
            })
        }
        function t(n) {
            n.find(".js-health-fund-billing").is(":checked") ? (n.find(".js-out-patient-mode").attr("disabled", !0),
            n.find(".js-out-patient-mode").prop("checked", !1).trigger("change"),
            n.find(".js-in-patient-mode").prop("checked", !0).trigger("change")) : n.find(".js-out-patient-mode").removeAttr("disabled")
        }
        function y(t) {
            var i = t.dataItem();
            i.IsValid ? siberia.warnings.container.hideWarning(null, "#referral-is-outdated-warning") : siberia.warnings.container.showWarning(null, "#referral-is-outdated-warning");
            var r = {
                Id: i.Id,
                ProviderNumber: i.ProviderNumber,
                StartDate: i.StartDate,
                ExpirationDate: i.ExpirationDate
            }
              , u = n("#template-referral-preview").html()
              , f = kendo.template(u)
              , e = f(r);
            n(".js-referral-preview").html(e)
        }
        function p(t) {
            var i = n(t).attr("data-attached-item-number");
            return n(t).attr("data-attached-item-number", ""),
            i
        }
        function w(t) {
            var i = []
              , r = t.dataSource.data();
            return n.each(r, function(n, t) {
                t.ItemNumber && i.push({
                    Id: t.Id,
                    ItemNumber: t.ItemNumber,
                    DateOfService: t.DateOfService,
                    UserFee: t.UserFee,
                    DiscountAmount: t.DiscountAmount,
                    DiscountPercent: t.DiscountPercent,
                    IsGst: t.IsGst,
                    AssistantId: t.AssistantId,
                    ItemPaymentOptionId: t.ItemPaymentOptionId,
                    Quantity: t.Quantity,
                    NumberOfFields: t.NumberOfFields,
                    GenericScheduleId: t.GenericScheduleId,
                    AssociatedItemNumber: t.AssociatedItemNumber,
                    ItemTypeId: t.ItemTypeId,
                    ExtrasCoverItemPrivateFeeId: t.ExtrasCoverItemPrivateFeeId,
                    ExtrasCoverItemServiceTypeId: t.ExtrasCoverItemServiceTypeId,
                    rebateFee: t.RebateFee,
                    NumberOfPatients: t.NumberOfPatients
                })
            }),
            i
        }
        function b(n) {
            var i = null, t;
            return n && (t = n.wrapper.find(".js-mpr-rule"),
            t.length && t.prop("checked") && (i = n.wrapper.find('.js-mpr-rule-type[data-role="dropdownlist"]').data("kendoDropDownList").value())),
            i
        }
        return {
            initReferralEvents: h,
            onChangeReferral: i,
            processInOutPatientMode: t,
            initNinetyDayGapToggle: a,
            initDisableOutPatientModeForEclipse: v,
            getItems: w,
            getAttachedItemNumber: p,
            initGridEvents: e,
            getMprTypeId: b
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.appointmentsHistory");
    siberia.appointmentsHistory = function() {
        function f() {
            var i = n("#AppointmentsHistory_PatientId").data("kendoMultiSelect");
            i && i.bind("change", t);
            e()
        }
        function u() {
            r = i.future;
            n(".js-appointments-filter-future").toggleClass("selected", !0);
            n(".js-appointments-filter-all").toggleClass("selected", !1);
            n(".js-appointments-filter-past").toggleClass("selected", !1)
        }
        function e() {
            n(".js-appointments-filter-all").on("click", function() {
                r = i.all;
                n(this).toggleClass("selected", !0);
                n(".js-appointments-filter-future").toggleClass("selected", !1);
                n(".js-appointments-filter-past").toggleClass("selected", !1);
                t()
            });
            n(".js-appointments-filter-future").on("click", function() {
                u();
                t()
            });
            n(".js-appointments-filter-past").on("click", function() {
                r = i.past;
                n(this).toggleClass("selected", !0);
                n(".js-appointments-filter-future").toggleClass("selected", !1);
                n(".js-appointments-filter-all").toggleClass("selected", !1);
                t()
            })
        }
        function t() {
            var t = n("#appointments-history-grid"), i = t.data("kendoGrid"), r;
            i && (r = n("#AppointmentsHistory_PatientId").data("kendoMultiSelect"),
            r && r.value()[0] ? (i.dataSource.page(1),
            t.show(),
            n("#no-appointments").hide(),
            n(".js-appointment-search").addClass("appt-search-with-grid")) : (t.hide(),
            n("#no-appointments").show(),
            n(".js-appointment-search").removeClass("appt-search-with-grid"),
            i.dataSource.data([])))
        }
        function o() {
            var i = ""
              , t = n("#AppointmentsHistory_PatientId").data("kendoMultiSelect");
            return t && t.value()[0] && (i = t.value()[0]),
            {
                patientId: i,
                filterType: r
            }
        }
        function s(i) {
            siberia.popup.create("#appointments-history-popup", {
                windowOptions: {
                    title: text.global.titles.popupAppointmentHistory,
                    width: "900"
                },
                clear: function() {
                    var r, f;
                    i ? (r = [],
                    r.push({
                        PatientId: i.PatientId,
                        PatientFullName: i.PatientFullName,
                        HighlightedFullName: i.PatientFullName,
                        PatientDateOfBirth: i.PatientDateOfBirth,
                        PatientIsInactive: i.PatientIsInactive,
                        PatientSearchDisplayText: i.PatientFullName + " " + i.PatientDateOfBirth
                    }),
                    siberia.multiSelect.attachValue("#AppointmentsHistory_PatientId", r, "PatientId")) : siberia.multiSelect.clearValue("#AppointmentsHistory_PatientId");
                    i && (f = n("#AppointmentsHistory_PatientId").data("kendoMultiSelect"),
                    f && f.readonly(i.CanEditPatient !== !0));
                    u();
                    t()
                }
            })
        }
        var i = {
            all: 1,
            future: 2,
            past: 3
        }
          , r = i.future;
        return {
            init: f,
            initAppointmentsHistoryPopup: s,
            onReadRequest: o
        }
    }();
    n(document).ready(function() {
        siberia.appointmentsHistory.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.dailyBanking");
    siberia.dailyBanking = function() {
        function i() {
            if (t = n("#daily-banking-report-list-grid").data("kendoGrid"),
            t) {
                t.bind("dataBound", e);
                n(".js-global-spinner-container").spinner(!0);
                t.dataSource.read();
                n(".js-reset-daily-banking-filter").on("click", u);
                n(".js-filter-daily-banking").on("click", r);
                siberia.validation.initValidationFor(n("#js-daily-banking-filter").find("form"), n("#js-daily-banking-filter").find("form .js-validate"))
            }
        }
        function r() {
            t.dataSource.filter({})
        }
        function u() {
            n("#js-daily-banking-filter #StartDate").val("");
            n("#js-daily-banking-filter #EndDate").val("");
            n("#DoctorsIds").data("kendoMultiSelect").value([]);
            t.dataSource.filter({})
        }
        function f() {
            var t = n("#js-daily-banking-filter #StartDate").val()
              , i = n("#js-daily-banking-filter #EndDate").val()
              , r = n("#js-daily-banking-filter #DoctorsIds").data("kendoMultiSelect").value();
            return {
                StartDate: t,
                EndDate: i,
                DoctorsIds: r
            }
        }
        function e() {
            n(".js-global-spinner-container").spinner(!1)
        }
        var t;
        return {
            init: i,
            getDailyBankingFilter: f
        }
    }();
    n(document).ready(function() {
        siberia.dailyBanking.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.dailyBanking.report");
    siberia.dailyBanking.report = function() {
        function b() {
            var i = []
              , r = t.dataSource.data();
            return n.each(r, function() {
                if (this.PaymentIds)
                    for (var n = 0; n < this.PaymentIds.length; n++)
                        i.push(this.PaymentIds[n])
            }),
            i
        }
        function h() {
            var i = []
              , r = t.dataSource.data();
            return n.each(r, function() {
                if (this.PaymentIds && this.IsReconciled)
                    for (var n = 0; n < this.PaymentIds.length; n++)
                        i.push(this.PaymentIds[n])
            }),
            i
        }
        function k() {
            var i = []
              , r = t.dataSource.data();
            return n.each(r, function() {
                this.DepositTransactionId && i.push(this.DepositTransactionId)
            }),
            i
        }
        function c() {
            var i = []
              , r = t.dataSource.data();
            return n.each(r, function() {
                this.DepositTransactionId && this.IsReconciled && i.push(this.DepositTransactionId)
            }),
            i
        }
        function l(t) {
            var i = n("#FromDate"), r, u;
            return i.length > 0 && (r = i.data("kendoDatePicker").value(),
            t.FromDate = kendo.toString(r, siberia.config.formats.dateFormat),
            u = n("#ToDate").data("kendoDatePicker").value(),
            t.ToDate = kendo.toString(u, siberia.config.formats.dateFormat),
            t.DoctorIds = n("#DoctorsIds").data("kendoMultiSelect").value(),
            t.LocationIds = n("#LocationsIds").data("kendoMultiSelect").value(),
            t.PaymentTypeIds = n("#PaymentTypeIds").data("kendoMultiSelect").value(),
            t.IsMedicareIncluded = n("#IsMedicareIncluded").prop("checked"),
            t.IsEclipseIncluded = n("#IsEclipseIncluded").prop("checked"),
            t.IsDepositIncluded = n("#IsDepositIncluded").prop("checked")),
            t
        }
        function d() {
            siberia.warnings.container.showWarning("#daily-banking-filter-info-container", "#more-payments-exist-info")
        }
        function g() {
            siberia.warnings.container.showWarning("#daily-banking-filter-info-container", "#more-deposit-transactions-exist-info")
        }
        function a() {
            siberia.warnings.container.hideWarning("#daily-banking-filter-info-container", "#more-payments-exist-info")
        }
        function v() {
            siberia.warnings.container.hideWarning("#daily-banking-filter-info-container", "#more-deposit-transactions-exist-info")
        }
        function nt() {
            if (t = n("#reconcile-invoice-list-grid").data("kendoGrid"),
            t) {
                var i = n("#daily-billing-container");
                e = i.data("redirect-to-list-url");
                o = i.data("load-totals-url");
                s = i.data("refresh-totals-url");
                t.bind("dataBound", ut);
                t.bind("detailInit", tt);
                n(".js-apply-daily-billing-filter").click(ft);
                n(".js-reset-daily-billing-filter").click(et);
                r("#CardActual");
                r("#CreditCardActual");
                r("#ChequeActual");
                r("#CashActual");
                r("#DepositActual");
                r("#BankTransferActual");
                r("#ExtrasCoverActual");
                n(".js-select-all-invoices").click(function(i) {
                    var r = n(i.target).prop("checked") === !0, f = t.dataItems(), u;
                    n.each(f, function() {
                        this.IsAutoReconciled || (this.IsReconciled = r)
                    });
                    u = n(".js-reconcile-invoice-checkbox");
                    n.each(u, function() {
                        n(this).prop("checked", r)
                    });
                    y()
                });
                n("body").on("click", ".js-reconcile-invoice-checkbox", function(i) {
                    var r = n(i.target).prop("checked") === !0
                      , u = n(i.target).closest("tr")
                      , e = t.dataItem(u);
                    e.IsReconciled = r;
                    f()
                });
                siberia.popup.create("#daily-report-summary-popup", {
                    openPopupBtn: ".js-open-report-summary-popup",
                    submitUrlAttr: "data-submit-url",
                    windowOptions: {
                        title: text.global.titles.popupDailyReportSummary,
                        width: "870"
                    },
                    clear: function() {
                        it();
                        p(!0)
                    },
                    extraData: function() {
                        var t = {
                            DailyBankingReportId: n("#DailyBankingReportId").val(),
                            FilteredPaymentIds: b(),
                            PaymentsToReconcileIds: h(),
                            FilteredDepositTransactionIds: k(),
                            DepositTransactionToReconcileIds: c()
                        }
                          , i = !0;
                        return t.DailyBankingReportId && (i = !1),
                        i && l(t),
                        t
                    },
                    success: function() {
                        n(".js-global-spinner-container").spinner(!0);
                        window.location.href = e
                    }
                });
                f();
                w()
            }
        }
        function tt(t) {
            var i = n(t.detailRow).find('div[data-role="grid"]').data("kendoGrid");
            i && t.data.GroupInvoices.length > 0 && i.dataSource.data(t.data.GroupInvoices)
        }
        function y() {
            var i = 0
              , r = 0
              , u = t.dataSource.data();
            n.each(u, function() {
                this.IsReconciled && (this.AmountBilledMoney && (i += this.AmountBilledMoney),
                this.AmountReceivedMoney && (r += this.AmountReceivedMoney))
            });
            n("#total-amount-billed-footer").text(kendo.toString(i, "c2"));
            n("#total-amount-received-footer").text(kendo.toString(r, "c2"))
        }
        function r(t) {
            var i = n(t).data("kendoNumericTextBox");
            i && i.bind("change", function() {
                p(!1)
            })
        }
        function it() {
            n("#reportIdForPrint").val(n("#DailyBankingReportId").val())
        }
        function p(t) {
            var i = {
                PaymentsToReconcileIds: h(),
                DepositTransactionToReconcileIds: c()
            }, r, u;
            t ? (r = o,
            i.DailyBankingReportId = n("#DailyBankingReportId").val(),
            l(i)) : (r = s,
            i.CardActual = n("#CardActual").val(),
            i.CreditCardActual = n("#CreditCardActual").val(),
            i.ChequeActual = n("#ChequeActual").val(),
            i.CashActual = n("#CashActual").val(),
            i.DepositActual = n("#DepositActual").val(),
            i.BankTransferActual = n("#BankTransferActual").val(),
            i.ExtrasCoverActual = n("#ExtrasCoverActual").val());
            u = n("#daily-report-summary-popup form");
            n("#daily-report-summary-popup").spinner(!0);
            n.ajax({
                type: "POST",
                contentType: "application/json",
                url: r,
                data: JSON.stringify(i),
                success: function(n) {
                    siberia.validation.processAjaxErrors(u, n.Errors) && rt(n, t)
                },
                error: function() {
                    siberia.validation.showFormNetworkError(u)
                },
                complete: function() {
                    n("#daily-report-summary-popup").spinner(!1)
                }
            })
        }
        function rt(t, r) {
            n("#card-received").text(t.CardReceived);
            n("#credit-card-received").text(t.CreditCardReceived);
            n("#cheque-received").text(t.ChequeReceived);
            n("#cash-received").text(t.CashReceived);
            n("#extras-cover-received").text(t.ExtrasCoverReceived);
            n("#deposit-received").text(t.DepositReceived);
            n("#bank-transfer-received").text(t.BankTransferReceived);
            i("#card-difference", t.CardDifference);
            i("#credit-card-difference", t.CreditCardDifference);
            i("#cheque-difference", t.ChequeDifference);
            i("#cash-difference", t.CashDifference);
            i("#deposit-difference", t.DepositDifference);
            i("#bank-transfer-difference", t.BankTransferDifference);
            i("#extras-cover-difference", t.ExtrasCoverDifference);
            r && (n("#card-actual").text(kendo.toString(t.CardActual, "c2")),
            n("#credit-card-actual").text(kendo.toString(t.CreditCardActual, "c2")),
            n("#cheque-actual").text(kendo.toString(t.ChequeActual, "c2")),
            n("#cash-actual").text(kendo.toString(t.CashActual, "c2")),
            n("#deposit-actual").text(kendo.toString(t.DepositActual, "c2")),
            n("#bank-transfer-actual").text(kendo.toString(t.BankTransferActual, "c2")),
            n("#extras-cover-actual").text(kendo.toString(t.ExtrasCoverActual, "c2")),
            u("#CardActual", t.CardActual),
            u("#CreditCardActual", t.CreditCardActual),
            u("#ChequeActual", t.ChequeActual),
            u("#CashActual", t.CashActual),
            u("#DepositActual", t.DepositActual),
            u("#BankTransferActual", t.BankTransferActual),
            u("#ExtrasCoverActual", t.ExtrasCoverActual),
            n("#CardNotes").val(t.CardNotes),
            n("#CreditCardNotes").val(t.CreditCardNotes),
            n("#ChequeNotes").val(t.ChequeNotes),
            n("#CashNotes").val(t.CashNotes),
            n("#DepositNotes").val(t.DepositNotes),
            n("#BankTransferNotes").val(t.BankTransferNotes),
            n("#ExtrasCoverNotes").val(t.ExtrasCoverNotes),
            n("#card-notes").text(t.CardNotes),
            n("#credit-card-notes").text(t.CreditCardNotes),
            n("#cheque-notes").text(t.ChequeNotes),
            n("#cash-notes").text(t.CashNotes),
            n("#deposit-notes").text(t.DepositNotes),
            n("#bank-transfer-notes").text(t.BankTransferNotes),
            n("#extras-cover-notes").text(t.ExtrasCoverNotes),
            n("#total-amount-billed").text(t.TotalAmountBilled),
            n("#private-amount-billed").text(t.PrivateAmountBilled),
            n("#company-amount-billed").text(t.CompanyAmountBilled),
            n("#workcover-claim-amount-billed").text(t.WorkCoverClaimAmountBilled),
            n("#dva-amount-billed").text(t.DvaAmountBilled),
            n("#bulkbill-amount-billed").text(t.BulkBillAmountBilled),
            n("#ninety-day-gap-amount-billed").text(t.NinetyDayGapAmountBilled),
            n("#health-fund-no-gap-amount-billed").text(t.HealthFundNoGapAmountBilled),
            n("#health-fund-known-gap-amount-billed").text(t.HealthFundKnownGapAmountBilled));
            n("#deposit-applied").text(kendo.toString(t.DepositApplied, "c2"));
            n("#DepositApplied").val(t.DepositApplied);
            n("#medicare-received").text(t.MedicareReceived);
            n("#eclipse-received").text(t.EclipseReceived);
            n("#total-received").text(t.ReceivedTotal);
            n("#total-actual").text(t.ActualTotal);
            i("#total-difference", t.DifferenceTotal)
        }
        function u(t, i) {
            var r = n(t).data("kendoNumericTextBox");
            r && r.value(i)
        }
        function i(t, i) {
            var r = n(t);
            r.text(i);
            r.toggleClass("diff-col-minus", i && i.indexOf("-") >= 0)
        }
        function f() {
            var t = !1
              , i = n(".js-reconcile-invoice-checkbox");
            i.length > 0 && (t = !0,
            n.each(i, function() {
                return n(this).prop("checked") !== !0 ? (t = !1,
                !1) : !0
            }));
            n(".js-select-all-invoices").prop("checked", t);
            y()
        }
        function w() {
            t.dataSource.sort({
                field: "TransactionDate",
                dir: "asc"
            })
        }
        function ut() {
            f();
            n(".js-global-spinner-container").spinner(!1);
            n("#reconcile-invoice-list-container").show()
        }
        function ft(i) {
            i.preventDefault();
            n(this).blur();
            n(".js-global-spinner-container").spinner(!0);
            var r = n("#daily-billing-filter-form");
            r.length > 0 && r.ajaxSubmit({
                success: function(n) {
                    a();
                    v();
                    siberia.validation.processAjaxErrors(r, n.Errors) && (n.HasMoreInvoicePayments === !0 && d(),
                    n.HasMoreDepositTransactions === !0 && g(),
                    t.dataSource.data(n.DailyTransactions),
                    t.dataSource.page(0),
                    w())
                },
                error: function() {
                    a();
                    v();
                    siberia.validation.showFormNetworkError(r)
                },
                complete: function() {
                    n(".js-global-spinner-container").spinner(!1)
                }
            })
        }
        function et(t) {
            t.preventDefault();
            n(this).blur();
            var r = siberia.common.currentLocationDate()
              , i = kendo.toString(r, siberia.config.formats.dateFormat);
            n("#FromDate").data("kendoDatePicker").value(i);
            n("#ToDate").data("kendoDatePicker").value(i);
            siberia.multiSelect.clearValue("#DoctorsIds");
            siberia.multiSelect.clearValue("#LocationsIds");
            siberia.multiSelect.clearValue("#PaymentTypeIds");
            siberia.multiSelect.clearValue("#FavoriteReportFilters");
            n("#IsMedicareIncluded").prop("checked", !1);
            n("#IsEclipseIncluded").prop("checked", !1);
            n("#IsDepositIncluded").prop("checked", !0);
            siberia.validation.clearValidationErrors(n("#daily-billing-filter-form"))
        }
        var t, e, o, s;
        return {
            init: nt
        }
    }();
    n(document).ready(function() {
        siberia.dailyBanking.report.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.accountHoldersReport");
    siberia.accountHoldersReport = function() {
        function s(u) {
            var s = n(u.currentTarget).prop("checked") === !0, f;
            n(this)[0] && (t = "#" + n(u.currentTarget).closest("div").attr("id"),
            i = n(t),
            r = n(t).data("kendoGrid"),
            i.find(".js-bulk-pay-debt-report-checkbox").each(function() {
                n(this).prop("checked", s)
            }),
            f = t.split("invoice-debt-details-template-")[1],
            o("#BulkPayAgedDebtorsBtn-" + f),
            e(i, f))
        }
        function f(u) {
            t = "#" + n(u.currentTarget).closest("div")[0].id;
            i = n(t);
            r = n(t).data("kendoGrid");
            var f = t.split("invoice-debt-details-template-")[1];
            h(i);
            o("#BulkPayAgedDebtorsBtn-" + f);
            e(i, f)
        }
        function h(t) {
            var i = t.find(".js-bulk-pay-debt-report-checkbox").length
              , r = t.find(".js-bulk-pay-debt-report-checkbox:checked").length;
            n(".js-bulk-pay-debt-report").prop("checked", i === r)
        }
        function e(t, i) {
            var u = 0;
            t.find(".js-bulk-pay-debt-report-checkbox:checked").each(function(t, i) {
                var f = r.dataItem(n(i).closest("tr"));
                u += f.Debt != null ? Number(f.Debt.replace("$", "")) : 0
            });
            n("#bulk-pay-aged-debtor-footer-" + i).text(kendo.toString(u, "c2"))
        }
        function c(u) {
            var e;
            u.preventDefault();
            var o = n("#" + u.target.id).data("accountholdername")
              , h = n("#" + u.target.id).data("accountholdertypeid")
              , c = n("#" + u.target.id).data("accountholderid")
              , y = u.target.id
              , l = y.split("BulkPayAgedDebtorsBtn-")[1];
            t = "#invoice-debt-details-template-" + l;
            i = n(t);
            r = n(t).data("kendoGrid");
            var p = 0
              , f = []
              , v = []
              , s = "";
            i.find(".js-bulk-pay-debt-report-checkbox:checked").each(function(t, i) {
                var u = r.dataItem(n(i).closest("tr"));
                f.push(u.InvoiceId);
                v.push(u.InvoiceNumber)
            });
            n(".radio-grp-aged-debtors div input:checked") && (s = n(".radio-grp-aged-debtors div input:checked").parent().text());
            n("#AsAt").val() != "" && (s = n('label[for="AsAt"]').text() + n("#AsAt").val());
            f.length > 0 && (e = siberia.invoicePaymentsPopup.open({
                popupSelector: "#bulk-pay-aged-debtors-popup",
                popupTitle: text.global.titles.bulkPay,
                invoiceData: {
                    "BulkPayAgedDebtors.InvoiceIds": f,
                    "BulkPayAgedDebtors.AccountHolderType": h,
                    "BulkPayAgedDebtors.AccountHolderName": o,
                    "BulkPayAgedDebtors.AccountHolderId": c
                },
                clearPopup: function(t) {
                    n(".js-bulk-pay-patient-field", t).text(o);
                    n(".js-bulk-pay-invoiced-total-field", t).text(kendo.toString(p, "c2"));
                    n(".js-bulk-pay-invoices-numbers-field", t).text(v.join(", "))
                },
                successAction: function(i, r, u) {
                    e.spinner(!0);
                    u.cancelClose = !0;
                    setTimeout(function() {
                        if (n(t).data("kendoGrid").dataSource.read(),
                        a(l),
                        n(r.currentTarget).hasClass("js-print-invoices")) {
                            u.cancelClose = !0;
                            var v = n.map(f, function(n) {
                                return "invoiceIds=" + n
                            })
                              , y = n("#bulk-pay-aged-debtors-popup").attr("data-print-bulk-pay-statement-url") + "?" + v.join("&") + "&accountHolderId=" + c + "&accountHolderName=" + o + "&accountHolderType=" + h + "&selectedDateRange=" + s;
                            i.newTab.location.href = y
                        }
                        e.spinner(!1);
                        e.getKendoWindow().close()
                    }, 1500)
                },
                error: function() {}
            }))
        }
        function l() {
            return "<a href='#: InvoiceUrl #' target='_blank'>#: InvoiceNumber #<\/a>"
        }
        function a(t) {
            var i = n("#BulkPayAgedDebtorsBtn-" + t);
            i.toggleClass("btn-disabled");
            n("#bulk-pay-aged-debtor-footer-" + t).text(kendo.toString(0, "c2"))
        }
        function v() {
            if (n(".js-bulk-pay-debt-report").length == 0)
                n("#account-holders-debt-grid").on("click", ".js-bulk-pay-debt-report", s);
            if (n(".js-bulk-pay-aged-debtors-button").length == 0)
                n("#account-holders-debt-grid").on("click", ".js-bulk-pay-aged-debtors-button", c);
            return "<input type ='checkbox' class='js-bulk-pay-debt-report' id='#: Name #' />"
        }
        function y() {
            if (n(".js-bulk-pay-debt-report-checkbox").length == 0)
                n("#account-holders-debt-grid").on("click", ".js-bulk-pay-debt-report-checkbox", f);
            return "#if(CanPay){# <input type='checkbox' class='js-bulk-pay-debt-report-checkbox'/> #}#"
        }
        function o(t) {
            var r = i.find(".js-bulk-pay-debt-report-checkbox:checked").length;
            u = n(t);
            u.toggleClass("btn-disabled", r === 0)
        }
        var i, r, t, u;
        return {
            getInvoiceCellTemplate: l,
            getItemCheckBoxTemplate: y,
            getHeaderCheckBoxTemplate: v,
            processBulkPayAgedDebtorInvoiceCheckboxes: f
        }
    }();
    n(document).ready(function() {})
}(jQuery),
function(n) {
    function i() {
        var i = n("#scanned-document-errors-grid").data("kendoGrid");
        i != null && (siberia.grid.initClientGrid({
            gridSelector: "#scanned-document-errors-grid",
            deleteAction: r
        }),
        i.bind("dataBound", function() {
            t()
        }))
    }
    function r(i) {
        var r = n("#scanned-document-errors-container").data("delete-document-url");
        r && n.ajax({
            type: "POST",
            url: r,
            contentType: "application/json",
            data: JSON.stringify({
                Id: i.Id
            }),
            success: function() {
                t()
            }
        })
    }
    function t() {
        var t = n("#scanned-document-errors-grid").data("kendoGrid");
        t && (t.dataSource.total() === 0 ? (n("#scanned-document-errors-list-empty").show(),
        n("#scanned-document-errors-container").hide()) : (n("#scanned-document-errors-list-empty").hide(),
        n("#scanned-document-errors-container").show()))
    }
    n(document).ready(function() {
        i()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.commonAddEntities");
    siberia.commonAddEntities = function() {
        function h() {
            n(".js-recipient-container .js-new-contact-for-letter,.js-recipient-cc-container .js-new-contact-for-letter,.js-labrequest-cc-container .js-new-contact-for-letter").click(function() {
                var t = n(this);
                siberia.rightSidePanel.setPanelsZIndex();
                n(window).trigger("rc-open-create-contact-panel", [undefined, function(n) {
                    siberia.rightSidePanel.resetPanelsZIndex();
                    f(t, n)
                }
                , !0, !1])
            });
            n(".js-recipient-container .js-new-contact-for-company,.js-recipient-cc-container .js-new-contact-for-company,.js-labrequest-cc-container .js-new-contact-for-company").click(function() {
                var t = n(this);
                siberia.rightSidePanel.setPanelsZIndex();
                n(window).trigger("rc-open-create-contact-panel", [undefined, function(n) {
                    siberia.rightSidePanel.resetPanelsZIndex();
                    f(t, n)
                }
                , !0, !0])
            });
            n(".js-employer-company-container .js-new-company").click(e);
            n(".js-insurance-company-container .js-new-company").click(e);
            n(".js-recipient-container .js-new-contact-for-interested-party").click(function() {
                siberia.rightSidePanel.setPanelsZIndex();
                n(window).trigger("rc-open-create-contact-panel", [undefined, function(n) {
                    siberia.rightSidePanel.resetPanelsZIndex();
                    o(n)
                }
                , !0, !1])
            });
            n(".js-recipient-container .js-new-company-for-interested-party").click(function() {
                siberia.rightSidePanel.setPanelsZIndex();
                n(window).trigger("rc-open-create-contact-panel", [undefined, function(n) {
                    siberia.rightSidePanel.resetPanelsZIndex();
                    o(n)
                }
                , !0, !0])
            })
        }
        function f(n, t) {
            t.WorkLocations && t.WorkLocations.length ? c(n, t) : l(n, t)
        }
        function c(n, i) {
            var f = n.closest("div.control-grp").find('select[data-role="multiselect"]')
              , r = siberia.contact.convertContactForCommonSearch(i);
            r.Id = u + r.Id;
            r.SearchFields = [i.FirstName, i.LastName];
            r.Text = r.FullName;
            r.Details = "";
            t(f, r)
        }
        function l(n, u) {
            var f = i(u), e;
            f.Id = r + f.Id;
            f.SearchFields = [f.CompanyName];
            f.Text = f.CompanyName;
            f.Details = "";
            e = n.closest("div.control-grp").find('select[data-role="multiselect"]');
            t(e, f)
        }
        function e(r) {
            r.preventDefault();
            siberia.rightSidePanel.setPanelsZIndex();
            n(window).trigger("rc-open-create-contact-panel", [undefined, function(u) {
                siberia.rightSidePanel.resetPanelsZIndex();
                var f = n(r.currentTarget).closest("div.control-grp").find('select[data-role="multiselect"]')
                  , e = i(u);
                t(f, e)
            }
            , !0, !0])
        }
        function o(n) {
            n.WorkLocations && n.WorkLocations.length ? a(n) : v(n)
        }
        function a(i) {
            if (i) {
                var f = i.WorkLocations[i.WorkLocations.length - 1]
                  , r = siberia.contact.convertContactForCommonSearch(i);
                r.Id = u + r.Id;
                r.DisplayName = r.FullName;
                r.CompanyName = f.Company ? f.Company.Text : "";
                r.SearchFields = [i.FirstName, i.LastName];
                r.Activity = "";
                r.DetailsString = "";
                t(n("#InterestedParty_Id"), r)
            }
        }
        function v(u) {
            if (u) {
                var f = i(u);
                f.Id = r + f.Id;
                f.DisplayName = f.ContactPersonName;
                f.SearchFields = [f.CompanyName];
                f.Activity = "";
                f.DetailsString = "";
                t(n("#InterestedParty_Id"), f)
            }
        }
        function i(t) {
            if (t) {
                var i = t.PhoneNo1 ? "phone " + t.PhoneNo1 : ""
                  , r = [t.ContactPersonDetails.Salutation ? t.ContactPersonDetails.Salutation.Text : "", t.ContactPersonDetails.FirstName, t.ContactPersonDetails.LastName];
                return {
                    Id: t.CompanyId,
                    FullName: t.CompanyName,
                    CompanyName: t.CompanyName,
                    Salutation: "",
                    FullNameWithoutSalutation: t.CompanyName,
                    ContactPersonName: n.grep(r, Boolean).join(" ") || "",
                    DetailsLine1: i,
                    DetailsLine2: s(t.Address, ", ")
                }
            }
            return null
        }
        function s(t, i) {
            if (t) {
                var r = [t.AddressLine1 || "", t.AddressLine2 || ""]
                  , u = n.grep(r, Boolean).join(", ") || ""
                  , f = [(t.Suburb ? t.Suburb.Text : t.SuburbText) || "", (t.PostCode ? t.PostCode.Text : t.PostCodeText) || "", (t.State ? t.State.Text : t.StateText) || ""]
                  , e = n.grep(f, Boolean).join(" ") || "";
                return n.grep([u, e], Boolean).join(i) || ""
            }
            return ""
        }
        function t(t, i) {
            var r, u, f;
            siberia.multiSelect.clearServerFilteringState(t);
            r = n(t).data("kendoMultiSelect");
            r && (u = r.dataItems().slice(),
            f = r.options.maxSelectedItems,
            f == null || f > 1 ? u.push(i) : u = [i],
            siberia.multiSelect.attach(r, u, "Id", !0))
        }
        function y(t, i) {
            var u = n(t).data("kendoDropDownList"), r;
            return u && (r = n.grep(u.dataSource.data(), function(n) {
                return n.Id == i
            }),
            r.length > 0) ? r[0].Text : ""
        }
        var r = "Company_"
          , u = "Person_";
        return {
            init: h,
            getDropDownValueById: y,
            addCreatedItemToMultiselect: t,
            convertCompanyForCommonSearch: i,
            getCompanyAddressDetailsString: s
        }
    }();
    n(document).ready(function() {
        siberia.commonAddEntities.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.interestedParties");
    siberia.interestedParties = function() {
        function r() {
            var r = n.grep(t.dataItems(), function(t) {
                return !n.isNumeric(t.Id)
            }).map(function(n) {
                return n.Id
            });
            return {
                Text: i.input.val(),
                ExceptInterestedPartiesIds: r
            }
        }
        function u() {
            (t = n("#interested-parties-grid").data("kendoGrid"),
            i = n("#InterestedParty_Id").data("kendoMultiSelect"),
            t && i) && (siberia.multiSelect.fixServerFiltering("#InterestedParty_Id", "SearchFields"),
            siberia.grid.initClientGrid({
                gridSelector: "#interested-parties-grid",
                saveSelector: ".js-interested-parties-save",
                addAction: e,
                deleteAction: f
            }))
        }
        function f() {
            t.dataSource.sync()
        }
        function e(t) {
            var i = n("#InterestedParty_Id").data("kendoMultiSelect");
            siberia.popup.create("#interested-party-popup", {
                windowOptions: {
                    title: text.global.titles.addInterestedParty,
                    width: "600"
                },
                clear: function() {
                    i.value([]);
                    siberia.multiSelect.clearServerFilteringState("#InterestedParty_Id");
                    n("#InterestedParty_PatientId").val(n("#PatientId").val())
                },
                success: o,
                cancel: function() {
                    t.cancel()
                }
            })
        }
        function o() {
            t.dataSource.read()
        }
        var t, i;
        return {
            init: u,
            onGetInterestedParties: r
        }
    }();
    n(document).ready(function() {
        siberia.interestedParties.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.mergePatients");
    siberia.mergePatients = function() {
        function l() {
            if (t = n(".js-merge-patients-form"),
            t.length) {
                u = n("#merge-patients-popup");
                siberia.common.addUnloadRule(function() {
                    var n = u.data("kendoWindow");
                    return n ? n.element.is(":hidden") : !0
                }, null);
                o = t.data("cancel-merge-url");
                i = n("#PatientOneId").data("kendoMultiSelect");
                r = n("#PatientTwoId").data("kendoMultiSelect");
                f = n("#duplicated-patients-grid").data("kendoGrid");
                n(".js-start-merge-button").click(s);
                n("#duplicated-patients-grid").on("click", ".js-quick-merge-button", v)
            }
        }
        function s() {
            n(".js-global-spinner-container").spinner(!0);
            var i = t.action;
            t.ajaxSubmit({
                traditional: !0,
                url: i,
                success: function(n) {
                    siberia.validation.processAjaxErrors(t, n.Errors) && y(n);
                    a(t)
                },
                error: function() {
                    siberia.validation.showFormNetworkError(t)
                },
                complete: function() {
                    n(".js-global-spinner-container").spinner(!1)
                }
            })
        }
        function a() {
            i.bind("change", e);
            r.bind("change", e)
        }
        function e() {
            siberia.validation.clearValidationErrors(t);
            i.unbind("change");
            r.unbind("change")
        }
        function v(t) {
            var i = f.dataItem(n(t.currentTarget).closest("tr")), r = kendo.toString(i.DateOfBirth, siberia.config.formats.dateFormat), o = [], u;
            o.push({
                PatientId: i.Duplicates[0].Id,
                PatientFullName: i.Duplicates[0].Salutation + " " + i.PatientName,
                HighlightedFullName: i.PatientName,
                PatientDateOfBirth: r,
                HighlightedDateOfBirth: r,
                PatientNumber: i.Duplicates[0].PatientNumber,
                HighlightedPatientNumber: i.Duplicates[0].PatientNumber,
                PatientIsInactive: i.Duplicates[0].PatientIsInactive
            });
            u = [];
            u.push({
                PatientId: i.Duplicates[1].Id,
                PatientFullName: i.Duplicates[1].Salutation + " " + i.PatientName,
                HighlightedFullName: i.PatientName,
                PatientDateOfBirth: r,
                HighlightedDateOfBirth: r,
                PatientNumber: i.Duplicates[1].PatientNumber,
                HighlightedPatientNumber: i.Duplicates[1].PatientNumber,
                PatientIsInactive: i.Duplicates[1].PatientIsInactive
            });
            e();
            siberia.multiSelect.attachValue("#PatientOneId", o, "PatientId");
            siberia.multiSelect.attachValue("#PatientTwoId", u, "PatientId");
            s()
        }
        function y(n) {
            siberia.popup.create("#merge-patients-popup", {
                windowOptions: {
                    title: text.global.titles.popupMergePatients,
                    width: "900"
                },
                init: function() {
                    p(n)
                },
                success: function() {
                    h();
                    c()
                },
                cancel: w
            })
        }
        function p(t) {
            n("#MergePatients_PatientOneId").val(i.value());
            n("#MergePatients_PatientTwoId").val(r.value());
            var f = kendo.template(n("#js-merge-patients-grid-template").html())
              , e = f(t);
            n(".js-merge-patients-grid").html(e);
            b();
            siberia.popup.center("#merge-patients-popup");
            siberia.validation.initValidationFor(u.find("form"), u.find("form .js-validate"))
        }
        function w() {
            n.ajax({
                type: "POST",
                url: o,
                contentType: "application/json",
                data: JSON.stringify({
                    "MergePatients.PatientOneId": n("#MergePatients_PatientOneId").val(),
                    "MergePatients.PatientTwoId": n("#MergePatients_PatientTwoId").val()
                }),
                success: function(n) {
                    siberia.validation.processGridActionAjaxErrors(n.Errors, !0);
                    h();
                    c()
                },
                error: function() {
                    siberia.validation.showGridNetworkError(!0)
                }
            })
        }
        function b() {
            n("#MergePatients_HideSameFields").click(function() {
                var t = n(this).is(":checked");
                t ? n(".js-field-item").each(function() {
                    var t = n(this);
                    t.data("is-same") && t.hide()
                }) : n(".js-field-item").show()
            })
        }
        function h() {
            siberia.multiSelect.clear(i);
            siberia.multiSelect.clear(r)
        }
        function c() {
            f.dataSource.read();
            f.refresh()
        }
        var t, u, o, i, r, f;
        return {
            init: l
        }
    }();
    n(document).ready(function() {
        siberia.mergePatients.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.printing.envelope");
    siberia.printing.envelope = function() {
        function t() {
            function t(t) {
                var i, r, u;
                t.stopPropagation();
                t.preventDefault();
                n(this).blur();
                r = n(t.delegateTarget).data("kendoGrid");
                r ? i = r.dataItem(n(t.currentTarget).closest("tr")) : (u = n(t.delegateTarget).data("kendoListView"),
                i = u.dataItem(n(t.currentTarget).closest('div[role="option"]')));
                siberia.printing.common.printEnvelope(i.Id)
            }
            n("#letter-list-grid").on("click", ".js-print-letter-envelope", t);
            n("#archived-letter-list-grid").on("click", ".js-print-letter-envelope", t);
            n("#letter-list").on("click", ".js-print-letter-envelope", t)
        }
        return {
            init: t
        }
    }();
    n(document).ready(function() {
        siberia.printing.envelope.init()
    })
}(jQuery),
function(n) {
    n(document).ready(function() {
        n(document.body).on("click", ".js-print-letter-opreports, .js-view-letter-opreports", function(t) {
            var i = n(t.currentTarget)
              , r = (i.attr("data-letter-opreports") || "").split(",");
            r.filter(function(n) {
                return n
            }).map(function(n) {
                return siberia.config.urls.getOpReportByIdPrintView({
                    opReportId: n,
                    donotprint: !1
                })
            }).forEach(function(n) {
                window.open(n, "_blank")
            })
        })
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.sms");
    siberia.sms = function() {
        function u(n) {
            return {
                text: n.filter.filters[0] ? n.filter.filters[0].value : "",
                selectedDate: siberia.sms.filterExtraData ? siberia.sms.filterExtraData.Date : null,
                isWeekView: siberia.sms.filterExtraData ? siberia.sms.filterExtraData.IsWeekViewModeSelected : !0
            }
        }
        function f(t) {
            t.preventDefault();
            var i = n(t.currentTarget).parent().find('[data-role="multiselect"]');
            i && siberia.multiSelect.clear(i.data("kendoMultiSelect"))
        }
        function e(t, i) {
            var r = n(t), u = r.prop("selectionStart"), e = u + i.length, f, o;
            u > 0 && (f = r.val(),
            i = f.slice(0, u) + i + f.slice(u));
            o = r.closest("form");
            siberia.templateText.insertAndValidate(o, r, i);
            r.prop("selectionStart", e);
            r.prop("selectionEnd", e);
            r.focus()
        }
        function o(i, r, u, f, e, o) {
            return n.Deferred(function(s) {
                siberia.popup.create("#sms-template-popup", {
                    submitText: text.global.labels.send,
                    windowOptions: {
                        title: text.global.titles.popupSMSTemplate,
                        resizable: !0,
                        width: "1024",
                        height: "620",
                        actions: ["Maximize", "Close"],
                        resize: function() {
                            siberia.common.resizeTemplateList(t);
                            siberia.common.initMinPopupSize(t)
                        }
                    },
                    preLoadOptions: {
                        dataUrl: n("#sms-template-popup").attr("data-get-sms-templates-url"),
                        data: {
                            includeAppointmentFields: !f
                        },
                        preLoadSuccess: function(t) {
                            n(".js-sms-templates-container").html(t)
                        }
                    },
                    clear: function() {
                        siberia.patientNotifications.initPopupControls("#sms-template-popup", !0);
                        i.patients && siberia.multiSelect.attachValue(n("#SmsTemplate_PatientIds"), i.patients, "PatientId");
                        n("#SmsTemplate_Text").val(i.smsText ? i.smsText : "");
                        siberia.multiSelect.clearValue("#FavoriteSms")
                    },
                    customSubmitUrl: r,
                    extraData: u,
                    opened: o,
                    success: function(t) {
                        var i = !1;
                        siberia.validation.processAjaxErrors(n("#sms-template-popup form"), t.Errors) && (t && t > 0 ? (siberia.notification.showSuccessNotification(text.global.status.smsNotificationsSent),
                        i = !0) : siberia.notification.showErrorNotification(text.global.status.noNotificationsToSend, !1));
                        e && e();
                        i && s.resolve(t)
                    },
                    init: function() {
                        siberia.common.resizeTemplateList(t);
                        var i = n("#FavoriteSms").data("kendoMultiSelect");
                        i.dataSource.read()
                    }
                })
            })
        }
        function s() {
            n(".js-clear-related-multiselect").click(f);
            var t = n("#sms-template-popup .js-save-favorite").data("save-favorite-url");
            i("#sms-popup-favorites-area", "#SmsTemplate_Text", t)
        }
        function i(t, i, r) {
            siberia.favorites.init(t, {
                saveFavoriteUrl: r,
                getFavoriteDataAction: function() {
                    return {
                        FavoriteDataSerialized: n(i).val()
                    }
                },
                setFavoriteDataAction: function(n) {
                    e(i, n)
                }
            })
        }
        var t = n("#sms-template-popup"), r;
        return {
            init: s,
            showPopup: o,
            initSmsFavorites: i,
            filterExtraData: r,
            getAdditionalDataToSearchSmsPatients: u
        }
    }();
    n(document).ready(function() {
        siberia.sms.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.templateText");
    siberia.templateText = function() {
        function f() {
            n(".js-text-template-container").on("keyup", ".js-text-template-field", function(n) {
                t(n.delegateTarget, n.currentTarget)
            })
        }
        function t(t, f) {
            var l = n(t), a = n(f), v = l.find(".js-template-text-warning"), o, s, e, h, c;
            (v.text(""),
            o = a.data("kendoEditor"),
            s = !o ? a.val() : o.value(),
            s) && (e = s.match(i),
            e && e.length !== 0) && (h = l.find(r).map(function(t, i) {
                return n(i).data(u)
            }).toArray(),
            h) && (c = n.unique(e.filter(function(n) {
                return h.indexOf(n) === -1
            })),
            c.length !== 0) && v.text(text.global.validation.wrongTemplateFields(c.join(", ")))
        }
        function e(i, r, u) {
            n(r).val(u);
            t(i, r)
        }
        var i = /(\[\w+\])/ig
          , r = ".js-letter-template-fields-container .js-field-template"
          , u = "template-code";
        return {
            validate: t,
            init: f,
            insertAndValidate: e
        }
    }();
    n(document).ready(function() {
        siberia.templateText.init()
    })
}(jQuery),
function(n) {
    function i() {
        return n(t + ' [name$="Text"]')
    }
    function c() {
        return n(t + " .js-editor")
    }
    function o() {
        var n = i()
          , t = n.data("kendoEditor");
        return t ? t.value() : n.val()
    }
    function l() {
        var r = i();
        r.kendoEditor({
            encoded: !1,
            tools: siberia.editor.commonTools()
        });
        siberia.validation.initValidationFor(n(t).find("form"), n(t).find("form .js-validate"))
    }
    function a() {
        var t = i()
          , n = t.data("kendoEditor");
        n && n.destroy()
    }
    function v(t) {
        var r = i()
          , u = n(t.currentTarget).data("templateCode")
          , f = r.data("kendoEditor");
        f ? y(f, u) : p(r, u)
    }
    function y(n, t) {
        n.exec("inserthtml", {
            value: t
        })
    }
    function p(n, t) {
        var i = n.prop("selectionStart"), r, u;
        i > 0 ? (r = n.val(),
        n.val(r.slice(0, i) + t + r.slice(i))) : n.val(t);
        u = i + t.length;
        n.prop("selectionStart", u);
        n.prop("selectionEnd", u);
        n.focus()
    }
    function s() {
        var n = i();
        siberia.templateText.validate(u, n)
    }
    function h() {
        siberia.common.resizeTemplateList(u);
        siberia.common.initMinPopupSize(u)
    }
    function w(i) {
        var r = !!i, u;
        if (n(t + " .js-text-template-favorites").toggle(r),
        u = n(t + " .js-delete-favorite"),
        u.toggle(r),
        r) {
            var f = n(t + " " + i.widgetSelector)
              , e = f.data("kendoMultiSelect")
              , o = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: i.readActionUrl,
                        type: "POST"
                    }
                }
            });
            e.setDataSource(o);
            e.dataSource.read();
            siberia.multiSelect.clearValue(f);
            f.data("get-favorite-url", i.getActionUrl);
            u.data("delete-url", i.deleteActionUrl)
        }
    }
    function b(n) {
        var t = n.getRange() || n.createRange();
        t.selectNodeContents(n.body);
        t.collapse(!1);
        n.selectRange(t)
    }
    function k() {
        e = i().parent().html();
        d()
    }
    function d() {
        var i = n(t + " .js-save-favorite").data("save-favorite-url");
        siberia.sms.initSmsFavorites(t, t + ' [name$="Text"]', i)
    }
    var f;
    siberia.ensureObject("siberia.templateTextPopup");
    var r = ".templateTextPopup", t = "#template-text-popup", u = n("#template-text-popup"), e;
    f = function(u) {
        return function(f) {
            return n.Deferred(function(y) {
                var p = n(t);
                siberia.popup.create(p, {
                    submitText: text.global.labels.save,
                    windowOptions: {
                        title: u ? text.global.titles.editDocumentTemplate : text.global.titles.popupSMSTemplate,
                        resizable: !0,
                        width: "900",
                        height: "620",
                        actions: ["Maximize", "Close"],
                        resize: h
                    },
                    preLoadOptions: {
                        dataUrl: siberia.config.urls.templatesGroupType({
                            templatesGroupType: f.templatesGroupType
                        }),
                        type: "POST",
                        dataType: "html",
                        preLoadSuccess: function(t) {
                            n(".js-field-templates-container").html(t);
                            n(".js-letter-template-fields-container").kendoDraggable({
                                dragstart: function(n) {
                                    n.preventDefault()
                                }
                            })
                        }
                    },
                    ajax: {
                        enabled: !1
                    },
                    init: function() {
                        var t, n;
                        i().val(f.textValue);
                        s();
                        p.find(".js-sms-warning").toggle(!u);
                        t = typeof f.preview == "function";
                        p.find(".js-text-template-print-preview").toggle(t);
                        u && (l(),
                        n = i().data("kendoEditor"),
                        n.focus(),
                        n.bind("keyup", s),
                        b(n));
                        p.on("click." + r, ".js-field-template", v);
                        if (t)
                            p.on("click." + r, ".js-text-template-print-preview", function(n) {
                                n.preventDefault();
                                f.preview(o())
                            });
                        w(f.favorite);
                        h()
                    },
                    close: function() {
                        a();
                        p.off(r);
                        requestAnimationFrame(function() {
                            c().html(e)
                        })
                    },
                    cancel: function() {
                        y.reject()
                    },
                    success: function() {
                        y.resolve(o())
                    }
                })
            })
        }
    }
    ;
    siberia.templateTextPopup.openSimpleTextTemplatePopup = f(!1);
    siberia.templateTextPopup.openHtmlTextTemplatePopup = f(!0);
    n(document).ready(k)
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.clinicalDocumentList");
    siberia.clinicalDocumentList = function() {
        function a(t) {
            var i = siberia.patientRefferal.getSelectedReferralItem();
            siberia.popup.create("#upload-file-popup", {
                windowOptions: {
                    title: text.global.titles.addFile,
                    width: "400"
                },
                clear: function() {
                    siberia.upload.file.clearSelectedFile();
                    t.item.set("IsReferralFile", !0);
                    r(t.item, "Attachment")
                },
                customSubmitUrl: n("#referral-list-grid").data("create-attachment-url") + "?referralId=" + i.Id,
                success: function(n) {
                    h(t.item, "Attachment", n.Data[0], n)
                },
                cancel: function() {
                    t.cancel()
                }
            })
        }
        function v(t) {
            siberia.popup.create("#edit-uploaded-file-popup", {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.editFileDescription,
                    width: "400"
                },
                clear: function() {
                    r(t, "EditAttachment")
                },
                customSubmitUrl: n("#referral-list-grid").data("update-attachment-url"),
                success: function() {
                    h(t, "EditAttachment")
                }
            })
        }
        function y() {
            e++
        }
        function p(t, i, r) {
            var u = n("#referral-list-grid").data("delete-attachment-url");
            c(t, i, r, u)
        }
        function w(n) {
            siberia.documentViewer.previewFile(t, n.CanBePreviewed ? n.PreviewUrl : "")
        }
        function b(n) {
            return {
                FileId: n.IsDocument ? null : n.Guid,
                IsReferralFile: n.IsReferralFile,
                DocumentId: n.IsDocument ? n.DocumentId : null,
                ConsultId: n.IsOpReport ? n.ConsultId : null,
                Page: e
            }
        }
        function k() {
            siberia.popup.create("#upload-file-popup", {
                windowOptions: {
                    title: text.global.titles.addFile,
                    width: "400"
                },
                customSubmitUrl: n("#clinical-document-list").data("create-attachment-url"),
                clear: function() {
                    siberia.upload.file.clearSelectedFile();
                    r({
                        Guid: "",
                        FileName: "",
                        Description: "",
                        DocumentTypeId: 1,
                        IsReferralFile: !1,
                        DocumentDateDisplay: ""
                    }, "Attachment")
                },
                success: function(n) {
                    o(i, "#clinical-document-list");
                    s(n.Data[0].DocumentTypeId)
                }
            })
        }
        function d(t, i) {
            var u;
            i.stopPropagation();
            t.IsDocument ? (u = t.EditorType === 2 ? siberia.documentPopupDevExpress.edit({
                documentId: t.DocumentId,
                devExpressDocumentId: t.DevExpressDocumentId
            }) : siberia.documentPopup.edit({
                documentId: t.DocumentId
            }),
            u.done(g)) : siberia.popup.create("#edit-uploaded-file-popup", {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.editFileDescription,
                    width: "400"
                },
                customSubmitUrl: n("#clinical-document-list").data("update-attachment-url"),
                clear: function() {
                    r(t, "EditAttachment")
                },
                success: function(n) {
                    tt(t.DocumentDateDisplay) || h(t, "EditAttachment", n.Data[0], t);
                    s(t.DocumentTypeId, !0)
                }
            })
        }
        function g() {
            o(i, "#clinical-document-list")
        }
        function nt(t, i, r) {
            var u = n("#clinical-document-list").data("delete-attachment-url");
            c(t, i, r, u, function() {
                s(t.DocumentTypeId)
            })
        }
        function c(i, r, u, f, e) {
            u.stopPropagation();
            var o = {
                FileId: i.IsDocument ? null : i.Guid,
                IsReferralFile: i.IsReferralFile,
                DocumentId: i.IsDocument ? i.DocumentId : null
            };
            t.spinner(!0);
            n.ajax({
                type: "POST",
                url: f,
                data: JSON.stringify(o),
                contentType: "application/json",
                success: e,
                complete: function() {
                    t.spinner(!1)
                }
            })
        }
        function o(t, i) {
            e = 1;
            t.clearState();
            var r = n(i).data("kendoListView");
            r.dataSource.read();
            r.wrapper.scrollTop(0)
        }
        function r(t, i) {
            n("#" + i + "_Guid").val(t.Guid);
            n("#" + i + "_FileName").val(t.FileName);
            n("#" + i + "_DocumentDate").data("kendoDatePicker").value(kendo.parseDate(t.DocumentDateDisplay, siberia.config.formats.dateFormat));
            n("#" + i + "_Description").val(t.Description);
            n("#" + i + "_DocumentTypeId").data("kendoDropDownList").value(t.DocumentTypeId);
            n("#" + i + "_IsReferralFile").val(t.IsReferralFile);
            n(".js-document-type").toggle(!t.IsReferralFile)
        }
        function s(n, t) {
            u && (n == 2 || t) && u.dataSource.read();
            f && (n == 3 || t) && f.dataSource.read()
        }
        function tt(t) {
            if (n("#EditAttachment_DocumentDate").val() != t)
                return o(i, "#clinical-document-list"),
                !0
        }
        function h(t, i, r, u) {
            var f, o, e, s;
            r ? (t.set("Guid", r.Guid),
            t.set("CanBePreviewed", u.CanBePreviewed),
            t.set("CssPostfix", u.CssPostfix)) : t.set("Guid", n("#" + i + "_Guid").val());
            f = n("#" + i + "_DocumentDate").data("kendoDatePicker").value() || siberia.common.currentLocationDate();
            o = kendo.toString(f, siberia.config.formats.dateFormat);
            t.set("DocumentDate", f);
            t.set("DocumentDateDisplay", o);
            t.set("DocumentTypeId", n("#" + i + "_DocumentTypeId").data("kendoDropDownList").value());
            t.set("FileName", n("#" + i + "_FileName").val());
            t.set("Description", n("#" + i + "_Description").val());
            t.FullFileName || (e = n('#upload-file-popup input[type="file"]')[0].files[0].name,
            s = e.substr(e.lastIndexOf(".")) || "",
            t.set("FullFileName", n("#" + i + "_FileName").val() + s))
        }
        var t, i, u, f, e = 1, l = function() {
            (t = n(".js-document-tab-wrapper"),
            t.length != 0) && (u = n("#pathology-responses-grid").data("kendoListView"),
            f = n("#imaging-responses-grid").data("kendoListView"),
            i = siberia.infiniteScroll.create({
                listViewSelector: "#clinical-document-list",
                tabWrapper: n(".js-document-tab-wrapper"),
                tabSelectors: ["#documentsTab", "#patient_documentsTab"],
                onItemSelected: w,
                getOlderItemsUrl: n("#clinical-document-list").data("get-older-items-url"),
                scrollWrapper: n("#clinical-document-list").closest(".js-scroll-wrapper"),
                getRequestAdditionalData: b,
                onOlderItemsLoaded: y
            }),
            siberia.listView.initClientListView({
                listViewSelector: "#clinical-document-list",
                addSelector: ".js-add-document",
                addAction: k,
                editAction: d,
                deleteAction: nt,
                isCustomEditing: !0
            }),
            siberia.grid.initClientGrid({
                gridSelector: "#upload-file-list-grid-referral",
                addAction: a,
                editAction: v,
                deleteAction: p,
                confirmText: text.global.confirms.deleteFile
            }))
        };
        return {
            init: l
        }
    }();
    n(document).ready(function() {
        siberia.clinicalDocumentList.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.excelPreview");
    siberia.excelPreview = function() {
        function st() {
            t = "#ItemSchedule";
            e = n(t + "_HealthFundId");
            o = n(t + "_GenericScheduleId");
            s = n(t + "_ExcelFileId ");
            g = n(t + "_ScheduleType");
            nt = n(t + "_StateId");
            i = n(t + "_SheetNameId").data("kendoDropDownList");
            h = n(t + "_StartFromRow").data("kendoNumericTextBox");
            c = n(t + "_ItemPriceColumn").data("kendoNumericTextBox");
            u = n(t + "_ItemNumberColumn").data("kendoNumericTextBox");
            tt = n(t + "_ItemDescriptionColumn").data("kendoNumericTextBox");
            it = n(t + "_ScheduleNumberColumn").data("kendoNumericTextBox");
            l = n(t + "_NoGapSchemeColumn").data("kendoNumericTextBox");
            a = n(t + "_KnownGapSchemeColumn").data("kendoNumericTextBox");
            v = n(t + "_NoGapSchemePercentColumn").data("kendoNumericTextBox");
            y = n(t + "_KnownGapSchemePercentColumn").data("kendoNumericTextBox");
            p = n(t + "_SecondItemNumberColumn").data("kendoNumericTextBox");
            w = n(t + "_SecondNoGapSchemeColumn").data("kendoNumericTextBox");
            b = n(t + "_SecondKnownGapSchemeColumn").data("kendoNumericTextBox");
            k = n(t + "_SecondNoGapSchemePercentColumn").data("kendoNumericTextBox");
            d = n(t + "_SecondKnownGapSchemePercentColumn").data("kendoNumericTextBox");
            rt = n(t + "_ExtrasCoverModalityCodeColumn").data("kendoNumericTextBox");
            ut = n(t + "_ExtrasCoverCategoryCodeColumn").data("kendoNumericTextBox");
            ft = n(t + "_ExtrasCoverDescriptionColumn").data("kendoNumericTextBox");
            et = n(t + "_ExtrasCoverItemNumberColumn").data("kendoNumericTextBox");
            f = n(t + "_UseTwoColumns");
            f.bind("click", function(n) {
                ot(n.target.checked)
            })
        }
        function ot(t) {
            n("#js-excel-second-column").toggle(t)
        }
        function ht(t, st, ht, ct) {
            function at(n) {
                siberia.popup.create("#excel-preview-popup", {
                    windowOptions: {
                        title: text.global.titles.popupPreviewExcel,
                        width: "1200"
                    },
                    ajax: {
                        timeout: 18e5
                    },
                    clear: function() {
                        vt(n)
                    },
                    success: function(t) {
                        ht && ht(n, t)
                    }
                })
            }
            function vt() {
                e.val(t.healthFundId);
                o.val(t.genericScheduleId);
                s.val(st.FileId);
                g.val(t.scheduleType);
                nt.val(ct);
                f.attr("checked", !1);
                ot(!1);
                i.dataSource.data(st.SheetNameItems);
                st.SheetNameItems.length > 0 && i.value(st.SheetNameItems[0].Id);
                h.value("");
                u.value("");
                c.value("");
                u.value("");
                tt.value("");
                it.value("");
                l.value("");
                a.value("");
                v.value("");
                y.value("");
                p.value("");
                w.value("");
                b.value("");
                k.value("");
                d.value("");
                rt.value("");
                ut.value("");
                ft.value("");
                et.value("");
                lt(st.ExcelSheets[0]);
                yt()
            }
            function yt() {
                for (var i = 0; i < r.length; i++)
                    n("#js-excel-import-" + r[i]).toggle(n.inArray(r[i], t.showControls) >= 0)
            }
            function pt(n) {
                lt(st.ExcelSheets[parseInt(n.sender.value(), 10)])
            }
            function lt(t) {
                var i = kendo.template(n("#js-excel-preview-template").html())
                  , r = i(t);
                n(".js-excel-preview-contaner").html(r)
            }
            st.FileId && (at(t),
            i.unbind("change"),
            i.bind("change", pt))
        }
        var r = ["ItemPriceColumn", "ItemNumberColumn", "ItemDescriptionColumn", "ScheduleNumberColumn", "NoGapSchemeColumn", "KnownGapSchemeColumn", "NoGapSchemePercentColumn", "KnownGapSchemePercentColumn", "SecondItemNumberColumn", "SecondNoGapSchemeColumn", "SecondKnownGapSchemeColumn", "SecondNoGapSchemePercentColumn", "SecondKnownGapSchemePercentColumn", "UseTwoColumns", "ScheduleFeeTypeId", "NoGapSchemeColumns", "SecondNoGapSchemeColumns", "KnownGapSchemeColumns", "SecondKnownGapSchemeColumns", "ExtrasCoverModalityCodeColumn", "ExtrasCoverCategoryCodeColumn", "ExtrasCoverDescriptionColumn", "ExtrasCoverItemNumberColumn"], e, o, s, i, h, c, u, l, a, v, y, p, w, b, k, d, g, nt, f, tt, it, rt, ut, ft, et, t;
        return {
            openExcelPreview: ht,
            initExcelPreview: st
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.clinicalEtaskList");
    siberia.clinicalEtaskList = function() {
        function c(n) {
            siberia.documentViewer.previewFile(i, n.PreviewUrl)
        }
        function l() {
            u(".js-todo-open-sort-button", r.open);
            u(".js-todo-all-sort-button", r.all);
            u(".js-todo-completed-sort-button", r.completed)
        }
        function u(t, i) {
            n(t).on("click", function(t) {
                f = i;
                n(".js-todo-open-sort-button").removeClass("selected");
                n(".js-todo-all-sort-button").removeClass("selected");
                n(".js-todo-completed-sort-button").removeClass("selected");
                n(t.currentTarget).addClass("selected");
                s()
            })
        }
        function o(t) {
            return {
                sortType: f,
                lastId: t.Id,
                patientId: n("#PatientId").val()
            }
        }
        function a(t) {
            siberia.todoList.addItemHandler(t, function() {
                var r = n("#PatientId").val(), t = n("#PatientName").val(), i = n("#PatientDateOfBirth").val(), f = siberia.inactivePatient.getPatientInactivityState(), u;
                r && t && i && (u = {
                    PatientId: r,
                    PatientFullName: t,
                    PatientDateOfBirth: i,
                    HighlightedFullName: t,
                    HighlightedDateOfBirth: i,
                    PatientNumber: "",
                    HighlightedPatientNumber: "",
                    PatientIsInactive: f
                },
                siberia.multiSelect.attachValue("#todo-item-popup [name$=PatientId]", [u], "PatientId", !0))
            }, function() {
                s()
            }, null)
        }
        function s() {
            b(e, t)
        }
        function v(n) {
            siberia.todoList.editItemHandler(n, function() {
                y(n)
            }, null)
        }
        function y(t) {
            t.set("SubjectShort", n("#ToDoItemReply_Subject").val().substring(0, 40));
            t.set("Subject", n("#ToDoItemReply_Subject").val());
            t.set("IsUrgent", n("#ToDoItemReply_IsUrgent").is(":checked"));
            t.set("IsFinished", n("#ToDoItemReply_IsFinished").val() === "True")
        }
        function p() {
            var u = n("#todo-items-popup").attr("data-finish-todo-url")
              , f = n(t).data("kendoListView")
              , i = n(this).closest("div.js-client-grid-row-select")
              , r = f.dataItem(i);
            n.ajax({
                type: "POST",
                url: u,
                contentType: "application/json",
                data: JSON.stringify({
                    id: r.Id
                }),
                success: function() {
                    r.set("IsFinished", !0);
                    i.addClass("etask-complited")
                }
            })
        }
        function w(t, r, u) {
            u.stopPropagation();
            var f = n("#clinical-document-list").data("delete-attachment-url")
              , e = {
                FileId: t.IsDocument ? null : t.Guid,
                IsReferralFile: t.IsReferralFile,
                DocumentId: t.IsDocument ? t.DocumentId : null
            };
            i.spinner(!0);
            n.ajax({
                type: "POST",
                url: f,
                data: JSON.stringify(e),
                contentType: "application/json",
                success: function() {},
                error: function() {},
                complete: function() {
                    i.spinner(!1)
                }
            })
        }
        function b(t, i) {
            t.clearState();
            var r = n(i).data("kendoListView");
            r.dataSource.read();
            r.wrapper.scrollTop(0)
        }
        var r = {
            open: 0,
            completed: 1,
            all: 2
        }, f = r.all, i, e, t = "#clinical-etask-list", h = function() {
            if (i = n(".js-etask-tab-wrapper"),
            i.length !== 0) {
                t = "#clinical-etask-list";
                e = siberia.infiniteScroll.create({
                    listViewSelector: t,
                    tabWrapper: n(".js-etask-tab-wrapper"),
                    tabSelectors: ["#etasksTab", "#patient_eTaskTab"],
                    onItemSelected: c,
                    getOlderItemsUrl: n(t).data("get-older-items-url"),
                    scrollWrapper: n(t).closest(".js-scroll-wrapper"),
                    getRequestAdditionalData: o
                });
                siberia.listView.initClientListView({
                    listViewSelector: t,
                    addSelector: ".js-add-etask",
                    addAction: a,
                    editAction: v,
                    deleteAction: w,
                    isCustomEditing: !0
                });
                n(t).on("click", ".js-todo-finish", p);
                l()
            }
        };
        return {
            init: h,
            getRequestAdditionalData: o
        }
    }();
    n(document).ready(function() {
        siberia.clinicalEtaskList.init()
    })
}(jQuery),
function(n) {
    function o(t) {
        var u, r, f, e;
        if (u = n("#OperationalReport_QuoteId").length ? n(i).data("refresh-fee-estimate-items-url") : n(i).data("refresh-emergency-fee-estimate-items-url"),
        r = n(i + ' div[data-role="grid"]').data("kendoGrid"),
        r && u) {
            f = "";
            e = n("#OperationalReportItems_MprTypeId").data("kendoDropDownList");
            e && (f = e.value());
            var h = siberia.invoiceFeeEstimateCommon.getAttachedItemNumber(r.wrapper)
              , c = {
                QuoteId: n("#OperationalReport_QuoteId").val(),
                DoctorId: n("#OperationalReport_DoctorId").attr("value"),
                LocationId: n(".opreport-location input").data("kendoDropDownList").value(),
                MprTypeId: f,
                IsMprQuote: n("#OperationalReportItems_IsMpr").prop("checked"),
                IsMprForPrivateFeesApplied: n("#OperationalReportItems_IsMprForPrivateFeesApplied").prop("checked"),
                IsMprForSafetyNetApplied: n("#OperationalReportItems_IsMprForSafetyNetApplied").prop("checked"),
                attachedItemNumber: h,
                SerializedItems: JSON.stringify(r.dataSource.data())
            }
              , o = n(i);
            o.spinner(!0);
            n.ajax({
                url: u,
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(c),
                success: function(n) {
                    s(n)
                },
                error: function() {
                    siberia.validation.showGridNetworkError(!1)
                },
                complete: function() {
                    o.spinner(!1);
                    t && typeof t == "function" && t()
                }
            })
        }
    }
    function s(r) {
        if (siberia.validation.processAjaxErrors(n(t + " form"), r.Errors)) {
            n(i + " .js-marker-to-refresh-next-siblings").nextAll().remove();
            n(r).insertAfter(i + " .js-marker-to-refresh-next-siblings");
            siberia.invoiceFeeEstimateCommon.initGridEvents("#OperationalReportItems_items-grid", o);
            itemsAutosuggest(!0, {
                refreshAction: o
            });
            var u = n(i).find(".js-popup-submit");
            n(i).find("#items-errors-container").length > 0 ? u.addClass("btn-disabled").removeClass("k-primary") : u.removeClass("btn-disabled").addClass("k-primary")
        }
    }
    function c() {
        var i = n("#OperationalReport_PreDiagnosis")
          , t = n("#OperationalReport_PostDiagnosis");
        i.length && t.length && (n(this).prop("checked") ? (u = t.val(),
        t.val(i.val())) : u && t.val(u))
    }
    function f() {
        var i = n("#OperationalReport_PathologySpecimen")
          , t = n("#OperationalReport_NumberOfPathologySpecimens").data("kendoNumericTextBox");
        n(".js-disable-pathology-specimens").prop("checked") ? (i.enable(!1),
        i.val(),
        t.enable(!1),
        siberia.multiSelect.clear(t)) : (i.enable(!0),
        t.enable(!0),
        t.value() || t.value(t.min()))
    }
    function l(r) {
        if (siberia.validation.processAjaxErrors(n(t + " form"), r.Errors)) {
            n(r).insertAfter(t + " .js-marker-to-refresh-next-siblings");
            n(".js-copy-pre-diagnoses").click(c);
            n(".js-enable-pathology-specimens, .js-disable-pathology-specimens").click(f);
            siberia.doctorDictionary.initCustomMultiselects(".js-opreport-custom-doctor-multiselect");
            a();
            n(".js-open-operational-report-items-popup").click(function(r) {
                var u, f;
                r.preventDefault();
                n(this.blur());
                n("#OperationalReport_QuoteId").length ? (u = n(i).data("refresh-fee-estimate-items-url"),
                f = {
                    QuoteId: n("#OperationalReport_QuoteId").val(),
                    MprTypeId: n("#OperationalReport_MprTypeId").val(),
                    IsMprForPrivateFeesApplied: n("#OperationalReport_IsMprForPrivateFeesApplied").val(),
                    IsMprForSafetyNetApplied: n("#OperationalReport_IsMprForSafetyNetApplied").val(),
                    IsMprQuote: n("#OperationalReport_IsMprQuote").val(),
                    SerializedItems: n("#OperationalReport_SerializedItems").val()
                }) : (u = n(i).data("refresh-emergency-fee-estimate-items-url"),
                f = {
                    DoctorId: n("#OperationalReport_DoctorId").attr("value"),
                    LocationId: n(".opreport-location input").data("kendoDropDownList").value(),
                    MprTypeId: n("#OperationalReport_MprTypeId").val(),
                    IsMprForPrivateFeesApplied: n("#OperationalReport_IsMprForPrivateFeesApplied").val(),
                    IsMprForSafetyNetApplied: n("#OperationalReport_IsMprForSafetyNetApplied").val(),
                    IsMprQuote: n("#OperationalReport_IsMprQuote").val(),
                    SerializedItems: n("#OperationalReport_SerializedItems").val()
                });
                siberia.popup.create(i, {
                    ajax: {
                        enabled: !1
                    },
                    windowOptions: {
                        title: text.global.titles.popupOperationReportItems,
                        width: "800"
                    },
                    preLoadOptions: {
                        showSpinnerForParentPopup: !0,
                        dataUrl: u,
                        data: f,
                        preLoadSuccess: s
                    },
                    clear: function() {},
                    success: function() {
                        var e = n(i + ' div[data-role="grid"]').data("kendoGrid"), r, u, f;
                        e && (r = e.dataSource.data(),
                        n("#OperationalReport_SerializedItems").val(JSON.stringify(r)),
                        u = [],
                        n.each(r, function() {
                            u.push(this.Quantity != null && this.Quantity > 1 ? this.ItemNumber + " (x" + this.Quantity + ")" : this.ItemNumber)
                        }),
                        n(t + " .js-operational-report-item-numbers").text(u.join(", ")),
                        n("#OperationalReport_IsMprQuote").val(n("#OperationalReportItems_IsMpr").prop("checked")),
                        n("#OperationalReport_IsMprForPrivateFeesApplied").val(n("#OperationalReportItems_IsMprForPrivateFeesApplied").prop("checked")),
                        n("#OperationalReport_IsMprForSafetyNetApplied").val(n("#OperationalReportItems_IsMprForSafetyNetApplied").prop("checked")),
                        f = n("#OperationalReportItems_MprTypeId").data("kendoDropDownList"),
                        f && n("#OperationalReport_MprTypeId").val(f.value()))
                    },
                    close: function() {
                        n(i + " .js-marker-to-refresh-next-siblings").nextAll().remove()
                    }
                })
            });
            var u = n("#OperationalReport_NumberOfPathologySpecimens").data("kendoNumericTextBox");
            u && u.bind("change", function() {
                u.value() || u.value(u.min())
            });
            ft();
            siberia.doctorDictionaryAutoComplete.reinit(t);
            siberia.multiSelect.setInitialValues(t)
        }
    }
    function a() {
        siberia.grid.initClientGrid({
            gridSelector: "#op-report-files",
            addAction: y,
            editAction: p,
            rowSelectedAction: v,
            isCustomEditing: !0
        });
        siberia.documentViewer.init(n("#op-report-files").closest(".js-grid-with-preview-wrapper"), n("#op-report-files"), !0)
    }
    function v(t) {
        siberia.documentViewer.previewFile(n("#op-report-files").closest(".js-grid-with-preview-wrapper"), t.CanBePreviewed ? t.PreviewUrl : "")
    }
    function y(n) {
        h(n, !0)
    }
    function p(n) {
        h({
            item: n
        }, !1)
    }
    function h(t, i) {
        siberia.popup.create("#op-report-attachment-popup", {
            windowOptions: {
                title: i ? text.global.titles.addFile : text.global.titles.editFile,
                width: "400"
            },
            clear: function() {
                siberia.upload.file.clearSelectedFile("operationalReportFileUploader");
                i ? n("#OpReportFileUploaderContainer").show() : n("#OpReportFileUploaderContainer").hide();
                n("#OpReportAttachment_Id").val(i ? "" : t.item.Id);
                n("#OpReportAttachment_FileName").val(t.item.FileName);
                n("#OpReportAttachment_Description").val(t.item.Description)
            },
            success: function(n) {
                t.item.set("FileName", n.FileName);
                t.item.set("Description", n.Description);
                i && (t.item.set("Id", n.Id),
                t.item.set("FullFileName", n.FullFileName),
                t.item.set("DateUploaded", n.DateUploaded),
                t.item.set("CssPostfix", n.CssPostfix),
                t.item.set("CanBePreviewed", n.CanBePreviewed),
                t.item.set("PreviewUrl", n.PreviewUrl))
            },
            cancel: function() {
                t.cancel && t.cancel()
            }
        })
    }
    function r(i) {
        siberia.popup.create(t, {
            windowOptions: {
                title: text.global.titles.popupOperationReport,
                width: "1200"
            },
            preLoadOptions: {
                dataUrl: i,
                preLoadSuccess: l
            },
            ajax: {
                async: !1
            },
            success: function(i, r, u) {
                var s = n(r.currentTarget), f = s.hasClass("js-print-opreport"), h = s.hasClass("js-preview-opreport"), e, o;
                (f || h) && (u.cancelClose = h,
                i.EmergencyOpReportId != null ? (e = i.EmergencyOpReportId,
                n("#OperationalReport_Id").val(e),
                o = kendo.format(n(t).data("get-emergency-opreport-print-url"), e, !f)) : o = kendo.format(n(t).data("get-operational-report-print-url"), i.Data[0].ConsultId, !f),
                window.open(o, "_blank"))
            },
            close: function() {
                n(t + " .js-marker-to-refresh-next-siblings").nextAll().remove()
            }
        })
    }
    function w(i) {
        var u = kendo.format(n(t).data("get-opreport-by-consult-url"), i);
        r(u)
    }
    function b(i, u) {
        var f = kendo.format(n(t).data("get-opreport-by-appointment-url"), i, u);
        r(f)
    }
    function k() {
        siberia.functions.quickSearch.toCreateOpReport().then(function(i) {
            var u = i.Patient
              , f = kendo.format(n(t).data("get-emergency-opreport-by-patient"), u);
            r(f)
        })
    }
    function d(i) {
        var u = kendo.format(n(t).data("get-emergency-opreport-by-appointment"), i);
        r(u)
    }
    function g() {
        n(".js-open-emergency-op-report-from-consult").click(function(i) {
            i.preventDefault();
            n(this).blur();
            var u = n(this).data("patient-id")
              , f = kendo.format(n(t).data("get-emergency-opreport-by-patient"), u);
            r(f)
        })
    }
    function nt() {
        n(".js-open-report-from-consult").click(function(t) {
            t.preventDefault();
            n(this).blur();
            var i = n(this).data("consult-id");
            w(i)
        })
    }
    function tt() {
        n(".js-open-operational-report-from-scheduler").click(function(t) {
            t.preventDefault();
            n(this).blur();
            var i = siberia.scheduler.getSelectedAppointment();
            i ? i.QId ? b(i.PtId, i.EId) : d(i.EId) : k()
        })
    }
    function it(t) {
        n("#OperationalReport_OperationIndications").val(t.OperationIndications);
        n("#OperationalReport_PerformedOperations").val(t.Operations);
        n("#OperationalReport_OperativeFindings").val(t.OperativeFindings);
        n("#OperationalReport_OperationDescriptions").val(t.OperationDescriptions);
        n("#OperationalReport_TissuesRemoved").val(t.TissuesRemoved);
        n("#OperationalReport_PathologySpecimen").val(t.PathologySpecimen);
        n("#OperationalReport_DrainGauzes").val(t.DrainGauzes);
        n("#OperationalReport_Complications").val(t.Complications);
        n("#OperationalReport_PreDiagnosis").val(t.PreDiagnosis);
        n("#OperationalReport_PostOperativeInstructions").val(t.PostOperativeInstructions);
        n("#OperationalReport_NumberOfPathologySpecimens").data("kendoNumericTextBox").value(t.NumberOfPathologySpecimens);
        n("#OperationalReport_PostDiagnosis").val(t.PostDiagnosis);
        n("#OperationalReport_Prostheses").val(t.Prostheses);
        n(".js-enable-pathology-specimens").prop("checked", t.NumberOfPathologySpecimens > 0);
        n(".js-disable-pathology-specimens").prop("checked", t.NumberOfPathologySpecimens <= 0);
        f()
    }
    function rt() {
        n("#OperationalReport_OperationIndications").val("");
        n("#OperationalReport_PerformedOperations").val("");
        n("#OperationalReport_OperativeFindings").val("");
        n("#OperationalReport_OperationDescriptions").val("");
        n("#OperationalReport_TissuesRemoved").val("");
        n("#OperationalReport_PathologySpecimen").val("");
        n("#OperationalReport_DrainGauzes").val("");
        n("#OperationalReport_Complications").val("");
        n("#OperationalReport_PreDiagnosis").val("");
        n("#OperationalReport_PostOperativeInstructions").val("");
        n("#OperationalReport_PostDiagnosis").val("");
        n("#OperationalReport_Prostheses").val("");
        n(".js-enable-pathology-specimens").prop("checked", !1);
        n(".js-disable-pathology-specimens").prop("checked", !0);
        f()
    }
    function ut() {
        e = siberia.favorites.init("#operational-report-popup", {
            saveFavoriteUrl: n("#operational-report-popup .js-save-favorite").data("save-favorite-url"),
            getFavoriteDataAction: function() {
                var i = {
                    OperationIndications: n("#OperationalReport_OperationIndications").val(),
                    Operations: n("#OperationalReport_PerformedOperations").val(),
                    OperativeFindings: n("#OperationalReport_OperativeFindings").val(),
                    OperationDescriptions: n("#OperationalReport_OperationDescriptions").val(),
                    TissuesRemoved: n("#OperationalReport_TissuesRemoved").val(),
                    PathologySpecimen: n("#OperationalReport_PathologySpecimen").val(),
                    DrainGauzes: n("#OperationalReport_DrainGauzes").val(),
                    Complications: n("#OperationalReport_Complications").val(),
                    PreDiagnosis: n("#OperationalReport_PreDiagnosis").val(),
                    PostOperativeInstructions: n("#OperationalReport_PostOperativeInstructions").val(),
                    NumberOfPathologySpecimens: 0,
                    PostDiagnosis: n("#OperationalReport_PostDiagnosis").val(),
                    Prostheses: n("#OperationalReport_Prostheses").val()
                }
                  , t = n("#OperationalReport_NumberOfPathologySpecimens").data("kendoNumericTextBox");
                return t && t.value() && (i.NumberOfPathologySpecimens = t.value()),
                i
            },
            setFavoriteDataAction: function(n) {
                it(n)
            },
            clearFavoriteDataAction: function() {
                rt()
            }
        })
    }
    function ft() {
        e.reInitFavoriteMultiselect()
    }
    function et() {
        tt();
        nt();
        g();
        ut();
        var t = n("#operationalReportFileUploader").data("kendoUpload");
        t && t.bind("select", function(n) {
            siberia.upload.file.onFileSelected(n, "#OpReportAttachment_FileName")
        })
    }
    var t = "#operational-report-popup", i = "#operational-report-items-popup", e, u = null;
    n(document).ready(function() {
        et()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.contact.selection");
    siberia.contact.selection = function() {
        function t() {}
        function i(t, i, r) {
            var e = [], o, u, f;
            return !r && !i ? {
                text: t.filter.filters.length && t.filter.filters[0].value || "",
                ExceptIds: []
            } : (r && (o = n("select." + r),
            n.each(o, function() {
                var t = n(this).data("kendoMultiSelect");
                t && n.merge(e, t.value())
            })),
            u = "",
            i && (f = n("select." + i).data("kendoMultiSelect"),
            f && (u = f.input.val())),
            {
                text: u,
                ExceptIds: e
            })
        }
        return {
            init: t,
            getAdditionalDataForRequest: i
        }
    }();
    siberia.ensureObject("siberia.specialty.selection");
    siberia.specialty.selection = function() {
        function t() {}
        function i(t, i, r) {
            var e, u, f;
            return !r && !i ? {
                text: t.filter.filters.length && t.filter.filters[0].value || "",
                ExceptIds: []
            } : (r && (e = n("select." + r),
            n.each(e, function() {
                var t = n(this).data("kendoMultiSelect");
                t && n.merge(contacts, t.value())
            })),
            u = "",
            i && (f = n("select." + i).data("kendoMultiSelect"),
            f && (u = f.input.val())),
            {
                text: u,
                ExceptIds: []
            })
        }
        function r() {
            return "<a href='#: PatientUrl #' target='_blank'>#: PatientName #<\/a>"
        }
        return {
            init: t,
            getAdditionalDataForRequest: i,
            getPatientCellTemplate: r
        }
    }();
    n(document).ready(function() {
        siberia.contact.selection.init();
        siberia.specialty.selection.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.errorLabResultsView");
    siberia.errorLabResultsView = function() {
        function r() {
            if (t = n("#error-responses-grid"),
            t.length) {
                i = n(".js-global-spinner-container");
                t.on("click", ".js-client-grid-restore", f);
                t.on("click", ".js-client-grid-download", e);
                siberia.grid.initClientGrid({
                    gridSelector: "#error-responses-grid",
                    customDelete: u
                })
            }
        }
        function u(r) {
            var u = t.data("delete-lab-result");
            i.spinner(!0);
            n.post(u, {
                id: r.Id
            }).done(function() {
                t.data("kendoGrid").dataSource.read()
            }).fail(function() {
                siberia.validation.showGridNetworkError(!0)
            }).always(function() {
                i.spinner(!1)
            })
        }
        function f(r) {
            r.preventDefault();
            n(this).blur();
            i.spinner(!0);
            var u = t.data("kendoGrid")
              , f = u.dataItem(n(r.currentTarget).closest("tr"))
              , e = t.data("restore-lab-result-url");
            n.ajax({
                type: "POST",
                url: e,
                contentType: "application/json",
                data: JSON.stringify({
                    id: f.Id
                }),
                success: function(n) {
                    n && u.dataSource.remove(f)
                },
                error: function() {
                    siberia.validation.showGridNetworkError(!0)
                },
                complete: function() {
                    i.spinner(!1)
                }
            })
        }
        function e(i) {
            i.preventDefault();
            var r = t.data("kendoGrid")
              , u = r.dataItem(n(i.currentTarget).closest("tr"))
              , f = t.data("get-lab-result-file-url")
              , e = kendo.format(f, u.Id);
            window.open(e)
        }
        var t, i;
        return {
            init: r
        }
    }();
    n(document).ready(function() {
        siberia.errorLabResultsView.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.unassignedSecureMessages");
    siberia.unassignedSecureMessages = function() {
        function r() {
            if (t = n("#unassigned-messages-grid"),
            t.length) {
                i = n(".js-global-spinner-container");
                t.on("click", ".js-client-grid-download", f);
                t.on("click", ".js-assign-secure-message-to-practice", u);
                siberia.grid.initClientGrid({
                    gridSelector: "#unassigned-messages-grid"
                })
            }
        }
        function u(n) {
            siberia.practiceSelection.showAssignToPracticePopup(n)
        }
        function f(i) {
            i.preventDefault();
            var r = t.data("kendoGrid")
              , u = r.dataItem(n(i.currentTarget).closest("tr"))
              , f = t.data("download-hl7-url")
              , e = kendo.format(f, u.FileId);
            window.open(e)
        }
        var t, i;
        return {
            init: r
        }
    }();
    n(document).ready(function() {
        siberia.unassignedSecureMessages.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.xero");
    siberia.xero = function() {
        function l() {
            (t = n(".js-xero-container"),
            t.length) && (a(),
            n(".js-invoices-sync-button").click(function() {
                p("get-invoices-sync-url")
            }),
            n(".js-auth-button").click(y),
            n(".js-refresh-accounts").click(function(n) {
                n.stopImmediatePropagation();
                e()
            }),
            v())
        }
        function a() {
            var r, s, l;
            n(".js-settings-form").length && (r = h(),
            r.bind("change", function() {
                var t = !!this.value();
                n(u.AccountsSettings).toggle(t);
                t && (e(),
                c(u.Organisation))
            }),
            s = t.data("get-connected-organisations-url"),
            l = o(),
            t.spinner(!0),
            n.post(s, {
                xeroUserSettingId: l
            }).done(function(t) {
                if (t.unauthorizedExceptionOccured) {
                    window.location.href = t.redirectUrl;
                    return
                }
                if (t.errorOccured) {
                    f();
                    siberia.notification.showErrorNotification(t.errorMessage);
                    return
                }
                siberia.validation.clearValidationErrors(n(".js-settings-form"));
                var o = i(u.Organisation, t.Organisations);
                o && t.Organisations.length == 1 && !t.HasLinkedOrganisations && (r.value(t.Organisations[0].Id),
                f(),
                o = !1);
                n(u.AccountsSettings).toggle(!o);
                o ? f() : (e(),
                c(u.Organisation))
            }).error(function() {
                siberia.validation.showFormNetworkError(n(".js-settings-form"))
            }).complete(function() {
                t.spinner(!1)
            }))
        }
        function v() {
            var r = t.data("sync-again-url")
              , u = t.data("do-not-sync-url")
              , i = n("#Id").val();
            t.on("click", ".js-sync-again", function(n) {
                s(n, r, i)
            });
            t.on("click", ".js-do-not-sync", function(n) {
                s(n, u, i)
            })
        }
        function s(i, r, u) {
            i.preventDefault();
            var f = n(i.currentTarget)
              , e = f.data("id");
            n.post(r, {
                xeroSettingsId: u,
                syncResultId: e
            }).done(function() {
                n("#invoice-sync-history-grid").data("kendoGrid").dataSource.read()
            }).error(function() {
                siberia.validation.showFormNetworkError(n(".js-settings-form"))
            }).complete(function() {
                t.spinner(!1)
            })
        }
        function e() {
            if (n(".js-settings-form").length) {
                let r = t.data("get-accounts-data-url")
                  , u = {
                    xeroUserSettingId: o(),
                    organisationId: w()
                };
                t.spinner(!0);
                n.post(r, u).done(function(t) {
                    if (t.unauthorizedExceptionOccured) {
                        window.location.href = t.redirectUrl;
                        return
                    }
                    if (t.errorOccured || t.notConnectedOrganisationExceptionOccured) {
                        f();
                        siberia.notification.showErrorNotification(t.errorMessage);
                        return
                    }
                    siberia.validation.clearValidationErrors(n(".js-settings-form"));
                    var r;
                    r = i("#ItemAccountCode", t.RevenueAccounts);
                    r = i("#GstItemAccountCode", t.RevenueAccounts) || r;
                    r = i("#ItemTaxType", t.TaxRates) || r;
                    r = i("#GstItemTaxType", t.TaxRates) || r;
                    r = i("#CashPaymentAccountCode", t.BankAccounts) || r;
                    r = i("#CardPaymentAccountCode", t.BankAccounts) || r;
                    r = i("#ChequePaymentAccountCode", t.BankAccounts) || r;
                    r = i("#AdjustmentPaymentAccountCode", t.BankAccounts) || r;
                    r = i("#ClaimPaymentAccountCode", t.BankAccounts) || r;
                    r = i("#DepositPaymentAccountCode", t.BankAccounts) || r;
                    r = i("#BankTransferPaymentAccountCode", t.BankAccounts) || r;
                    r = i("#ExtrasCoverPaymentAccountCode", t.BankAccounts) || r;
                    r = i("#PatientCreditNoteLineItemAccountCode", t.RevenueAccounts) || r;
                    r = i("#PatientCreditNoteRefundAccountCode", t.BankAccounts) || r;
                    r && siberia.validation.showFormValidationError(n(".js-settings-form"), text.global.validation.reselectXeroAccounts);
                    n(".js-go-to-xero-revenue-accounts").toggle(t.RevenueAccounts.length === 0);
                    n(".js-go-to-xero-bank-accounts").toggle(t.BankAccounts.length === 0);
                    n(".js-go-to-xero-tax-rates").toggle(t.TaxRates.length === 0)
                }).error(function() {
                    siberia.validation.showFormNetworkError(n(".js-settings-form"))
                }).complete(function() {
                    t.spinner(!1)
                })
            }
        }
        function f() {
            r("#ItemAccountCode");
            r("#GstItemAccountCode");
            r("#ItemTaxType");
            r("#GstItemTaxType");
            r("#CashPaymentAccountCode");
            r("#CardPaymentAccountCode");
            r("#ChequePaymentAccountCode");
            r("#AdjustmentPaymentAccountCode");
            r("#ClaimPaymentAccountCode");
            r("#DepositPaymentAccountCode");
            r("#BankTransferPaymentAccountCode");
            r("#ExtrasCoverPaymentAccountCode");
            r("#PatientCreditNoteLineItemAccountCode");
            r("#PatientCreditNoteRefundAccountCode")
        }
        function r(t) {
            var i = n(t).data("kendoDropDownList");
            i.dataSource.data([])
        }
        function i(t, i) {
            var u = n(t).data("kendoDropDownList"), f = u.value(), e = !1, r;
            for (u.dataSource.data([]),
            r = 0; r < i.length; r++)
                u.dataSource.add(i[r]),
                f === i[r].Id && (e = !0);
            return u.value(f),
            !e
        }
        function y() {
            var i = t.data("get-auth-data-url");
            t.spinner(!0);
            n.post(i).done(function(n) {
                window.open(n.AuthorizeUrl, "_self")
            }).error(function() {
                siberia.validation.showFormNetworkError(n(".js-settings-form"))
            }).complete(function() {
                t.spinner(!1)
            })
        }
        function p(i) {
            t.spinner(!0);
            var r = t.data(i)
              , u = o();
            n.post(r, {
                xeroUserSettingId: u
            }).done(function(n) {
                window.location.href = n.redirectUrl
            }).error(function() {
                siberia.validation.showFormNetworkError(n(".js-settings-form"))
            }).complete(function() {
                t.spinner(!1)
            })
        }
        function o() {
            return n("#Id").val()
        }
        function w() {
            return h().value()
        }
        function h() {
            return n(u.Organisation).data("kendoDropDownList")
        }
        function c(t) {
            var i = n(t).data("kendoDropDownList");
            i && i.list.find(".k-list-optionlabel").hide()
        }
        var t, u = {
            Organisation: "#OrganisationId",
            AccountsSettings: "#organisation-accounts-settings"
        };
        return {
            init: l
        }
    }();
    n(document).ready(function() {
        siberia.xero.init()
    })
}(jQuery),
function(n) {
    function s() {
        var i = n(t);
        i.find('[name$="Id"]').val(-1);
        i.find('[name$="CreateDateStr"]').val("");
        i.find('[name$="Label"]').val("");
        i.find('[name$="IsActive"]').prop("checked", !1);
        i.find('[name$="Html"]').data("kendoEditor").value("");
        i.find(".js-create-date-container").hide()
    }
    function h(i) {
        var r = n(t);
        r.find('[name$="Id"]').val(i.Id);
        r.find(".js-create-date").text(i.CreateDateStr);
        r.find(".js-create-date-container").show();
        r.find('[name$="Label"]').val(i.Label);
        r.find('[name$="IsActive"]').prop("checked", i.IsActive);
        r.find('[name$="Html"]').data("kendoEditor").value(i.Html)
    }
    function o() {
        r.dataSource.read()
    }
    siberia.ensureObject("siberia.systemAlerts");
    var t = "#system-alert-popup", f = "#system-alerts-grid", e = ".js-system-alert-html a", i, r, u;
    siberia.systemAlerts = function() {
        function a(n) {
            c();
            siberia.popup.create(t, {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addC2CNotification,
                    width: "800"
                },
                clear: function() {
                    s()
                },
                success: function() {
                    o()
                },
                cancel: function() {
                    n.cancel()
                }
            })
        }
        function v(n) {
            c();
            siberia.popup.create(t, {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.editC2CNotification,
                    width: "800"
                },
                clear: function() {
                    h(n)
                },
                success: function() {
                    o()
                }
            })
        }
        function y(t) {
            var r = i.data("delete-item-url");
            return n.ajax({
                type: "POST",
                url: r,
                contentType: "application/json",
                data: JSON.stringify({
                    systemAlertId: t.Id
                })
            }),
            !0
        }
        function p() {
            siberia.grid.initClientGrid({
                gridSelector: f,
                saveAndCloseSelector: null,
                saveSelector: null,
                addAction: a,
                editAction: v,
                deleteAction: y,
                isCustomEditing: !0
            });
            r = n(f).data("kendoGrid")
        }
        function c() {
            var i = n(t).find(".js-text");
            i && i.data("kendoEditor") == null && i.kendoEditor({
                encoded: !1,
                tools: siberia.editor.commonTools()
            })
        }
        function w(t) {
            var e = i.data("change-status-url")
              , u = n(t.currentTarget).is(":checked")
              , o = n(t.currentTarget).closest("tr")
              , f = r.dataItem(o);
            n.ajax({
                type: "POST",
                url: e,
                contentType: "application/json",
                data: JSON.stringify({
                    systemAlertId: f.Id,
                    isActive: u
                }),
                success: function() {
                    f.set("IsActive", u)
                }
            })
        }
        function b(t) {
            var i = n(t.target).closest(".js-system-alert-body-container");
            if (t.preventDefault(),
            i != null) {
                var r = n(i)
                  , f = r.data("system-alert-id")
                  , e = u.data("system-alert-hide-url");
                n.ajax({
                    type: "POST",
                    url: e,
                    contentType: "application/json",
                    data: JSON.stringify({
                        systemAlertId: f
                    }),
                    success: function() {
                        r.hide(300)
                    }
                })
            }
        }
        function l(t, i) {
            n(i).attr("target", "_blank")
        }
        function k() {
            if (i = n(".js-system-alert-list-container"),
            i.length) {
                p();
                i.on("click", ".js-system-alert-active", w)
            }
            if (u = n(".js-active-system-alerts-container"),
            u.length)
                n("body").on("click", ".js-system-alert-hide", b);
            n(e).each(l);
            var t = n("#archived-system-alerts-grid");
            t.length && t.data("kendoGrid").bind("dataBound", function() {
                t.find(e).each(l)
            });
            n("#js-alerts-urgent-popup-edit").click(function() {
                siberia.urgentAlertPopup.open()
            })
        }
        return {
            init: k
        }
    }();
    n(document).ready(function() {
        siberia.systemAlerts.init()
    })
}(jQuery),
function(n) {
    function e() {
        n(t).find("#js-urgent-alert-preview").click(function() {
            c()
        });
        n(t).find("#js-urgent-alert-publish").click(function() {
            l()
        });
        n(t).find("#js-urgent-alert-unpublish").click(function() {
            a()
        })
    }
    function i() {
        var i = n(t).find(".js-text");
        return i.data("kendoEditor")
    }
    function o() {
        var t = n("#js-urgent-alert-preview")
          , r = n("#js-urgent-alert-publish")
          , u = i();
        u.value() ? (t.removeAttr("disabled"),
        r.removeAttr("disabled")) : (t.attr("disabled", "disabled"),
        r.attr("disabled", "disabled"))
    }
    function s() {
        if (i() == null) {
            var r = n(t).find(".js-text");
            r.kendoEditor({
                encoded: !1,
                tools: siberia.editor.commonTools(),
                change: o
            })
        }
    }
    function h() {
        s();
        var u = i()
          , e = n(t).find("#js-urgent-alert-preview")
          , r = n(t).find("#js-urgent-alert-publish")
          , o = n(t).find("#js-urgent-alert-unpublish");
        siberia.popup.create(t, {
            windowOptions: {
                title: text.global.titles.urgentAlertEdit,
                width: "800"
            },
            preLoadOptions: {
                dataUrl: n(t).data("get-notification-url"),
                dataType: "json",
                preLoadSuccess: function(i) {
                    var s, h;
                    return i.Errors ? (siberia.notification.showErrorPopup(siberia.notification.getFirstError(i.Errors)),
                    !1) : (i.Data && i.Data.notification ? (n(t).find("#Id").val(i.Data.notification.Id),
                    s = i.Data.notification.Html,
                    u.value(s),
                    s && (e.removeAttr("disabled"),
                    r.removeAttr("disabled")),
                    h = i.Data.notification.IsPublished,
                    h && (r.hide(),
                    o.show()),
                    f(!h)) : (n(t).find("#Id").val(null),
                    u.value(""),
                    e.attr("disabled", "disabled"),
                    r.attr("disabled", "disabled"),
                    r.show(),
                    o.hide()),
                    !0)
                },
                opened: function() {
                    u.focus()
                }
            }
        })
    }
    function c() {
        var t = i()
          , u = n(r);
        u.find(".popup-inner").html(t.value());
        siberia.popup.create(r, {
            windowOptions: {
                title: text.global.titles.urgentAlertTitle,
                width: n(r).data("width")
            }
        })
    }
    function l() {
        var f = i()
          , r = n(u);
        r.find("#Id").val(n(t).find("#Id").val());
        r.find("#Html").val(f.value());
        r.find(".popup-inner").html(f.value());
        siberia.popup.create(u, {
            windowOptions: {
                title: text.global.titles.urgentAlertTitle,
                width: n(u).data("width")
            },
            success: function() {
                siberia.popup.close(t)
            }
        })
    }
    function f(i) {
        n(t).find(".js-popup-text-readonly-overlay").css("z-index", i ? 0 : 100)
    }
    function a() {
        n(t).spinner(!0);
        n.post(n(t).data("unpublish-notification-url"), {
            Id: n(t).find("#Id").val()
        }).done(function(i) {
            i.Data && i.Data.error ? siberia.notification.showErrorPopup(i.Data.error) : i.Errors ? siberia.notification.showErrorPopup(siberia.notification.getFirstError(i.Errors)) : i.Data && (f(!0),
            n(t).find("#js-urgent-alert-publish").show(),
            n(t).find("#js-urgent-alert-unpublish").hide())
        }).fail(function() {
            siberia.notification.showErrorPopup(text.global.status.networkError)
        }).always(function() {
            n(t).spinner(!1)
        })
    }
    siberia.ensureObject("siberia.urgentAlertPopup");
    var t = "#urgent-alert-popup"
      , r = "#urgent-alert-preview-popup"
      , u = "#urgent-alert-publish-popup";
    n(document).ready(function() {
        e()
    });
    siberia.urgentAlertPopup = {
        open: h
    }
}(jQuery),
function(n) {
    function i() {
        if (t.length)
            t.on("click", ".js-next-wizard-step", function(t) {
                t.preventDefault();
                var i = n(t.currentTarget);
                r(i)
            })
    }
    function r(i) {
        i.blur();
        var r = i.closest("form")
          , u = n(".js-global-spinner-container");
        u.spinner(!0);
        r.ajaxSubmit({
            success: function(i) {
                if (siberia.validation.processAjaxErrors(r, i.Errors)) {
                    i ? t.html(i) : n("#practice-setup-wizard-warning").remove();
                    var u = n(".k-scheduler").data("kendoScheduler");
                    u && u.refresh()
                }
            },
            error: function() {
                siberia.validation.showFormNetworkError(r)
            },
            complete: function() {
                u.spinner(!1)
            }
        })
    }
    var t = n("#practice-setup-wizard-container");
    n(document).ready(function() {
        i()
    })
}(jQuery),
function(n) {
    function u() {
        n("[" + t + "]").each(function(i, r) {
            siberia.lazyLoading.registerReload(n(r).attr(t))
        })
    }
    function f(t, i) {
        var r = e(n(t.currentTarget)), u;
        r.length != 0 && (u = r.map(function(n) {
            return kendo.widgetInstance(n)
        }).filter(function(n) {
            return n != null && (i || !n.options.autoBind)
        }),
        u.forEach(function(n) {
            n.dataSource.read()
        }))
    }
    function e(i) {
        var r = i.attr(t), u;
        return r ? (u = r.split(" "),
        u.map(function(t) {
            var i = n("#" + t);
            return i.length > 0 ? i : null
        }).filter(function(n) {
            return n != null
        })) : []
    }
    siberia.ensureObject("siberia.lazyLoading");
    var t = "data-lazy-load-for"
      , i = ".siberiaLazyLoading"
      , r = "click" + i;
    siberia.lazyLoading.registerReload = function(u, e) {
        n("[" + t + "]").off(i).one(r, function(n) {
            f(n, e)
        })
    }
    ;
    n(document).ready(u)
}(jQuery),
function(n) {
    function r() {
        return n(f)
    }
    function t() {
        return r().find(h)
    }
    function o() {
        return n(c).data("kendoGrid")
    }
    function u() {
        var i = o();
        t().val() ? (n("#search-billable-item-popup").spinner(!0),
        i.dataSource.read().then(function() {
            siberia.popup.center("#search-billable-item-popup")
        }).always(function() {
            n("#search-billable-item-popup").spinner(!1)
        }),
        i.refresh()) : i.dataSource.data([])
    }
    function l(t) {
        return function(i) {
            var r = o().dataItem(n(i.currentTarget).closest("tr"));
            t.resolve({
                ItemNumber: r.ItemNumber,
                ItemType: r.ItemType,
                ExtrasCoverItemPrivateFeeId: r.ExtrasCoverItemPrivateFeeId
            })
        }
    }
    function s(t) {
        t.keyCode === 13 && n(t.target).blur()
    }
    siberia.ensureObject("siberia.functions.searchItems");
    var f = "#search-billable-item-popup"
      , h = ".js-search-billable-item-text"
      , c = "#search-billable-item-grid"
      , e = ".js-select-billable-item"
      , i = null;
    siberia.functions.searchItems = function(o) {
        var h = n.Deferred(function(n) {
            var f = l(n);
            siberia.popup.create("#search-billable-item-popup", {
                windowOptions: {
                    title: text.global.titles.popupSearchBillableItem,
                    width: "1000"
                },
                ajax: {
                    enabled: !1
                },
                clear: function() {
                    i = o;
                    t().val("")
                },
                init: function() {
                    var n = t();
                    n.on("change", u);
                    n.on("keyup", s);
                    r().one("click", e, f);
                    u()
                },
                close: function() {
                    i = null;
                    var o = t();
                    o.off("change", u);
                    o.off("keyup", s);
                    r().off("click", e, f);
                    n.reject()
                }
            })
        });
        return h.done(function() {
            siberia.popup.close(f)
        }),
        h
    }
    ;
    siberia.functions.searchItems.filter = function() {
        return n.extend({}, i, {
            text: t().val() || ""
        })
    }
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.export");
    siberia.export = function() {
        function r() {
            var i = n("#export-view-container")
              , r = n("#export-view-empty")
              , t = n("#export-list-grid").data("kendoGrid");
            return t ? (siberia.grid.initClientGrid({
                gridSelector: "#export-list-grid",
                deleteAction: u,
                confirmText: text.global.confirms.deleteExportRecord
            }),
            t.bind("dataBound", function() {
                var n = !!t.dataSource.data().length;
                i.toggle(n);
                r.toggle(!n)
            }),
            function() {
                t.dataSource.read()
            }
            ) : undefined
        }
        function u() {
            n("#export-list-grid").data("kendoGrid").dataSource.sync()
        }
        function f(t) {
            if (t) {
                e();
                var f = n("#export-popup")
                  , r = function() {
                    return f.find('input:checkbox[name="SelectedEntityTypeIds"]')
                }
                  , u = function() {
                    return f.find('input:checkbox[name="ExportEntityAll"]')
                }
                  , o = function() {
                    r().off();
                    n(this).is(":checked") ? r().prop("checked", !0).trigger("change") : r().prop("checked", !1).trigger("change");
                    r().on("change", s)
                }
                  , s = function() {
                    u().off();
                    r().filter(":checked").length == r().length ? u().prop("checked", !0).trigger("change") : u().prop("checked", !1).trigger("change");
                    u().on("change", o)
                };
                u().on("change", o);
                r().on("change", s);
                f.find(".js-back").click(i);
                siberia.popup.create("#export-popup", {
                    openPopupBtn: ".js-open-export-popup",
                    windowOptions: {
                        title: text.global.titles.addExportTask,
                        width: "400",
                        height: "500",
                        resizable: !0
                    },
                    clear: function() {
                        i();
                        r().removeAttr("checked");
                        u().removeAttr("checked")
                    },
                    success: function() {
                        f.spinner(!0);
                        t();
                        f.spinner(!1)
                    }
                })
            }
        }
        function e() {
            t();
            var i = n(".js-export-setup");
            i.find("#CompleteExport").change(t);
            i.find("#PartialExport").change(o);
            n(".xml-export-form .js-next").click(s)
        }
        function o() {
            var t = n(".js-export-setup"), i;
            t.find(".doctor-multiselect#DoctorIds").removeAttr("disabled");
            i = t.find(".js-client-multiselect #DoctorIds").data("kendoMultiSelect");
            i.enable(!0);
            t.find('input[type="checkbox"]').removeAttr("disabled");
            t.find("label.checkbox-label").removeAttr("disabled")
        }
        function t() {
            var t = n(".js-export-setup"), i;
            t.find(".doctor-multiselect#DoctorIds").prop("disabled", "disabled");
            i = t.find(".js-client-multiselect #DoctorIds").data("kendoMultiSelect");
            i.enable(!1);
            t.find('input[type="checkbox"]').prop("disabled", "disabled");
            t.find("label.checkbox-label").prop("disabled", "disabled")
        }
        function s() {
            var t = n(".xml-export-form");
            t.find(".js-export-setup").hide();
            t.find(".js-entities-to-export").show();
            t.find(".js-next").hide();
            t.find(".js-back").show();
            t.find(".js-popup-submit").show()
        }
        function i() {
            var t = n(".xml-export-form");
            t.find(".js-export-setup").show();
            t.find(".js-entities-to-export").hide();
            t.find(".js-next").show();
            t.find(".js-back").hide();
            t.find(".js-popup-submit").hide()
        }
        function h() {
            var n = r();
            f(n);
            n && n()
        }
        return {
            init: h
        }
    }();
    n(document).ready(function() {
        siberia.export.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.referral.popup");
    siberia.referral.popup = function() {
        function r() {
            var u = n("#Referral_StartDate").data("kendoDatePicker"), i, r;
            u && u.bind("change", t);
            i = n("#Referral_ExpirationMonths").data("kendoDropDownList");
            i && i.bind("change", t);
            r = n("#Referral_ReferralPersonId").data("kendoMultiSelect");
            r && r.bind("change", f)
        }
        function t() {
            var i = n("#Referral_StartDate").data("kendoDatePicker").value(), f = n("#Referral_expirationDate"), t, r, u;
            i != null && (t = n("#Referral_ExpirationMonths").data("kendoDropDownList").dataItem(),
            i && t && t.Months > 0 ? (u = new Date(i.getFullYear(),i.getMonth() + t.Months,i.getDate()),
            r = kendo.toString(u, siberia.config.formats.dateFormat)) : r = i && t && t.Months == -1 ? t.Text : "",
            f.text(r))
        }
        function u() {
            n("#Referral_Notes").val("");
            siberia.multiSelect.attachValue("#Referral_ReferralPersonId", [], "Id");
            n("#Referral_ExpirationMonths").data("kendoDropDownList").value(1);
            n("#Referral_DateOfReferral").data("kendoDatePicker").value("");
            n("#Referral_expirationDate").text("");
            n("#Referral_providerNumber").text("")
        }
        function f() {
            var r = n("#Referral_ReferralPersonId").data("kendoMultiSelect"), i, u;
            r.dataItems()[0] ? (i = r.dataItems()[0],
            n("#Referral_providerNumber").text(i.ProviderNumber),
            u = n("#Referral_ExpirationMonths").data("kendoDropDownList"),
            u.value(i.DefaultExpirationMonths),
            t()) : n("#Referral_providerNumber").text("")
        }
        function e(r, f, e, o, s) {
            siberia.popup.create("#referral-popup", {
                submitText: f,
                windowOptions: {
                    title: r,
                    width: "630"
                },
                clear: function() {
                    u();
                    e && e();
                    t();
                    i = n("#Referral_ReferralPersonId").data("kendoMultiSelect").value()[0]
                },
                success: function(t) {
                    if (o) {
                        var e = n("#Referral_ReferralPersonId").data("kendoMultiSelect")
                          , u = e.dataItems()[0]
                          , s = n("#Referral_DoctorId").data("kendoMultiSelect")
                          , r = s.dataItems()[0]
                          , f = n("#Referral_StartDate").data("kendoDatePicker").value()
                          , i = {
                            Id: "",
                            Name: u.FullName,
                            ProviderNumber: u.ProviderNumber,
                            DoctorId: r && r.Id,
                            DoctorFullName: r && r.Text,
                            StartDateStr: f ? kendo.toString(f, siberia.config.formats.dateFormat) : "",
                            ExpirationDateStr: n("#Referral_expirationDate").text(),
                            ReferralPersonSearchContact: u,
                            IsValid: !0
                        };
                        t.Referral && (i.Id = t.Referral.Id,
                        i.StartDateStr = t.Referral.StartDateStr,
                        i.ExpirationDateStr = t.Referral.EndReferralDateStr,
                        i.IsValid = t.Referral.IsValid);
                        o(i)
                    }
                },
                cancel: function() {
                    s && s()
                }
            })
        }
        function o() {
            return {
                text: n("#Referral_ReferralPersonId").data("kendoMultiSelect").input.val(),
                initialReferralId: i
            }
        }
        var i;
        return {
            init: r,
            openPopup: e,
            getInitialReferralId: o
        }
    }();
    n(document).ready(function() {
        siberia.referral.popup.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.doctorSettingsRequestForms");
    siberia.doctorSettingsRequestForms = function() {
        function h() {
            var t = n(".js-lab-request-form-type-switcher").find('input[name="js-lab-request-form-type"]:checked').val();
            return {
                requestFormType: t,
                userId: siberia.userSettings.getUserId()
            }
        }
        function c() {
            (t = n("#doctor-lab-request-forms-grid"),
            t.length) && (i = t.data("kendoGrid"),
            u = t.data("mark-as-interesting-url"),
            f = t.data("mark-as-not-interesting-url"),
            e = t.data("mark-as-default-url"),
            o = t.data("mark-all-as-interesting-url"),
            s = t.data("mark-all-as-not-interesting-url"),
            l(),
            a())
        }
        function l() {
            n(".js-lab-request-form-type-switcher").find('input[name="js-lab-request-form-type"]').change(function() {
                n(this).is(":checked") && (n(".js-check-all-text").text(text.global.labels.checkAll),
                n(".js-lab-request-form-check-all").prop("checked", !1),
                n(".js-lab-request-form-check-all").data("use-check-all", !0),
                i.dataSource.filter() ? i.dataSource.filter([]) : i.dataSource.read())
            })
        }
        function a() {
            n("#doctor-lab-request-forms-grid").on("click", ".js-lab-request-form-radio-btn", function() {
                var t = n(this);
                t.is(":checked") && r(t, e).done(function() {
                    t.closest(".js-request-form-row").find(".js-lab-request-form-checkbox").prop("checked", !0)
                })
            });
            n("#doctor-lab-request-forms-grid").on("click", ".js-lab-request-form-checkbox", function() {
                var t = n(this);
                t.is(":checked") ? r(t, u) : r(t, f).done(function() {
                    t.closest(".js-request-form-row").find(".js-lab-request-form-radio-btn").prop("checked", !1)
                })
            });
            n(".js-lab-request-form-check-all").change(function() {
                var t = n(this);
                t.data("use-check-all") ? r(t, o).done(function() {
                    i.dataSource.read();
                    n(".js-check-all-text").text(text.global.labels.uncheckAll);
                    n(".js-lab-request-form-check-all").prop("checked", !1);
                    n(".js-lab-request-form-check-all").data("use-check-all", !1)
                }) : r(t, s).done(function() {
                    i.dataSource.read();
                    n(".js-check-all-text").text(text.global.labels.checkAll);
                    n(".js-lab-request-form-check-all").prop("checked", !1);
                    n(".js-lab-request-form-check-all").data("use-check-all", !0)
                })
            })
        }
        function r(i, r) {
            var u = n.Deferred(), f;
            return t.spinner(!0),
            f = i.data("form-id"),
            n.post(r, {
                requestFormType: h().requestFormType,
                formId: f,
                userId: siberia.userSettings.getUserId()
            }).done(function(n) {
                siberia.validation.processGridActionAjaxErrors(n.Errors, !0) && u.resolve(n)
            }).fail(function(n) {
                u.reject(n);
                siberia.validation.showGridNetworkError(!0)
            }).always(function() {
                t.spinner(!1)
            }),
            u.promise()
        }
        var t, i, u, f, e, o, s;
        return {
            init: c,
            onReadDoctorRequestForms: h
        }
    }();
    n(document).ready(function() {
        siberia.doctorSettingsRequestForms.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.requestFormList");
    siberia.requestFormList = function() {
        function r() {
            return n(".js-request-form-type-switcher").find('input[name="js-request-form-type"]:checked').val()
        }
        function u() {
            return r() == siberia.config.requestFormType.Imaging ? text.global.titles.popupImagingForm : text.global.titles.popupPathologyForm
        }
        function h() {
            var n = r();
            return {
                requestFormType: n
            }
        }
        function f(t) {
            var i = n("#request-form-popup").find("#" + t).data("kendoUpload").wrapper;
            i.find('input:not([id="' + t + '"]), ul').each(function() {
                n(this).remove()
            });
            i.first().addClass("k-upload-empty")
        }
        function e() {
            n("#RequestForm_Type").val(siberia.config.requestFormType.Imaging);
            n("#RequestForm_Id").val(0);
            n("#RequestForm_Name").val("");
            n("#RequestForm_IsGeneric").prop("checked", !1);
            f(o);
            f(s)
        }
        function c(i) {
            var f = text.global.titles.addRequestForm(u());
            siberia.popup.create("#request-form-popup", {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: f,
                    width: "630"
                },
                clear: function() {
                    e();
                    n("#RequestForm_Type").val(r());
                    n("#request-form-popup").find(".js-required-on-create").addClass("required")
                },
                success: function() {
                    t.dataSource.read()
                },
                cancel: function() {
                    i.cancel()
                }
            })
        }
        function l(t) {
            n("#RequestForm_Type").val(t.Type);
            n("#RequestForm_Id").val(t.Id);
            n("#RequestForm_Name").val(t.Name);
            n("#RequestForm_IsGeneric").prop("checked", t.IsGeneric)
        }
        function a(i) {
            var r = text.global.titles.editRequestForm(u());
            siberia.popup.create("#request-form-popup", {
                submitText: text.global.labels.save,
                windowOptions: {
                    title: r,
                    width: "630"
                },
                clear: function() {
                    e();
                    l(i);
                    n("#request-form-popup").find(".js-required-on-create").removeClass("required")
                },
                success: function() {
                    t.dataSource.read()
                }
            })
        }
        function v() {
            n(".js-request-form-type-switcher").find('input[name="js-request-form-type"]').change(function() {
                n(this).is(":checked") && (t.dataSource.filter() ? t.dataSource.filter([]) : t.dataSource.read())
            })
        }
        function y() {
            (i = n("#request-forms-grid"),
            i.length) && (t = i.data("kendoGrid"),
            siberia.grid.initClientGrid({
                gridSelector: "#request-forms-grid",
                addAction: c,
                editAction: a
            }),
            v(),
            t.dataSource.read())
        }
        var o = "ImageFileUploader", s = "FieldsFileUploader", i, t;
        return {
            init: y,
            onReadRequestForms: h
        }
    }();
    n(document).ready(function() {
        siberia.requestFormList.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.requestFormsForPractices");
    siberia.requestFormsForPractices = function() {
        function t() {
            n("#practice-list-grid").length !== 0 && siberia.grid.initClientGrid({
                gridSelector: "#practice-list-grid",
                editAction: i
            })
        }
        function i(t) {
            var i = {
                dataUrl: n("#request-forms-for-practice-popup").data("get-forms-url"),
                data: {
                    practiceId: t.Id
                },
                dataType: "",
                preLoadSuccess: function(n) {
                    siberia.multiSelect.attachValue("#RequestFormsForPractice_ImagingRequestForms", n.ImagingForms, "Id");
                    siberia.multiSelect.attachValue("#RequestFormsForPractice_PathologyRequestForms", n.PathologyForms, "Id")
                }
            };
            siberia.popup.create("#request-forms-for-practice-popup", {
                preLoadOptions: i,
                windowOptions: {
                    title: text.global.titles.editRequestFormsForPractice,
                    width: "650"
                },
                clear: function() {
                    r(t)
                },
                success: function() {}
            })
        }
        function r(t) {
            n("#RequestFormsForPractice_PracticeId").val(t.Id)
        }
        return {
            init: t
        }
    }();
    n(document).ready(function() {
        siberia.requestFormsForPractices.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.letterAdditionalDataPopup");
    siberia.letterAdditionalDataPopup = function() {
        function u(t) {
            return function() {
                return {
                    patientId: i,
                    text: n(t).find(".js-additional-results-filter").val()
                }
            }
        }
        function o() {
            return function() {
                return {
                    patientId: i
                }
            }
        }
        function s() {
            return siberia.common.toArray(n(t).find('[data-role="grid"]')).map(function(t) {
                return n(t)
            })
        }
        function h(t) {
            return siberia.common.toArray(n(t).find('[data-role="grid"]')).map(function(t) {
                return n(t)
            })
        }
        function c() {
            var i = e.filter(function(n) {
                var t = n.Tags.filter(function(n) {
                    return r.includes(n)
                });
                return t && t.length === 0
            }).map(function(n) {
                return n.AdditionalDataGrid
            })
              , u = n(t).find(f)
              , o = u.filter(function() {
                return i.includes(n(this).data("key"))
            })
              , s = u.filter(function() {
                return !i.includes(n(this).data("key"))
            });
            return {
                activeColumns: s,
                inactiveColumns: o
            }
        }
        function l(u) {
            var f = n.Deferred();
            return i = u.patientId,
            r = u.additionalDataKeys,
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.popupLetterAttachMoreInformation
                },
                customSubmitUrl: u.submitUrl,
                extraData: function() {
                    return u.extraData
                },
                init: function() {
                    var t = c();
                    n(t.inactiveColumns).hide();
                    n(t.activeColumns).show();
                    h(t.activeColumns).forEach(function(n) {
                        var t = kendo.widgetInstance(n)
                          , i = function() {
                            t.dataSource.read();
                            t.refresh()
                        };
                        n.on("keypress.AdditionalDataPopup", ".js-additional-results-filter", function(n) {
                            n.which === 13 && i()
                        });
                        n.find(".js-additional-results-filter").val("");
                        i()
                    })
                },
                cancel: function(i) {
                    n(t).find('[type="checkbox"]').attr("disabled", "disabled");
                    i.canSubmitCancelOperation = !0
                },
                clear: function() {},
                close: function() {
                    s().forEach(function(n) {
                        n.off(".AdditionalDataPopup");
                        var t = n.data("kendoGrid");
                        t && t.dataSource.data([])
                    })
                },
                success: function(n) {
                    f.resolve(n)
                },
                error: function(n) {
                    f.reject(n)
                }
            }),
            f.promise()
        }
        var t = "#letter-additional-data-popup", f = ".letter-additional-data-column", i, r = [], e = [{
            AdditionalDataGrid: "PathologyResults",
            Tags: ["PatientPathologyResult", "PathologyResultBody"]
        }, {
            AdditionalDataGrid: "ImagingResults",
            Tags: ["PatientImagingResult", "ImagingResultBody"]
        }, {
            AdditionalDataGrid: "OperationReports",
            Tags: ["OperationReport"]
        }];
        return {
            init: l,
            findImagingLabResult: u("#LetterAdditionalData_ImagingResults"),
            findPathologyLabResult: u("#LetterAdditionalData_PathologyResults"),
            findOperationReports: o()
        }
    }()
}(jQuery),
function(n) {
    function t(t) {
        n("#InvoiceSurgeon_SerializedSurgeonItems").val(t);
        var i = JSON.parse(t).map(function(n) {
            return n.ItemNumber
        }).join(", ");
        n(".js-external-surgeon-item-numbers").text(i)
    }
    function i() {
        var c = n(".js-invoice-surgeon-contact")
          , u = n(".js-invoice-surgeon-total-schedule")
          , l = n(".js-invoice-surgeon-total-rebate")
          , r = n("#ExternalSurgeonTotalSchedule")
          , f = n("#ExternalSurgeonTotalRebate")
          , e = n("#ExternalSurgeonContactId")
          , o = n("#ExternalSurgeonContactFullName")
          , s = n("#InvoiceSurgeon_SurgeonContactId").data("kendoMultiSelect")
          , i = n("#InvoiceSurgeon_SurgeonInvoiceTotalSchedule").data("kendoNumericTextBox")
          , h = n("#InvoiceSurgeon_SurgeonInvoiceTotalRebate").data("kendoNumericTextBox");
        siberia.popup.create("#invoice-surgeon-popup", {
            ajax: {
                enabled: !1
            },
            windowOptions: {
                title: text.global.titles.popupInvoiceSetExternalSurgeon,
                width: "500"
            },
            clear: function() {
                var c, l, a, u, v;
                r.length && i && (c = r.val(),
                c ? i.value(kendo.parseFloat(c, "en-AU")) : i.value(0));
                l = f.val();
                l && h.value(kendo.parseFloat(l, "en-AU"));
                s.dataItems().length || (a = e.val(),
                u = o.val(),
                a && u && (v = {
                    Id: a,
                    FullName: u,
                    ProviderNumber: "",
                    Salutation: "",
                    FullNameWithoutSalutation: u,
                    DetailsLine1: "",
                    DetailsLine2: ""
                },
                siberia.multiSelect.attachValue("#InvoiceSurgeon_SurgeonContactId", [v], "Id")));
                n("#InvoiceSurgeon_IsMpr").val(n("#IsMpr").prop("checked"));
                n("#InvoiceSurgeon_IsMprForPrivateFeesApplied").val(n("#IsMprForPrivateFeesApplied").prop("checked"));
                n("#InvoiceSurgeon_MprTypeId").val(n("#MprTypeId").data("kendoDropDownList").value());
                t(n("#SerializedSurgeonItems").val())
            },
            success: function() {
                var w = s.dataItems(), t, a, v, p;
                if (w.length === 1 && (t = w[0],
                e.val(t.Id),
                o.val(t.FullName),
                c.text(t.FullName)),
                r.length && i && (a = i.value() || 0,
                a >= 0 && (r.val(kendo.toString(a, "0.00")),
                u.length && u.text(kendo.toString(a, "c")))),
                v = h.value() || 0,
                v >= 0 && (f.val(kendo.toString(v, "0.00")),
                l.text(kendo.toString(v, "c"))),
                n("#SerializedSurgeonItems").val(n("#InvoiceSurgeon_SerializedSurgeonItems").val()),
                n("#IsMpr").length > 0) {
                    var y = siberia.common.toBoolean(n("#InvoiceSurgeon_IsMpr").val())
                      , b = siberia.common.toBoolean(n("#InvoiceSurgeon_IsMprForPrivateFeesApplied").val())
                      , k = n("#InvoiceSurgeon_MprTypeId").val();
                    n("#IsMpr").prop("checked", y);
                    n("#IsMprForPrivateFeesApplied").prop("checked", b).prop("disabled", !y);
                    p = n("#MprTypeId").data("kendoDropDownList");
                    p.value(k);
                    p.enable(y)
                }
                siberia.invoice.refresh()
            }
        })
    }
    function r() {
        var i = siberia.invoiceItemsPopup.create({
            parentContainerSelector: "#invoice-surgeon-popup",
            popupSelector: "#invoice-surgeon-items-popup",
            getInvoiceSettingsAction: function() {
                return {
                    InvoiceId: n("#InvoiceId").val(),
                    IsMpr: siberia.common.toBoolean(n("#InvoiceSurgeon_IsMpr").val()),
                    IsMprForPrivateFeesApplied: siberia.common.toBoolean(n("#InvoiceSurgeon_IsMprForPrivateFeesApplied").val()),
                    MprTypeId: n("#InvoiceSurgeon_MprTypeId").val(),
                    SerializedItems: n("#InvoiceSurgeon_SerializedSurgeonItems").val()
                }
            },
            successAction: function(r) {
                var f = n("#InvoiceSurgeon_SurgeonInvoiceTotalSchedule").data("kendoNumericTextBox"), e = n("#InvoiceSurgeon_SurgeonInvoiceTotalRebate").data("kendoNumericTextBox"), o = r.Data, u;
                f && f.value(o.MbsTotalSchedule);
                e && e.value(o.MbsTotalRebate);
                u = i.collectItemsPopupData();
                u && (n("#InvoiceSurgeon_IsMpr").val(u.IsMpr),
                n("#InvoiceSurgeon_IsMprForPrivateFeesApplied").val(u.IsMprForPrivateFeesApplied),
                n("#InvoiceSurgeon_MprTypeId").val(u.MprTypeId),
                t(u.SerializedItems))
            }
        })
    }
    function u() {
        n("body").on("click", "#set-external-surgeon-button", function(t) {
            t.preventDefault();
            n(this).blur();
            i()
        });
        n("#invoice-surgeon-popup").on("click", ".js-external-surgeon-items-popup", function(t) {
            t.preventDefault();
            n(this).blur();
            r()
        })
    }
    n(document).ready(function() {
        u()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.practiceSubscription");
    siberia.practiceSubscription = function() {
        function u() {
            if (n(".js-practice-subscription-container").length !== 0) {
                var i = n("#js-bank-card-form");
                i.length && (i.find("#Cvc").attr("type", "password"),
                i.find("#Cvc").siblings("input").attr("type", "password"));
                n(".js-submit-bank-card-button").click(h);
                n(".js-save-recharge-settings").click(s);
                siberia.subscription.initPrepaidServicesReport();
                siberia.grid.loadTabStripGrids("#SubscriptionSettingsTabs", ".js-subscription-grid");
                t = n("#bank-cards-grid").data("kendoGrid");
                siberia.grid.initClientGrid({
                    gridSelector: "#bank-cards-grid",
                    addAction: f,
                    deleteAction: o
                });
                n("#bank-cards-grid").on("click", ".js-set-as-default", e)
            }
        }
        function f(n) {
            siberia.popup.create("#js-bank-card-form-popup", {
                windowOptions: {
                    width: "430",
                    title: text.global.titles.provideBankCard
                },
                clear: function() {
                    i()
                },
                cancel: function() {
                    n.cancel()
                }
            })
        }
        function i() {
            n("#CardNumber").val("");
            n("#ExpirationMonth").val("");
            n("#ExpirationYear").val("");
            n("#Cvc").data("kendoNumericTextBox").value("")
        }
        function e(t) {
            t.preventDefault();
            var i = n(t.currentTarget);
            r(i.data("id"), "set-bank-card-as-default-url")
        }
        function o(n) {
            r(n.Id, "delete-bank-card-url")
        }
        function r(i, r) {
            var u = n("#bank-cards-grid");
            u.spinner(!0);
            n.post(n("#bank-cards-grid").data(r), {
                id: i
            }).done(function(n) {
                n.Errors && siberia.notification.showErrorNotification(n.Errors[""].errors[0], !0);
                t.dataSource.read()
            }).fail(function() {
                siberia.validation.showGridNetworkError(!0)
            }).always(function() {
                u.spinner(!1)
            })
        }
        function s() {
            var t = n("#js-update-recharge-settings-form");
            t.spinner(!0);
            var i = t.data("update-recharge-settings-url")
              , r = n("#RechargeAmount").data("kendoNumericTextBox").value()
              , u = n("#RechargePoint").data("kendoNumericTextBox").value();
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                data: JSON.stringify({
                    RechargeAmount: r,
                    RechargePoint: u
                }),
                success: function(n) {
                    siberia.validation.processAjaxErrors(t, n.Errors) && siberia.notification.showSuccessNotification(text.global.status.dataSaved, t)
                },
                error: function() {
                    data[""] && siberia.validation.showFormValidationError(t, data[""].errors)
                },
                complete: function() {
                    t.spinner(!1)
                }
            })
        }
        function h() {
            var r = n("#js-bank-card-form"), u;
            r.spinner(!0);
            u = r.data("is-first-bank-card") ? r.data("create-stripe-customer-url") : r.data("update-bank-card-url");
            c(r).then(function(f) {
                var e = f.id;
                return n.post(u, {
                    token: e
                }).done(function(n) {
                    siberia.validation.processAjaxErrors(r, n.Errors) && (i(),
                    r.data("is-first-bank-card", 0),
                    siberia.popup.close("#js-bank-card-form-popup"),
                    t.dataSource.read())
                })
            }).fail(function(n) {
                siberia.validation.showFormValidationError(r, n)
            }).always(function() {
                r.spinner(!1)
            })
        }
        function c(t) {
            var i = n.Deferred();
            return Stripe.card.createToken(t, function(n, t) {
                t.error ? i.reject(t.error.message) : i.resolve(t)
            }),
            i.promise()
        }
        var t;
        return {
            init: u
        }
    }();
    n(document).ready(function() {
        siberia.practiceSubscription.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.subscription");
    siberia.subscription = function() {
        function b() {
            var u = r.attr("data-default-subscription-price-details"), t;
            u && (r.spinner(!0),
            t = r.find("form"),
            n.post(u).done(function(n) {
                if (n.Errors) {
                    siberia.validation.processAjaxErrors(t, n.Errors);
                    return
                }
                i.users.set("doctorPrice", n.Data.DoctorPrice);
                i.users.set("doctorGst", n.Data.DoctorGst);
                i.users.set("practiceAdminPrice", n.Data.PracticeAdminPrice);
                i.users.set("practiceAdminGst", n.Data.PracticeAdminGst);
                i.users.set("receptionistPrice", n.Data.ReceptionistPrice);
                i.users.set("receptionistGst", n.Data.ReceptionistGst);
                i.users.set("registrarPrice", n.Data.RegistrarPrice);
                i.users.set("registrarGst", n.Data.RegistrarGst);
                i.services.set("voiceRecognitionPrice", n.Data.VoiceRecognitionPrice);
                i.services.set("voiceRecognitionGst", n.Data.VoiceRecognitionGst);
                i.services.set("secureMessagePrice", n.Data.SecureMessagePrice);
                i.services.set("secureMessageGst", n.Data.SecureMessageGst);
                i.services.set("smsPrice", n.Data.SmsPrice);
                i.services.set("smsGst", n.Data.SmsGst);
                g()
            }).fail(function() {
                siberia.validation.showFormNetworkError(t)
            }).always(function() {
                r.spinner(!1)
            }))
        }
        function k(t, i, u, f) {
            var e = i[u];
            n.post(t, {
                price: e
            }).done(function(n) {
                if (n.Errors) {
                    siberia.validation.processAjaxErrors(r.find("form"), n.Errors);
                    return
                }
                i.set(f, n.Data.Gst)
            }).fail(function() {
                siberia.validation.showFormNetworkError()
            })
        }
        function d() {
            var t = u.attr("data-recalculate-practice-subscription-url"), n;
            t && (u.spinner(!0),
            n = u.find("form"),
            n.ajaxSubmit({
                url: t,
                success: function(t) {
                    if (t.Errors) {
                        siberia.validation.processAjaxErrors(n, t.Errors);
                        return
                    }
                    y(t.Data, !0)
                },
                error: function() {
                    siberia.validation.showFormNetworkError(n)
                },
                complete: function() {
                    u.spinner(!1)
                }
            }))
        }
        function h(n, t, i) {
            t.bind("change", function(r) {
                var u = i[r.field];
                u && k(n, t, r.field, i[r.field])
            })
        }
        function f(t) {
            return function(i) {
                n.inArray(i.field, t) >= 0 && d()
            }
        }
        function g() {
            var n = r.attr("data-calculate-subscription-gst-amount");
            n && (h(n, i.users, s),
            h(n, i.services, s))
        }
        function nt() {
            t.bind("change", c);
            t.users.bind("change", l);
            t.services.bind("change", a)
        }
        function tt() {
            t.unbind("change", c);
            t.users.unbind("change", l);
            t.services.unbind("change", a)
        }
        function it() {
            r = n("#default-subscription-prices");
            i = kendo.observable({
                users: {
                    doctorPrice: 0,
                    doctorGst: "",
                    practiceAdminPrice: 0,
                    practiceAdminGst: "",
                    receptionistPrice: 0,
                    receptionistGst: "",
                    registrarPrice: 0,
                    registrarGst: ""
                },
                services: {
                    voiceRecognitionPrice: 0,
                    voiceRecognitionGst: "",
                    secureMessagePrice: 0,
                    secureMessageGst: "",
                    smsPrice: 0,
                    smsGst: ""
                }
            });
            kendo.bind(r, i);
            n(".js-update-default-subscription-prices").click(function(t) {
                t.preventDefault();
                var i = n(this).closest("form")
                  , r = n(this);
                siberia.common.submitForm(i, r, text.global.status.subscriptionPricesUpdated)
            });
            b()
        }
        function rt() {
            u = n("#practice-subscription-popup");
            t = kendo.observable({
                users: {
                    doctorParts: 0,
                    doctorPrice: 0,
                    doctorTotal: "",
                    doctorGstTotal: "",
                    practiceAdminParts: 0,
                    practiceAdminPrice: 0,
                    practiceAdminTotal: "",
                    practiceAdminGstTotal: "",
                    receptionistParts: 0,
                    receptionistPrice: 0,
                    receptionistTotal: "",
                    receptionistGstTotal: "",
                    registrarParts: 0,
                    registrarPrice: 0,
                    registrarTotal: "",
                    registrarGstTotal: ""
                },
                services: {
                    voiceRecognitionCount: 0,
                    voiceRecognitionPrice: 0,
                    voiceRecognitionTotal: "",
                    voiceRecognitionGstTotal: "",
                    secureMessageRechargeAmount: "",
                    secureMessageRechargePoint: "",
                    secureMessagePrice: 0,
                    secureMessageCountByRechargeAmount: "",
                    smsRechargeAmount: "",
                    smsRechargePoint: "",
                    smsPrice: 0,
                    smsCountByRechargeAmount: ""
                },
                discount: 0,
                subTotal: "",
                gstTotal: "",
                subscriptionTotal: ""
            });
            kendo.bind(u, t)
        }
        function ut() {
            n("#practices-for-subscription-grid").length && (e = n("#practice-subscription-popup"),
            o = n("#practices-for-subscription-grid").data("kendoGrid"),
            siberia.grid.initClientGrid({
                gridSelector: "#practices-for-subscription-grid",
                editAction: et
            }),
            siberia.grid.loadTabStripGrids("#SubscriptionSettingsTabs", ".js-subscription-grid"),
            st(),
            ht(),
            v(),
            it(),
            rt())
        }
        function v() {
            n(".js-get-report").click(function(t) {
                var i = n(this);
                t.preventDefault();
                i.blur();
                ft(i.closest("form"))
            });
            n(".js-reset").click(function() {
                n("#From").data("kendoDatePicker").value("");
                n("#To").data("kendoDatePicker").value("")
            })
        }
        function ft(t) {
            var i = n(".js-global-spinner-container");
            i.spinner(!0);
            t.ajaxSubmit({
                success: function(i) {
                    i.Errors && siberia.validation.processAjaxErrors(t, i.Errors);
                    var r = n(".js-report-grid-container");
                    r && (r.empty(),
                    r.append(i))
                },
                complete: function() {
                    i.spinner(!1)
                },
                error: function() {
                    i.spinner(!1);
                    siberia.validation.showFormNetworkError(t)
                }
            })
        }
        function et(t) {
            siberia.popup.create("#practice-subscription-popup", {
                submitUrlAttr: "data-submit-url",
                preLoadOptions: {
                    dataUrl: e.data("get-practice-subscription-url"),
                    data: {
                        practiceId: t.Id
                    },
                    dataType: "json",
                    preLoadSuccess: function(t) {
                        var i = n("#PracticeSubscription_StartDate").data("kendoDatePicker");
                        i && (i.enable(!0),
                        t.Data.StartDate ? i.value(kendo.parseDate(t.Data.StartDate, siberia.config.formats.dateFormat)) : i.value(new Date),
                        i.enable(!t.Data.IsSubscriptionStarted));
                        n(".js-create-practice-subscrition").toggle(!t.Data.IsSubscriptionCreated);
                        n(".js-update-practice-subscrition").toggle(t.Data.IsSubscriptionCreated);
                        y(t.Data.Totals, !1)
                    }
                },
                windowOptions: {
                    title: text.global.titles.practiceSubscription,
                    width: "800"
                },
                clear: function() {
                    ot(t)
                },
                success: function() {
                    w()
                }
            })
        }
        function y(n, i) {
            tt();
            i || (t.users.set("doctorParts", n.DoctorParts),
            t.users.set("doctorPrice", n.DoctorPrice));
            t.users.set("doctorTotal", n.DoctorsTotal);
            t.users.set("doctorGstTotal", n.DoctorsGstTotal);
            i || (t.users.set("practiceAdminParts", n.PracticeAdminParts),
            t.users.set("practiceAdminPrice", n.PracticeAdminPrice));
            t.users.set("practiceAdminTotal", n.PracticeAdminsTotal);
            t.users.set("practiceAdminGstTotal", n.PracticeAdminsGstTotal);
            i || (t.users.set("receptionistParts", n.ReceptionistParts),
            t.users.set("receptionistPrice", n.ReceptionistPrice));
            t.users.set("receptionistTotal", n.ReceptionistsTotal);
            t.users.set("receptionistGstTotal", n.ReceptionistsGstTotal);
            i || (t.users.set("registrarParts", n.RegistrarParts),
            t.users.set("registrarPrice", n.RegistrarPrice));
            t.users.set("registrarTotal", n.RegistrarsTotal);
            t.users.set("registrarGstTotal", n.RegistrarsGstTotal);
            i || (t.services.set("voiceRecognitionCount", n.VoiceRecognitionCount),
            t.services.set("voiceRecognitionPrice", n.VoiceRecognitionPrice));
            t.services.set("voiceRecognitionTotal", n.VoiceRecognitionsTotal);
            t.services.set("voiceRecognitionGstTotal", n.VoiceRecognitionsGstTotal);
            t.services.set("secureMessageRechargeAmount", n.RechargeAmount);
            t.services.set("secureMessageRechargePoint", n.RechargePoint);
            i || t.services.set("secureMessagePrice", n.SecureMessagePrice);
            t.services.set("secureMessageCountByRechargeAmount", n.SecureMessageCountByRechargeAmount);
            t.services.set("smsRechargeAmount", n.RechargeAmount);
            t.services.set("smsRechargePoint", n.RechargePoint);
            i || t.services.set("smsPrice", n.SmsPrice);
            t.services.set("smsCountByRechargeAmount", n.SmsCountByRechargeAmount);
            i || t.set("discount", n.SubscriptionDiscount);
            t.set("subTotal", n.SubscriptionSubTotal);
            t.set("gstTotal", n.SubscriptionGstTotal);
            t.set("subscriptionTotal", n.SubscriptionTotal);
            nt()
        }
        function ot(t) {
            n("#PracticeSubscription_PracticeId").val(t.Id)
        }
        function st() {
            var t = n("#practices-for-subscription-grid").data("turn-on-can-use-subscription");
            p(t, ".js-turn-on-can-use-subscription")
        }
        function ht() {
            var t = n("#practices-for-subscription-grid").data("turn-off-can-use-subscription");
            p(t, ".js-turn-off-can-use-subscription")
        }
        function p(t, i) {
            n("#practices-for-subscription-grid").on("click", i, function(i) {
                var r = n(i.currentTarget).data("id");
                n.post(t, {
                    practiceId: r
                }).done(function(n) {
                    n.Errors && siberia.notification.showErrorNotification(n.Errors[""].errors[0], !0);
                    w()
                }).fail(function() {
                    siberia.validation.showGridNetworkError(!0)
                })
            })
        }
        function w() {
            o.dataSource.read()
        }
        var e, o, r, i, s = {
            doctorPrice: "doctorGst",
            practiceAdminPrice: "practiceAdminGst",
            receptionistPrice: "receptionistGst",
            registrarPrice: "registrarGst",
            voiceRecognitionPrice: "voiceRecognitionGst",
            secureMessagePrice: "secureMessageGst",
            smsPrice: "smsGst"
        }, u, t, c = f(["discount"]), l = f(["doctorParts", "doctorPrice", "practiceAdminParts", "practiceAdminPrice", "receptionistParts", "receptionistPrice", "registrarParts", "registrarPrice"]), a = f(["voiceRecognitionCount", "voiceRecognitionPrice", "secureMessagePrice", "smsPrice"]);
        return {
            init: ut,
            initPrepaidServicesReport: v
        }
    }();
    n(document).ready(function() {
        siberia.subscription.init()
    })
}(jQuery),
function(n) {
    function r() {
        window.onbeforeunload = null;
        window.location.reload()
    }
    function u() {
        $conciergeSuperAdminList.data("kendoGrid").dataSource.read();
        $conciergeSuperAdminListGranted.data("kendoGrid").dataSource.read();
        $conciergeSuperAdminListRequested.data("kendoGrid").dataSource.read();
        $conciergeSuperAdminListHistory.data("kendoGrid").dataSource.read()
    }
    function f() {
        return i(n(this), "toggle-url"),
        !1
    }
    function e() {
        return i(n(this), "pause-url"),
        !1
    }
    function o() {
        return i(n(this), "restart-url"),
        !1
    }
    function s() {
        return i(n(this), "start-manual-url"),
        !1
    }
    function h() {
        return i(n(this), "clear-message-url"),
        !1
    }
    function i(t, i) {
        var r = t.data("task-name")
          , u = t.data(i);
        r && u && n.ajax({
            type: "POST",
            url: u,
            contentType: "application/json",
            data: JSON.stringify({
                jobName: r
            }),
            success: function(n) {
                var i = t.closest("tr");
                i.hasClass("k-detail-row") && (i = i.prev("tr"));
                c(i, n)
            }
        })
    }
    function c(t, i) {
        var h = n("#scheduled-tasks-grid"), r = h.data("kendoGrid"), e, u, o, f, s;
        r && (e = r.dataSource.data().find(function(n) {
            return n.TaskName === i.TaskName
        }),
        n.extend(e, i),
        u = t.next(".k-detail-row"),
        u.length && (o = n(r.detailTemplate(i)),
        u.html(o.html())),
        f = n(r.rowTemplate(i)),
        s = t.find(".k-hierarchy-cell a").attr("class"),
        f.find(".k-hierarchy-cell a").attr("class", s),
        t.html(f.html()))
    }
    function l() {
        n("#refresh-superadmin-concierge-list").on("click", u);
        if ($conciergeSuperAdminList = n("#concierge-superadmin-grid-list"),
        $conciergeSuperAdminListGranted = n("#concierge-superadmin-grid-granted"),
        $conciergeSuperAdminListRequested = n("#concierge-superadmin-grid-requested"),
        $conciergeSuperAdminListHistory = n("#concierge-superadmin-grid-history"),
        "selectedPracticeId"in siberia.config) {
            var i = siberia.localStorage.getItem(siberia.constants.localStorageSuperAdminKey) || t.unknown;
            i == t.unknown && siberia.localStorage.setJSON(siberia.constants.localStorageSuperAdminKey, siberia.config.selectedPracticeId == -1 ? t.none : t.selected);
            siberia.localStorage.registerKeyChanges(siberia.constants.localStorageSuperAdminKey, function(n) {
                var i = n.newValue;
                i != t.unknown && r()
            });
            n(document.body).on("mouseup", ".js-leave-practice,.js-enter-practice", function() {
                siberia.localStorage.setItem(siberia.constants.localStorageSuperAdminKey, t.unknown)
            });
            n(document.body).on("click", ".js-toggle-job", f);
            n(document.body).on("click", ".js-pause-task", e);
            n(document.body).on("click", ".js-restart-task", o);
            n(document.body).on("click", ".js-start-manual-task", s);
            n(document.body).on("click", ".js-clear-task-message", h)
        }
    }
    var t = {
        none: "none",
        unknown: "unknown",
        selected: "selected"
    };
    n(document).ready(l)
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.superAdminTotalsReport");
    siberia.superAdminTotalsReport = function() {
        function t() {
            var t = n(".js-totals-report-containers");
            !t.length;
            n(".js-get-totals").click(function(t) {
                var r = n(this);
                t.preventDefault();
                r.blur();
                i(r.closest("form"))
            });
            siberia.grid.setExpandMode("#practice-user-total-grid")
        }
        function i(t) {
            var r = n(".js-global-spinner-container"), i;
            r.spinner(!0);
            i = n(".js-total-report-placeholder");
            t.ajaxSubmit({
                success: function(r) {
                    r.Errors && (i.html(""),
                    siberia.validation.processAjaxErrors(t, r.Errors));
                    var u = kendo.template(n("#js-totals-report-template").html());
                    i.html(u(r))
                },
                error: function() {
                    i.html("");
                    siberia.validation.showFormNetworkError(t)
                },
                complete: function() {
                    r.spinner(!1)
                }
            })
        }
        return {
            init: t
        }
    }();
    n(document).ready(function() {
        siberia.superAdminTotalsReport.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.superAdminWarningsReport");
    siberia.superAdminWarningsReport = function() {
        function t(t) {
            var i;
            t.preventDefault();
            i = n("#administrator-warnings-report-grid");
            i.spinner(!0);
            var u = i.data("dismiss-warnings-url")
              , r = n(t.currentTarget)
              , f = r.data("practice-id");
            n.ajax({
                type: "POST",
                url: u,
                data: {
                    practiceId: f,
                    warningTypeId: r.data("warning-type-id")
                },
                success: function() {
                    i.data("kendoGrid").dataSource.read()
                },
                complete: function() {
                    i.spinner(!1)
                }
            })
        }
        function i(t) {
            var i;
            t.preventDefault();
            i = n("#administrator-warnings-report-grid");
            i.spinner(!0);
            var u = i.data("dismiss-single-warning-url")
              , r = n(t.currentTarget)
              , f = r.data("grid-id");
            n.ajax({
                type: "POST",
                url: u,
                data: {
                    Id: r.data("warning-id")
                },
                success: function() {
                    var t = n("#administrator-warnings-report-grid-" + f).data("kendoGrid");
                    t && t.dataSource.read()
                },
                complete: function() {
                    i.spinner(!1)
                }
            })
        }
        function r() {
            var r = n("#administrator-warnings-report-grid");
            if (r.length !== 0) {
                r.on("click", ".js-dismiss-warnings", t);
                r.on("click", ".js-dismiss-single-warning", i)
            }
        }
        return {
            init: r
        }
    }();
    n(document).ready(function() {
        siberia.superAdminWarningsReport.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.generateOneTimePassword");
    siberia.generateOneTimePassword = function() {
        function i() {
            var i = n(".js-one-time-password-container");
            i.length && (t = n("#one-time-password-popup"),
            r())
        }
        function r() {
            siberia.popup.create("#one-time-password-popup", {
                openPopupBtn: ".js-generate-one-time-password",
                windowOptions: {
                    title: text.global.titles.popupOneTimePassword
                },
                clear: function() {
                    n(".js-one-time-password-output").hide();
                    n(".js-one-time-password").text("")
                },
                success: function(t, i, r) {
                    r.cancelClose = !0;
                    n("#OneTimePassword_CurrentPassword").val("");
                    n(".js-one-time-password-output").show();
                    n(".js-one-time-password").text(t.Data.Password)
                },
                close: function() {
                    n(".js-one-time-password").text("")
                }
            })
        }
        var t;
        return {
            init: i
        }
    }();
    n(document).ready(function() {
        siberia.generateOneTimePassword.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.choosLoginAccount");
    siberia.choosLoginAccount = function() {
        function t() {
            var t = n(".js-login-account-container")
              , i = t.find(".js-login-account");
            i.length != 0 && t.length != 0 && i.click(function(t) {
                t.preventDefault();
                var u = n(t.currentTarget)
                  , f = u.data("id")
                  , e = n("#ReturnUrl").val()
                  , r = u.closest("form")
                  , i = n(".js-global-spinner-container");
                i.spinner(!0);
                n.post(r.get(0).action, {
                    Id: f,
                    ReturnUrl: e
                }).done(function(t) {
                    siberia.validation.processAjaxErrors(r, t.Errors) ? t.ShowPatientPortalLoginRedirectPage ? (i.spinner(!1),
                    n("#new-patient-portal-login-page").show(),
                    n("#redirect-portal-link").attr("href", t.PatientPortalLinkUrl)) : t.RedirectUrl && (t.LoginAccount ? siberia.partialLogout.setNewLoginAccount(t.LoginAccount).done(function() {
                        window.location.href = t.RedirectUrl
                    }) : window.location.href = t.RedirectUrl) : i.spinner(!1)
                }).fail(function() {
                    siberia.validation.showFormNetworkError(r);
                    i.spinner(!1)
                })
            })
        }
        return {
            init: t
        }
    }();
    n(document).ready(function() {
        siberia.choosLoginAccount.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.prescriptionsCommon");
    siberia.prescriptionsCommon = function() {
        function i(t) {
            return t.value().length == 0 ? (siberia.validation.clearValidationErrors(n("#Prescription_GlobalDrugId").closest("form")),
            n("#Prescription_StartDate").data("kendoDatePicker").value(""),
            n("#Prescription_EndDate").data("kendoDatePicker").value(""),
            n("#Prescription_MedicationCategoryId").data("kendoDropDownList").value(""),
            n("#Prescription_Instructions").val(""),
            n("#Prescription_Repeats").data("kendoNumericTextBox").value(""),
            n("#Prescription_Quantity").data("kendoNumericTextBox").value(""),
            n("#Prescription_RepeatInterval").data("kendoNumericTextBox").value(""),
            n("#Prescription_FormId").val(""),
            n("#Prescription_PackId").val(""),
            n("#Prescription_PhoneApproval").val(""),
            n(".js-drug-form").text(""),
            n(".js-drug-strength").text(""),
            n(".js-drug-composition").text(""),
            n(".js-dose-information").text(""),
            siberia.multiSelect.clearValue("#Prescription_FrequencyId"),
            siberia.multiSelect.clearValue("#Prescription_AdministrationRouteId"),
            siberia.multiSelect.clearValue("#Prescription_MedicationDoseId"),
            !0) : !1
        }
        function r(t, i, r, u, f, e, o, s) {
            n("#Prescription_DrugId").val(t);
            n("#Prescription_Repeats").data("kendoNumericTextBox").value(o);
            n("#Prescription_Quantity").data("kendoNumericTextBox").value(s);
            n("#Prescription_IsBrandSubstitutionNotPermitted").prop("checked", r);
            n(".js-drug-form").html(e);
            n(".js-drug-strength").html(f);
            n(".js-drug-composition").html(i);
            n(".js-dose-information").html(u)
        }
        function u(n, t) {
            n.find('input[type="text"]').each(function() {
                this.disabled = !t
            });
            n.find(".k-state-focused").removeClass("k-state-focused");
            var i = n.find("#Prescription_StartDate").data("kendoDatePicker");
            i && i.enable(t);
            i = n.find("#Prescription_EndDate").data("kendoDatePicker");
            i && i.enable(t);
            i = n.find("#Prescription_MedicationDoseId").data("kendoMultiSelect");
            i && i.enable(t);
            i = n.find("#Prescription_AdministrationRouteId").data("kendoMultiSelect");
            i && i.enable(t);
            i = n.find("#Prescription_FrequencyId").data("kendoMultiSelect");
            i && i.enable(t);
            i = n.find("#Prescription_MedicationCategoryId").data("kendoDropDownList");
            i && i.enable(t);
            i = n.find("#Prescription_Instructions");
            i && i.enable(t);
            i = n.find("#Prescription_Repeats").data("kendoNumericTextBox");
            i && i.enable(t);
            i = n.find("#Prescription_Quantity").data("kendoNumericTextBox");
            i && i.enable(t);
            i = n.find("#Prescription_RepeatInterval").data("kendoNumericTextBox");
            i && i.enable(t)
        }
        function f(t) {
            var r = n("#Prescription_GlobalDrugId").data("kendoMultiSelect").dataItems()
              , i = r[0]
              , u = function(t) {
                var i = n(t).data("kendoMultiSelect");
                return i ? i.value()[0] : null
            };
            return {
                DrugId: i.DrugId,
                GlobalDrugId: i.GlobalDrugId,
                HasMimsInformation: i.HasMimsInformation,
                HasMimsAnnualInformation: i.HasMimsAnnualInformation,
                IsMimsDrug: i.IsMimsDrug,
                MedicationCategoryId: n("#Prescription_MedicationCategoryId").val(),
                MedicationDoseId: n("#Prescription_MedicationDoseId").data("kendoMultiSelect").value()[0],
                FrequencyId: t ? null : n("#Prescription_FrequencyId").data("kendoMultiSelect").value()[0],
                AdministrationRouteId: u("#Prescription_AdministrationRouteId"),
                Instructions: n("#Prescription_Instructions").val(),
                Repeats: n("#Prescription_Repeats").data("kendoNumericTextBox").value(),
                Quantity: n("#Prescription_Quantity").data("kendoNumericTextBox").value(),
                RepeatInterval: n("#Prescription_RepeatInterval").data("kendoNumericTextBox").value(),
                IsBrandSubstitutionNotPermitted: n("#Prescription_IsBrandSubstitutionNotPermitted").is(":checked")
            }
        }
        function e(t, i) {
            n("#create-new-drug").on("click", function() {
                siberia.popup.create("#drug-popup", {
                    windowOptions: {
                        title: text.global.titles.addDrug,
                        width: "450"
                    },
                    clear: function() {
                        var t = n("#Drug_ExistingDrugId").data("kendoMultiSelect");
                        siberia.multiSelect.clear(t);
                        n("#Drug_Id").val(0);
                        n("#Drug_Name").val("");
                        n("#Drug_DrugCodeId").data("kendoDropDownList").value(n("#Drug_DrugCodeId").attr("data-default-value"));
                        n("#Drug_Form").val("");
                        n("#Drug_Strength").val("");
                        n("#Drug_Instructions").val("");
                        n("#Drug_Composition").val("");
                        n("#Drug_DoseInformation").val("");
                        n("#Drug_Repeats").data("kendoNumericTextBox").value("");
                        n("#Drug_Quantity").data("kendoNumericTextBox").value("");
                        n("#Drug_PbsCode").val("");
                        n("#Drug_PbsManufacturerCode").val("")
                    },
                    success: function(t) {
                        var r, u, f;
                        i && i();
                        r = t.Data[0];
                        r.GlobalDrugId != "" && (u = n("#Prescription_GlobalDrugId").data("kendoMultiSelect"),
                        u != null && (f = {
                            DrugId: r.Id,
                            GlobalDrugId: r.GlobalDrugId,
                            IsMimsDrug: !1,
                            DisplayName: r.FullNameHtml,
                            SearchName: r.FullNameHtml,
                            HasMimsInformation: !1,
                            HasMimsAnnualInformation: !1
                        },
                        siberia.multiSelect.attach(u, [f], "GlobalDrugId", !0)))
                    }
                });
                var r = n("#Drug_ExistingDrugId").data("kendoMultiSelect");
                r && r.bind("change", function(n) {
                    o(n, t)
                })
            })
        }
        function o(i, r) {
            var u = i.sender.dataItem();
            u && t(u, r, function(t) {
                n("#Drug_Name").val(t.NameHtml);
                n("#Drug_DrugCodeId").data("kendoDropDownList").value(t.DrugCodeId);
                n("#Drug_Form").val(t.FormHtml);
                n("#Drug_Strength").val(t.StrengthHtml);
                n("#Drug_Composition").val(t.CompositionHtml);
                n("#Drug_DoseInformation").val(t.DoseInformationHtml);
                n("#Drug_Repeats").data("kendoNumericTextBox").value(t.Repeats);
                n("#Drug_Quantity").data("kendoNumericTextBox").value(t.Quantity);
                n("#Drug_PbsCode").val(t.PbsCode);
                n("#Drug_PbsManufacturerCode").val(t.PbsManufacturerCode)
            })
        }
        function t(t, i, r) {
            var u = n(i)
              , f = u.attr("data-get-drug-info");
            u.spinner(!0);
            n.ajax({
                type: "POST",
                url: f,
                contentType: "application/json",
                data: JSON.stringify({
                    globalDrugId: t.GlobalDrugId
                }),
                success: function(n) {
                    r && r(n)
                },
                complete: function() {
                    u.spinner(!1)
                }
            })
        }
        function s() {
            n(".js-download-erx-xml-link").show()
        }
        return {
            drugRemoved: i,
            getDrugInfo: t,
            fillPopupWithOnlyDrugData: r,
            processInputsPrescriptionPopup: u,
            getUniquePrescriptionData: f,
            initDrugPopup: e,
            displayErxXmlDownloadLinks: s
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.labRequestsCommon");
    siberia.labRequestsCommon = function() {
        function a(i) {
            siberia.multiSelect.clearValue("#Imaging_ScanReasonList");
            siberia.multiSelect.clearValue("#Imaging_ScanOfList");
            siberia.multiSelect.clearValue("#Imaging_ScanRequiredList");
            siberia.multiSelect.clearValue("#Imaging_SelectedRecipientCcIds");
            siberia.multiSelect.clearServerFilteringState('#imaging-request-window select[name$="SelectedRecipientCcIds"]');
            siberia.multiSelect.clearValue("#Imaging_LaboratoryCompanyId");
            t("#Imaging_RequestFormId");
            n(".js-pregnancy-checkbox").toggle(i);
            n("#Imaging_IsUrgent").prop("checked", !1);
            n("#Imaging_BulkBill").prop("checked", !1);
            n("#Imaging_Imaging").val("");
            n("#Imaging_Notes").val("");
            n('[name="Imaging.IsCritical"]').prop("checked", !1);
            n(".js-radiobutton-option-none").prop("checked", !0);
            n("#Imaging_IsHormoneRT").prop("checked", !1);
            n(".js-pathology-patient-statuses input:not([data-force-pregnant])").prop("checked", !1)
        }
        function v(i) {
            siberia.multiSelect.clearValue("#Pathology_PathologyTestList");
            siberia.multiSelect.clearValue("#Pathology_PathologyReasonList");
            siberia.multiSelect.clearValue("#Pathology_ScanOfList");
            siberia.multiSelect.clearValue("#Pathology_SelectedRecipientCcIds");
            siberia.multiSelect.clearValue("#Pathology_LaboratoryCompanyId");
            t("#Pathology_RequestFormId");
            n(".js-checkbox-collapse-header").toggle(i);
            n(".js-pregnancy-checkbox").toggle(i);
            n("#Pathology_IsUrgent").prop("checked", !1);
            n("#Pathology_BulkBill").prop("checked", !1);
            n("#Pathology_Lab").val("");
            n("#Pathology_Notes").val("");
            n('[name="Pathology.IsFasting"]').prop("checked", !1);
            n('[name="Pathology.IsCritical"]').prop("checked", !1);
            n(".js-radiobutton-option-none").prop("checked", !0);
            n("#Pathology_IsHormoneRT").prop("checked", !1);
            n(".js-pathology-patient-statuses input:not([data-force-pregnant])").prop("checked", !1);
            r()
        }
        function y() {
            var t = n(".js-checkbox-collapse-header")
              , i = n(".js-checkbox-collapse-content");
            i.hide();
            t.click(function(t) {
                t.stopPropagation();
                siberia.labRequestsCommon.toggleCollapsableCheckboxes(!n(this).hasClass("expanded"))
            })
        }
        function r() {
            var t = !1;
            n('.js-checkbox-collapse-content input[type="checkbox"]').each(function(i, r) {
                if (n(r).prop("checked"))
                    return t = !0,
                    !1
            });
            u(t)
        }
        function u(t) {
            var i = n(".js-checkbox-collapse-header")
              , r = n(".js-checkbox-collapse-content")
              , u = i.find(".k-icon");
            t ? (r.show(),
            u.removeClass("k-i-expand").addClass("k-i-collapse"),
            i.addClass("expanded")) : (r.hide(),
            u.addClass("k-i-expand").removeClass("k-i-collapse"),
            i.removeClass("expanded"))
        }
        function t(t) {
            var i = n(t).data("kendoDropDownList")
              , r = siberia.common.firstOrNull(i.dataItems(), function(n) {
                return n.IsDefault
            });
            i.value(r != null ? r.Id : "");
            i.trigger("change")
        }
        function p() {
            siberia.multiSelect.clearServerFilteringState('#imaging-request-window select[name$="SelectedRecipientCcIds"]')
        }
        function w() {
            var r = i("#Imaging_LaboratoryCompanyId")
              , t = {
                IsUrgent: n("#Imaging_IsUrgent")[0].checked,
                IsHormoneRT: n("#Imaging_IsHormoneRT")[0].checked,
                IsTorresStraitIslander: n("#Imaging_IsTorresStraitIslander")[0].checked,
                IsAboriginal: n("#Imaging_IsAboriginal")[0].checked,
                IsPregnant: n("#Imaging_IsPregnant")[0].checked,
                Notes: n("#Imaging_Notes").val(),
                IsCritical: null,
                BulkBill: n("#Imaging_BulkBill")[0].checked,
                ScanOfList: siberia.multiSelect.getValues("#Imaging_ScanOfList"),
                ScanReasonList: siberia.multiSelect.getValues("#Imaging_ScanReasonList"),
                ScanRequiredList: siberia.multiSelect.getValues("#Imaging_ScanRequiredList"),
                SelectedRecipientCcIds: siberia.multiSelect.getValues("#Imaging_SelectedRecipientCcIds"),
                RequestFormId: siberia.common.getDropDownValue("#Imaging_RequestFormId"),
                LaboratoryCompanyId: r ? r.Id : null
            };
            return n('[name="Imaging.IsCritical"]:checked').val() == "true" ? t.IsCritical = !0 : n('[name="Imaging.IsCritical"]:checked').val() == "false" && (t.IsCritical = !1),
            t
        }
        function b() {
            var r = i("#Pathology_LaboratoryCompanyId")
              , t = {
                IsUrgent: n("#Pathology_IsUrgent")[0].checked,
                IsHormoneRT: n("#Pathology_IsHormoneRT")[0].checked,
                IsTorresStraitIslander: n("#Pathology_IsTorresStraitIslander")[0].checked,
                IsAboriginal: n("#Pathology_IsAboriginal")[0].checked,
                IsPregnant: n("#Pathology_IsPregnant")[0].checked,
                IsCervix: n("#Pathology_IsCervix")[0].checked,
                IsVaginalVault: n("#Pathology_IsVaginalVault")[0].checked,
                IsEndometrium: n("#Pathology_IsEndometrium")[0].checked,
                IsOther: n("#Pathology_IsOther")[0].checked,
                IsPostNatal: n("#Pathology_IsPostNatal")[0].checked,
                IsPostMenopausal: n("#Pathology_IsPostMenopausal")[0].checked,
                IsIUCD: n("#Pathology_IsIUCD")[0].checked,
                IsAbnormalBleeding: n("#Pathology_IsAbnormalBleeding")[0].checked,
                IsBenign: n("#Pathology_IsBenign")[0].checked,
                IsSuspicious: n("#Pathology_IsSuspicious")[0].checked,
                BulkBill: n("#Pathology_BulkBill")[0].checked,
                Notes: n("#Pathology_Notes").val(),
                IsFasting: null,
                IsCritical: null,
                ScanOfList: siberia.multiSelect.getValues("#Pathology_ScanOfList"),
                PathologyTestList: siberia.multiSelect.getValues("#Pathology_PathologyTestList"),
                PathologyReasonList: siberia.multiSelect.getValues("#Pathology_PathologyReasonList"),
                SelectedRecipientCcIds: siberia.multiSelect.getValues("#Pathology_SelectedRecipientCcIds"),
                RequestFormId: siberia.common.getDropDownValue("#Pathology_RequestFormId"),
                LaboratoryCompanyId: r ? r.Id : null
            };
            return n('[name="Pathology.IsFasting"]:checked').val() == "true" ? t.IsFasting = !0 : n('[name="Pathology.IsFasting"]:checked').val() == "false" && (t.IsFasting = !1),
            n('[name="Pathology.IsCritical"]:checked').val() == "true" ? t.IsCritical = !0 : n('[name="Pathology.IsCritical"]:checked').val() == "false" && (t.IsCritical = !1),
            t
        }
        function i(t) {
            var i = n(t).data("kendoMultiSelect");
            return i.dataItem()
        }
        function f(t, i, r) {
            n('label[for="' + t + '"]').toggleClass("required", i);
            var u = n("#" + t);
            i ? (u.attr("data-val-required", r),
            u.addClass("required")) : (u.removeClass("required"),
            u.removeAttr("data-val-required"))
        }
        function k(n) {
            e() ? n.LaboratoryCompany && siberia.multiSelect.attachValue("#Pathology_LaboratoryCompanyId", [n.LaboratoryCompany], "Id") : siberia.multiSelect.clearValue("#Pathology_LaboratoryCompanyId")
        }
        function d(n) {
            s() ? n.LaboratoryCompany && siberia.multiSelect.attachValue("#Imaging_LaboratoryCompanyId", [n.LaboratoryCompany], "Id") : siberia.multiSelect.clearValue("#Imaging_LaboratoryCompanyId")
        }
        function e() {
            return o("#Pathology_RequestFormId", ".js-pathology-lab-selector", "Pathology_LaboratoryCompanyId")
        }
        function o(t, i, r) {
            return tt(t) ? (n(i).show(),
            f(r, !0, text.global.validation.requiredCompany),
            g(n(i).find("select").data("kendoMultiSelect")),
            !0) : (n("#" + r).data("kendoMultiSelect").value([]),
            c(n("#" + r).data("kendoMultiSelect")),
            f(r, !1, text.global.validation.requiredCompany),
            nt(n(i).find("select").data("kendoMultiSelect")),
            n(i).hide(),
            !1)
        }
        function s() {
            return o("#Imaging_RequestFormId", ".js-imaging-lab-selector", "Imaging_LaboratoryCompanyId")
        }
        function g(n) {
            n.bind("change", h)
        }
        function h(n) {
            c(n.sender)
        }
        function c(t) {
            n("#" + t.element[0].id).closest(".k-widget").removeClass("widget-validation-error");
            n("#" + t.element[0].id).closest(".m-dropdown").find("span.field-validation-error").text("")
        }
        function nt(n) {
            n.unbind("change", h)
        }
        function tt(t) {
            var r = n(t).getKendoDropDownList()
              , u = r.dataSource.data()
              , f = r.value()
              , i = u.filter(function(n) {
                return n.Id == f
            });
            return i ? i[0] && i[0].IsGeneric ? !0 : !1 : !1
        }
        function it() {
            var t = n("#Imaging_RequestFormId").data("kendoDropDownList");
            t && t.bind("change", s)
        }
        function rt() {
            var t = n("#Pathology_RequestFormId").data("kendoDropDownList");
            t && t.bind("change", e)
        }
        var l = function(n) {
            return {
                text: n.filter.filters[0] != undefined ? n.filter.filters[0].value : "",
                patients: !1,
                contacts: !0,
                companies: !0
            }
        };
        return {
            filterCc: l,
            clearRequestFormDropDown: t,
            clearImagingRequestValues: a,
            clearImagingCCcache: p,
            getImagingRequestData: w,
            getLab: i,
            clearPathologyRequestValues: v,
            processCollapsableCheckboxes: r,
            toggleCollapsableCheckboxes: u,
            initCollapsableCheckboxes: y,
            getPathologyRequestData: b,
            initImagingRequestFormDropDropDown: it,
            initPathologyRequestFormDropDropDown: rt,
            setPathologyLaboratory: k,
            setImagingLaboratory: d
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.siberiaPracticeFavorites");
    siberia.siberiaPracticeFavorites = function() {
        function r(t) {
            var r = n("#Drug_ExistingDrugId").data("kendoMultiSelect"), i;
            siberia.multiSelect.clear(r);
            n("#Drug_Id").val(t.Id);
            n("#Drug_Name").val(t.Name);
            i = t.DrugCodeId > 0 ? t.DrugCodeId : n("#Drug_DrugCodeId").attr("data-default-value");
            n("#Drug_DrugCodeId").data("kendoDropDownList").value(i);
            n("#Drug_Form").val(t.Form);
            n("#Drug_Strength").val(t.Strength);
            n("#Drug_Instructions").val(t.Instructions);
            n("#Drug_Composition").val(t.Composition);
            n("#Drug_DoseInformation").val(t.DoseInformation);
            n("#Drug_Repeats").data("kendoNumericTextBox").value(t.Repeats);
            n("#Drug_Quantity").data("kendoNumericTextBox").value(t.Quantity);
            n("#Drug_PbsCode").val(t.PbsCode);
            n("#Drug_PbsManufacturerCode").val(t.PbsManufacturerCode)
        }
        function u() {
            n(t).data("kendoGrid").dataSource.read()
        }
        function f(n) {
            siberia.popup.create("#drug-popup", {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addDrug,
                    width: "450"
                },
                clear: function() {
                    r(n.item)
                },
                success: u,
                cancel: function() {
                    n.cancel()
                }
            })
        }
        function e(n) {
            siberia.popup.create("#drug-popup", {
                windowOptions: {
                    title: text.global.titles.editDrug,
                    width: "450"
                },
                clear: function() {
                    r(n)
                },
                success: u
            })
        }
        function o(t, r) {
            if (i) {
                var u = n(".js-global-spinner-container");
                u.spinner(!0);
                n.ajax({
                    type: "POST",
                    url: i,
                    data: {
                        drugId: t.Id
                    },
                    success: function(i) {
                        i.Errors ? n.each(i.Errors, function(n, t) {
                            siberia.notification.showErrorNotification(t.errors[0], !0)
                        }) : r.remove(t)
                    },
                    error: function() {
                        siberia.validation.showGridNetworkError(!0)
                    },
                    complete: function() {
                        u.spinner(!1)
                    }
                })
            }
        }
        function s(t, i) {
            var r = t.sender.dataItem();
            r && siberia.prescriptionsCommon.getDrugInfo(r, i, function(t) {
                n("#Drug_Name").val(t.NameHtml);
                n("#Drug_DrugCodeId").data("kendoDropDownList").value(t.DrugCodeId);
                n("#Drug_Form").val(t.FormHtml);
                n("#Drug_Strength").val(t.StrengthHtml);
                n("#Drug_Composition").val(t.CompositionHtml);
                n("#Drug_DoseInformation").val(t.DoseInformationHtml);
                n("#Drug_Repeats").data("kendoNumericTextBox").value(t.Repeats);
                n("#Drug_Quantity").data("kendoNumericTextBox").value(t.Quantity);
                n("#Drug_PbsCode").val(t.PbsCode);
                n("#Drug_PbsManufacturerCode").val(t.PbsManufacturerCode)
            })
        }
        function h() {
            var u = n("#PracticeFavoritesTabs").data("kendoTabStrip"), r;
            if (u) {
                var c = n("#practice-prescription-favorites-grid").data("kendoGrid")
                  , l = n("#practice-imaging-request-favorites-grid").data("kendoGrid")
                  , a = n("#practice-pathology-request-favorites-grid").data("kendoGrid")
                  , h = n(t)
                  , v = h.data("kendoGrid");
                i = h.attr("data-delete-custom-drug-url");
                siberia.grid.initClientGrid({
                    gridSelector: t,
                    addAction: f,
                    editAction: e,
                    customDelete: o,
                    isCustomEditing: !0
                });
                r = n("#Drug_ExistingDrugId").data("kendoMultiSelect");
                r && r.bind("change", function(n) {
                    s(n, "#drug-popup")
                });
                u.bind("select", function(t) {
                    n(t.contentElement).find(".js-grid-for-update").each(function(t, i) {
                        n(i).data("kendoGrid").dataSource.read()
                    })
                });
                c.dataSource.read()
            }
        }
        var t = "#practice-custom-drugs-grid", i;
        return {
            init: h
        }
    }();
    n(document).ready(function() {
        siberia.siberiaPracticeFavorites.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.practiceFavoritePrescriptions");
    siberia.practiceFavoritePrescriptions = function() {
        function u() {
            if (t = n("#favorite-prescription-popup"),
            t.length) {
                n(".js-save-practice-prescription-favorite").on("click", e);
                i = n("#practice-prescription-favorites-grid").data("kendoGrid");
                siberia.multiSelect.fixServerFiltering("#Prescription_GlobalDrugId", "SearchName");
                siberia.grid.initClientGrid({
                    gridSelector: "#practice-prescription-favorites-grid",
                    addAction: o,
                    deleteAction: f
                });
                siberia.prescriptionsCommon.initDrugPopup("#favorite-prescription-popup")
            }
        }
        function f() {
            i.dataSource.sync()
        }
        function e() {
            var u = siberia.prescriptionsCommon.getUniquePrescriptionData(!0), i, f, e;
            u.Name = n("#Prescription_Name").val();
            u.Id = 0;
            i = n(t).find("form");
            f = n(t);
            f.spinner(!0);
            e = function() {
                siberia.popup.close(t)
            }
            ;
            n.ajax({
                type: "POST",
                url: i.attr("action"),
                contentType: "application/json",
                data: JSON.stringify(u),
                success: function(n) {
                    siberia.validation.processAjaxErrors(i, n.Errors) && (e(),
                    r())
                },
                error: function(n) {
                    siberia.validation.processAjaxErrors(i, n.Errors) && siberia.notification.showErrorNotification(text.global.status.ajaxError)
                },
                complete: function() {
                    f.spinner(!1)
                }
            })
        }
        function o(i) {
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.addFavoriteMedication,
                    width: "700"
                },
                clear: function() {
                    var i, r;
                    siberia.prescriptionsCommon.processInputsPrescriptionPopup(n(t), !1);
                    i = n("#Prescription_GlobalDrugId").data("kendoMultiSelect");
                    siberia.multiSelect.clear(i);
                    n("#Prescription_Name").val("");
                    n("#Prescription_FavoriteDataSerialized").val("");
                    n("#Prescription_DrugId").val("");
                    n("#Prescription_Repeats").data("kendoNumericTextBox").value("");
                    n("#Prescription_Quantity").data("kendoNumericTextBox").value("");
                    n("#Prescription_IsBrandSubstitutionNotPermitted").prop("checked", !1);
                    n("#Prescription_Id").val("");
                    n("#Prescription_MedicationCategoryId").data("kendoDropDownList").value("");
                    n("#Prescription_Instructions").val("");
                    n("#Prescription_PhoneApproval").val("");
                    n("#Prescription_MedicationDoseId").data("kendoMultiSelect").value("");
                    n(".js-drug-form").html("");
                    n(".js-drug-strength").html("");
                    n(".js-drug-composition").html("");
                    n(".js-dose-information").html("");
                    siberia.multiSelect.clearServerFilteringState("#Prescription_GlobalDrugId");
                    r = n("#Prescription_GlobalDrugId").data("kendoMultiSelect");
                    r.bind("change", s)
                },
                success: function() {
                    r()
                },
                cancel: function() {
                    i.cancel()
                }
            })
        }
        function r() {
            i.dataSource.read()
        }
        function s(i) {
            siberia.prescriptionsCommon.drugRemoved(i.sender);
            var r = i.sender.dataItem();
            r ? siberia.prescriptionsCommon.getDrugInfo(r, t, function(i) {
                siberia.prescriptionsCommon.fillPopupWithOnlyDrugData(i.Id, i.CompositionHtml, i.IsBrandSubstitutionNotPermitted, i.DoseInformationHtml, i.StrengthHtml, i.FormHtml, i.Repeats, i.Quantity);
                siberia.prescriptionsCommon.processInputsPrescriptionPopup(n(t), !0)
            }) : siberia.prescriptionsCommon.processInputsPrescriptionPopup(n(t), !1)
        }
        var t, i;
        return {
            init: u
        }
    }();
    n(document).ready(function() {
        siberia.practiceFavoritePrescriptions.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.practiceFavoriteImagingRequests");
    siberia.practiceFavoriteImagingRequests = function() {
        function u() {
            if (t = n("#favorite-imaging-request-popup"),
            t.length) {
                n(".js-save-practice-imaging-favorite").on("click", e);
                i = n("#practice-imaging-request-favorites-grid").data("kendoGrid");
                siberia.grid.initClientGrid({
                    gridSelector: "#practice-imaging-request-favorites-grid",
                    addAction: o,
                    deleteAction: f
                });
                siberia.labRequestsCommon.initImagingRequestFormDropDropDown()
            }
        }
        function f() {
            i.dataSource.sync()
        }
        function e() {
            var u = siberia.labRequestsCommon.getImagingRequestData(), i, f, e;
            u.Name = n("#Imaging_Name").val();
            u.Id = 0;
            i = n(t).find("form");
            f = n(t);
            f.spinner(!0);
            e = function() {
                siberia.popup.close(t)
            }
            ;
            n.ajax({
                type: "POST",
                url: i.attr("action"),
                contentType: "application/json",
                data: JSON.stringify(u),
                success: function(n) {
                    siberia.validation.processAjaxErrors(i, n.Errors) && (e(),
                    r())
                },
                error: function(n) {
                    siberia.validation.processAjaxErrors(i, n.Errors) && siberia.notification.showErrorNotification(text.global.status.ajaxError)
                },
                complete: function() {
                    f.spinner(!1)
                }
            })
        }
        function o(i) {
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.addFavoriteImagingRequest,
                    width: "630"
                },
                clear: function() {
                    n("#Imaging_Name").val("");
                    siberia.labRequestsCommon.clearImagingRequestValues(!0);
                    n("#DictionaryPaMode").val("true")
                },
                success: function() {
                    r()
                },
                cancel: function() {
                    siberia.labRequestsCommon.clearImagingCCcache();
                    i.cancel()
                }
            })
        }
        function r() {
            i.dataSource.read()
        }
        var t, i;
        return {
            init: u
        }
    }();
    n(document).ready(function() {
        siberia.practiceFavoriteImagingRequests.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.practiceFavoritePathologyRequests");
    siberia.practiceFavoritePathologyRequests = function() {
        function u() {
            if (t = n("#favorite-pathology-request-popup"),
            t.length) {
                siberia.labRequestsCommon.initCollapsableCheckboxes();
                n(".js-save-practice-pathology-favorite").on("click", e);
                i = n("#practice-pathology-request-favorites-grid").data("kendoGrid");
                siberia.grid.initClientGrid({
                    gridSelector: "#practice-pathology-request-favorites-grid",
                    addAction: o,
                    deleteAction: f
                });
                siberia.labRequestsCommon.initPathologyRequestFormDropDropDown()
            }
        }
        function f() {
            i.dataSource.sync()
        }
        function e() {
            var u = siberia.labRequestsCommon.getPathologyRequestData(), i, f, e;
            u.Name = n("#Pathology_Name").val();
            u.Id = 0;
            i = n(t).find("form");
            f = n(t);
            f.spinner(!0);
            e = function() {
                siberia.popup.close(t)
            }
            ;
            n.ajax({
                type: "POST",
                url: i.attr("action"),
                contentType: "application/json",
                data: JSON.stringify(u),
                success: function(n) {
                    siberia.validation.processAjaxErrors(i, n.Errors) && (e(),
                    r())
                },
                error: function(n) {
                    siberia.validation.processAjaxErrors(i, n.Errors) && siberia.notification.showErrorNotification(text.global.status.ajaxError)
                },
                complete: function() {
                    f.spinner(!1)
                }
            })
        }
        function o(i) {
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.addFavoritePathologyRequest,
                    width: "630"
                },
                clear: function() {
                    n("#Pathology_Name").val("");
                    siberia.labRequestsCommon.clearPathologyRequestValues(!0);
                    n("#DictionaryPaMode").val("true")
                },
                success: function() {
                    r()
                },
                cancel: function() {
                    i.cancel()
                }
            })
        }
        function r() {
            i.dataSource.read()
        }
        var t, i;
        return {
            init: u
        }
    }();
    n(document).ready(function() {
        siberia.practiceFavoritePathologyRequests.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.partialLogout");
    siberia.partialLogout = function() {
        function c() {
            siberia.localStorage.registerKeyChanges(siberia.constants.localStoragePartialLogoutDataKey, p)
        }
        function l() {
            f = !0
        }
        function a(r) {
            var f = n.Deferred()
              , o = u();
            if (!o)
                return i(t.LoggedIn, r),
                f.resolve(),
                f.promise();
            switch (o.state) {
            case t.LoggedIn:
                o.loginAccount !== r ? e(f, r) : f.resolve();
                break;
            case t.PartialLogout:
                o.loginAccount !== r ? e(f, r) : (i(t.LoggedIn, r),
                f.resolve());
                break;
            default:
                f.resolve()
            }
            return f.promise()
        }
        function e(n, r) {
            i(t.Reload, r);
            setTimeout(function() {
                i(t.LoggedIn, r);
                n.resolve()
            }, 200)
        }
        function v() {
            var n = u();
            return !!n && n.state === t.PartialLogout
        }
        function o() {
            siberia.localStorage.clear()
        }
        function y(n) {
            var u = n.getResponseHeader("REQUIRES_AUTH");
            if (u === "reload") {
                o();
                r();
                return
            }
            if (u) {
                i(t.PartialLogout, u);
                s();
                return
            }
        }
        function p(n) {
            if (!n.newValue) {
                r();
                return
            }
            var i = h(n.newValue);
            switch (i.state) {
            case t.LoggedIn:
                setTimeout(function() {
                    siberia.popup.close("#patial-logout-popup")
                }, 100);
                break;
            case t.PartialLogout:
                s();
                break;
            case t.Reload:
                r()
            }
        }
        function s() {
            f || siberia.popup.create("#patial-logout-popup", {
                windowOptions: {
                    title: text.global.titles.popupConfirmation,
                    width: "369"
                },
                clear: function() {
                    var t = n(".js-partial-logout-message")
                      , i = t.data("message")
                      , r = n(".js-user-name").html()
                      , u = kendo.format(i, "<strong>" + r + "<\/strong>");
                    n(".js-partial-logout-username").html(u)
                },
                extraData: function() {
                    var t = n("#Field1").val();
                    return n("#Field1").val(""),
                    {
                        Password: t
                    }
                },
                success: function(n, f, e) {
                    if (n.success) {
                        var s = u();
                        i(t.LoggedIn, s.loginAccount)
                    } else
                        e.cancelClose = !0,
                        o(),
                        r()
                },
                cancel: function(n) {
                    var i = u();
                    i.state !== t.LoggedIn && (n.cancelClose = !0,
                    r())
                }
            })
        }
        function u() {
            var n = siberia.localStorage.getItem(siberia.constants.localStoragePartialLogoutDataKey);
            return h(n)
        }
        function h(n) {
            if (!n)
                return null;
            var t = n.split("_")
              , i = t[0]
              , r = t[1];
            return {
                state: i,
                loginAccount: r
            }
        }
        function i(n, t) {
            siberia.localStorage.setItem(siberia.constants.localStoragePartialLogoutDataKey, n + "_" + t + "_" + (new Date).getTime())
        }
        function r() {
            window.onbeforeunload = null;
            window.location.replace("/")
        }
        var f = !1
          , t = {
            LoggedIn: "1",
            PartialLogout: "2",
            Reload: "3"
        };
        return {
            init: c,
            processRequest: y,
            suspendRequests: v,
            setNewLoginAccount: a,
            setDoNotShowPopup: l
        }
    }();
    n(document).ready(function() {
        siberia.partialLogout.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.procedureChecklistTemplates");
    siberia.procedureChecklistTemplates = function() {
        function v(t) {
            siberia.multiSelect.clearValue(s);
            siberia.multiSelect.clearValue(h);
            siberia.multiSelect.clearValue(c);
            n("#ProcedureChecklistTemplate_Id").val(t.Id);
            n("#ProcedureChecklistTemplate_Name").val(t.Name);
            r.value(t.NotifyMeId);
            u.value(t.DoctorId);
            e.value(t.LocationIds);
            f.value(t.ProcedureTypeIds);
            n("#ProcedureChecklistTemplate_ItemsSerialized").val("");
            var i = n(o).data("kendoGrid");
            i.dataSource.data([]);
            t.Items && i.dataSource.data(t.Items)
        }
        function y(t) {
            t.set("Name", n("#ProcedureChecklistTemplate_Name").val());
            t.set("NotifyMeId", r.value());
            t.set("DoctorId", u.value());
            t.set("LocationIds", e.value());
            t.set("ProcedureTypeIds", f.value());
            var i = n(o).data("kendoGrid")
              , s = i.dataSource.data();
            t.set("Items", s)
        }
        function p() {
            a.dataSource.read()
        }
        function b(n) {
            siberia.popup.create(t, {
                submitText: text.global.labels.create,
                windowOptions: {
                    title: text.global.titles.addProcedureChecklistTemplate,
                    width: "900"
                },
                clear: function() {
                    v(n.item)
                },
                success: function() {
                    y(n.item);
                    p()
                },
                cancel: function() {
                    n.cancel()
                }
            })
        }
        function w(n, i) {
            siberia.popup.create(t, {
                submitText: text.global.labels.update,
                windowOptions: {
                    title: text.global.titles.editProcedureChecklistTemplate,
                    width: "900"
                },
                clear: function() {
                    v(n)
                },
                cancel: function() {
                    i && i()
                },
                success: function() {
                    y(n);
                    p()
                }
            })
        }
        function k(n) {
            n.addedItem.set("Name", n.originalItem.Name);
            n.addedItem.set("NotifyMeId", n.originalItem.NotifyMeId);
            n.addedItem.set("DoctorId", n.originalItem.DoctorId);
            n.addedItem.set("LocationIds", n.originalItem.LocationIds);
            n.addedItem.set("ProcedureTypeIds", n.originalItem.ProcedureTypeIds);
            n.addedItem.set("Items", n.originalItem.Items);
            w(n.addedItem, n.cancel)
        }
        function d() {
            n(i).data("kendoGrid").dataSource.sync()
        }
        function g() {
            siberia.grid.initClientGrid({
                gridSelector: i,
                saveAndCloseSelector: null,
                saveSelector: null,
                addAction: b,
                editAction: w,
                duplicateAction: k,
                deleteAction: d,
                isCustomEditing: !0
            });
            a = n(i).data("kendoGrid")
        }
        function nt() {
            l = n(".js-procedure-checklist-template-grid-container");
            l.length && g();
            var i = n(t);
            e = i.find(s).data("kendoMultiSelect");
            f = i.find(h).data("kendoMultiSelect");
            u = i.find(c).data("kendoMultiSelect");
            r = n("#ProcedureChecklistTemplate_NotifyMeId").data("kendoDropDownList")
        }
        var i = "#procedure-checklist-template-grid", t = "#procedure-checklist-template-popup", o = t + " .js-checklist-template-items-grid", s = "#ProcedureChecklistTemplate_LocationIds", h = "#ProcedureChecklistTemplate_ProcedureTypeIds", c = "#ProcedureChecklistTemplate_DoctorId", r, l, a, u, f, e;
        return {
            init: nt
        }
    }();
    n(document).ready(function() {
        siberia.procedureChecklistTemplates.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.inactivePatient");
    siberia.inactivePatient = function() {
        function t() {
            r()
        }
        function i() {
            return n(".js-deactivate-patient").length > 0 ? !(n(".js-deactivate-patient").attr("value") === "true") : n(".js-consult-patient-info").length > 0 ? n(".js-consult-patient-info").data("patient-inactive") === "true" : !1
        }
        function r() {
            n(".js-deactivate-patient").stateButton({
                labels: {
                    "false": text.global.labels.activate,
                    "true": text.global.labels.deactivate
                },
                action: u,
                successNotificationText: text.global.status.dataSaved,
                errorNotificationText: text.global.status.networkError
            })
        }
        function u(t, i) {
            return n.ajax({
                type: "POST",
                url: t,
                data: {
                    inactiveStatus: i
                },
                success: function(t) {
                    typeof t.Errors == "undefined" && (siberia.lazyLoading.registerReload("clinical-journey-list", !0),
                    n("#patient-is-inactive-warning").toggle(!t),
                    n("#patient-is-inactive-warning .notification-item").toggle(!t))
                }
            })
        }
        return {
            init: t,
            getPatientInactivityState: i
        }
    }();
    n(document).ready(function() {
        siberia.inactivePatient.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.waitingRoom");
    siberia.waitingRoom = function() {
        function o() {
            return kendo.widgetInstance(n("#WaitingRooms"))
        }
        function g() {
            return kendo.widgetInstance(n("#AppointmentId"))
        }
        function s() {
            return kendo.widgetInstance(n("#PatientId"))
        }
        function i() {
            var n = o();
            return n.select().attr("data-waiting-room-id")
        }
        function t() {
            return n("#waiting-room-patients").data("kendoGrid")
        }
        function r() {
            return n("#walk-in-patients").data("kendoGrid")
        }
        function nt() {
            n("#WaitingRooms .k-item").click(ui)
        }
        function tt() {
            var n = t();
            if (n) {
                n.element.on("click", ".js-send-sms", a);
                n.element.on("click", ".js-create-invoice", ft);
                n.element.on("click", ".js-create-fee-estimate", ut);
                n.element.on("click", ".js-waiting-room-action", rt);
                n.element.on("click", ".js-waiting-room-history", et)
            }
        }
        function it() {
            var n = r();
            if (n) {
                siberia.grid.initClientGrid({
                    gridSelector: "#walk-in-patients",
                    deleteAction: function() {
                        r().dataSource.sync()
                    }
                });
                n.element.on("click", ".js-send-sms", a);
                n.bind("dataBound", l);
                l();
                setInterval(y, 6e4)
            }
        }
        function l() {
            var t = r().dataSource.total();
            n(".js-walk-in-patients-count").text(t).toggle(t > 0)
        }
        function rt(t) {
            var r, i;
            t.preventDefault();
            r = n(t.currentTarget).closest("form");
            r.submit();
            i = u(t.currentTarget);
            i.AppointmentHasConsult || i.AppointmentId || !i.CanCreateConsult || setTimeout(e, 1e4)
        }
        function ut(n) {
            var t = u(n.currentTarget);
            siberia.feeEstimate.initFeeEstimatePopupForAppointment(t.AppointmentId, !0).then(h(n, ".js-create-fee-estimate"))
        }
        function ft(t) {
            t.preventDefault();
            siberia.invoicePopup.initInvoicePopup(n(t.currentTarget).data("url"), !0).then(h(t, ".js-create-invoice"))
        }
        function a(i) {
            i.preventDefault();
            var r = ot(i)
              , u = {
                patients: [r]
            }
              , f = t()
              , e = f.element.attr("data-send-sms-url");
            siberia.sms.showPopup(u, e, function() {
                return {
                    "SmsTemplate.waitingRoomPatientId": r.WaitingRoomPatientId,
                    "SmsTemplate.AppointmentId": r.AppointmentId
                }
            }, !r.AppointmentId, null, function() {
                n("#SmsTemplate_PatientIds").data("kendoMultiSelect").enable(!1)
            }).then(h(i, ".js-send-sms"))
        }
        function h(t, i) {
            return function() {
                n(t.target).closest(i).addClass("positive-action", !0)
            }
        }
        function et(n) {
            n.preventDefault()
        }
        function ot(n) {
            var t = u(n.currentTarget);
            return {
                HighlightedFullName: t.PatientFullName,
                PatientId: t.PatientId,
                PatientFullName: t.PatientFullName,
                PatientDateOfBirth: t.PatientDateOfBirth,
                PatientIsInactive: t.PatientIsInactive,
                HighlightedDateOfBirth: t.PatientDateOfBirth,
                PatientNumber: t.PatientNumber,
                HighlightedPatientNumber: t.PatientNumber,
                WaitingRoomPatientId: t.Id,
                AppointmentId: t.AppointmentId
            }
        }
        function u(t) {
            var i = n(t)
              , r = kendo.widgetInstance(i.closest('[data-role="grid"]'));
            return r.dataItem(i.closest("tr"))
        }
        function f() {
            return siberia.common.getSelectedLocationId()
        }
        function st() {
            var n = s();
            return n.value().pop()
        }
        function v(n) {
            n.dataSource.read()
        }
        function e() {
            v(t())
        }
        function y() {
            v(r())
        }
        function ht() {
            var t = o();
            t.bind("change", function() {
                var t = !!i();
                n(".js-waiting-room-patients").toggle(t);
                n(".js-walk-in-patients").toggle(!t);
                t ? e() : y()
            })
        }
        function ct(n) {
            for (var r = t().columns, i = 0, u = r.length; i < u; i++)
                if (r[i].field === n)
                    return r[i].values.map(function(n) {
                        return {
                            Text: n.text,
                            Id: n.value
                        }
                    });
            return []
        }
        function c(t, i) {
            var r = n(i).data("kendoDropDownList"), u;
            r && (u = ct(t),
            r.dataSource.data(u))
        }
        function lt(t, i) {
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.titles.updateWaitingRoomRecord,
                    width: "430"
                },
                clear: function() {
                    at(t, i)
                },
                success: function(i) {
                    siberia.validation.processAjaxErrors(n(t), i.Errors);
                    e()
                },
                error: function(i) {
                    siberia.validation.processAjaxErrors(n(t), i)
                }
            })
        }
        function at(t, i) {
            n(t + ' [name$="WaitingRoomPatientId"]').val(i.Id);
            n(t + ' [name$="DoctorId"]').data("kendoDropDownList").value(i.DoctorId);
            n(t + ' [name$="WaitingRoomStatusId"]').data("kendoDropDownList").value(i.WaitingRoomStatusId);
            n(t + ' [name$="WaitingRoomId"]').data("kendoDropDownList").value(i.WaitingRoomId);
            n(t + ' [name$="LocationId"]').val(f());
            n(t + ' [name$="Notes"]').val(i.Notes);
            d(!!(i.DoctorId && i.AppointmentId))
        }
        function vt() {
            s().bind("change", function() {
                var t = st()
                  , n = g()
                  , i = s().element.closest("form");
                siberia.validation.clearValidationErrors(i);
                t ? n.dataSource.read({
                    patientId: t,
                    locationId: f()
                }).then(function() {
                    var t = n.dataSource.data();
                    n.enable(t.length > 0);
                    t.length == 1 && n.select(1)
                }) : (n.dataSource.data([]),
                n.enable(!1))
            })
        }
        function p() {
            return n("#waiting-room-remove-item-popup").find("form")
        }
        function w(n, t, i) {
            var r = "#waiting-room-remove-item-popup";
            siberia.popup.create(r, {
                submitText: text.global.labels.confirm,
                windowOptions: {
                    title: text.global.titles.complete,
                    width: "430",
                    actions: ["Minimize", "Close"]
                },
                clear: function() {
                    yt(r, n, t)
                },
                success: function(n) {
                    siberia.validation.processAjaxErrors(p(), n.Errors) && i && i(n)
                },
                error: function(n) {
                    siberia.validation.processAjaxErrors(p(), n.Errors)
                }
            })
        }
        function yt(t, i, r) {
            n(t + " [name$=LocationId]").val(r);
            n(t + " [name$=WaitingRoomItemId]").val(i);
            n(t + " [name$=RemovalReasonId]").data("kendoDropDownList").value("");
            n(t + " [name$=Notes]").val("")
        }
        function pt() {
            n(".js-waiting-room-add-patient").on("click", function(t) {
                var r, u, f;
                t.preventDefault();
                r = n(t.target).closest("form");
                u = r.find('[name$="WaitingRoomId"]');
                u.val(i());
                f = n(".js-global-spinner-container");
                f.spinner(!0);
                r.ajaxSubmit({
                    success: function(n) {
                        siberia.validation.processAjaxErrors(r, n.Errors) && (siberia.multiSelect.empty("#PatientId", !0),
                        u.val(""),
                        siberia.validation.clearValidationErrors(r),
                        e())
                    },
                    error: function() {
                        siberia.validation.showFormNetworkError(r)
                    },
                    complete: function() {
                        f.spinner(!1)
                    }
                })
            })
        }
        function wt() {
            var n = "#waitingRoomPatientPopup", r;
            siberia.grid.initClientGrid({
                gridSelector: "#waiting-room-patients",
                saveAndCloseSelector: null,
                saveSelector: null,
                isCustomEditing: !0,
                confirmText: !1,
                editAction: function(t) {
                    lt(n, t)
                },
                customDelete: bt
            });
            c("DoctorId", n + ' [name$="DoctorId"]');
            c("WaitingRoomStatusId", n + ' [name$="WaitingRoomStatusId"]');
            c("WaitingRoomId", n + ' [name$="WaitingRoomId"]');
            r = t();
            i() == "null" ? r.showColumn("WaitingRoomId") : r.hideColumn("WaitingRoomId")
        }
        function bt(n, t) {
            var i = function() {
                t.remove(n)
            }
              , r = f();
            w(n.Id, r, i)
        }
        function b() {
            return {
                waitingRoomId: i(),
                locationId: f()
            }
        }
        function kt(n) {
            return n.replace(/[\u00A0-\u9999<>\&]/gim, function(n) {
                return "&#" + n.charCodeAt(0) + ";"
            })
        }
        function dt() {
            var i = t()
              , r = o()
              , u = i.element.attr("data-waiting-room-change-url");
            n(i.element).kendoDraggable({
                filter: "tr",
                cursorOffset: {
                    top: 10,
                    left: 10
                },
                distance: 15,
                hint: function(t) {
                    var r = i.dataItem(t)
                      , u = n(t).find(".js-patient-img").prop("src");
                    return n('<div class="waiting-room-draggable"><div class="waiting-room-draggable__img" style="background-image:url(' + u + ')"><\/div>' + kt(r.PatientFullName) + "<\/div>")
                },
                dragstart: function(t) {
                    n(".waiting-room-grid tbody tr").css("cursor", "move");
                    n("body").css("cursor", "move");
                    n(t.currentTarget).css("opacity", "0.5");
                    n('li[data-allow-draganddrop="True"]:not(.k-state-active)').css("background", "#fffcd3")
                },
                drag: function() {
                    n(".waiting-room-grid tbody tr").css("cursor", "move");
                    n("body").css("cursor", "move")
                },
                dragend: function(t) {
                    n(t.currentTarget).css("opacity", "1");
                    n("body").css("cursor", "default");
                    n('li[data-allow-draganddrop="True"]:not(.k-state-active)').css("background", "none");
                    n(".waiting-room-grid tbody tr").css({
                        cursor: "move"
                    })
                },
                group: "waiting-room-patient"
            });
            n(r.element).kendoDropTargetArea({
                filter: 'li[data-allow-draganddrop="True"]:not(.k-state-active)',
                drop: function(t) {
                    var r = i.dataItem(t.draggable.currentTarget)
                      , f = n(t.dropTarget).attr("data-waiting-room-id");
                    n.ajax({
                        type: "POST",
                        url: u,
                        contentType: "application/json",
                        data: JSON.stringify({
                            id: r.Id,
                            waitingRoomId: f
                        })
                    }).then(function(n) {
                        n.Errors ? siberia.notification.showErrorPopup(siberia.notification.getFirstError(n.Errors)) : (i.dataSource.read(),
                        siberia.notification.showSuccessNotification(text.global.status.waitingRoomWasChanged))
                    }, function() {
                        siberia.validation.showGridNetworkError(i)
                    });
                    n(t.dropTarget).removeClass("drag-target");
                    n(".waiting-room-tabs .k-state-default .k-link").css("cursor", "")
                },
                dragenter: function(t) {
                    n(t.dropTarget).addClass("drag-target");
                    n(".waiting-room-tabs .k-state-default .k-link:hover").css("cursor", "move")
                },
                dragleave: function(t) {
                    n(t.dropTarget).removeClass("drag-target");
                    n(".waiting-room-tabs .k-state-default .k-link").css("cursor", "")
                },
                group: "waiting-room-patient"
            })
        }
        function gt(n) {
            var t = u(n);
            return t && t.StartWaitingDateTime && kendo.parseDate(t.StartWaitingDateTime, siberia.config.formats.dateTimeFormat)
        }
        function k() {
            if (n(".js-waiting-room-container").length) {
                var t = n(".waiting-roon-scrollable-area")
                  , i = n(".waiting-room-tabs").offset().top + n(".waiting-room-tabs").height()
                  , r = n(window).height() - i - parseFloat(n(".main-content").css("padding-bottom"));
                t.height(r)
            }
        }
        function ni() {
            var t = n('#waitingRoomPatientPopup [name$="DoctorId"]').data("kendoDropDownList");
            t && t.bind("change", function() {
                d(!!this.value())
            })
        }
        function d(t) {
            n('#waitingRoomPatientPopup [name$="Notes"]').enable(t)
        }
        function ti() {
            n(".js-waiting-room-container").length != 0 && (tt(),
            it(),
            pt(),
            ht(),
            vt(),
            wt(),
            dt(),
            ni(),
            window.onload = k,
            nt(),
            siberia.waitingTime.initWaitingTimeUpdate(".js-waiting-room-waiting-time", gt, siberia.common.currentLocationDateTime, t()))
        }
        function ii(i) {
            var r = t().dataItem(n(i.target).closest("tr"));
            i.options.data = {
                waitingRoomId: r.Id
            }
        }
        function ri() {
            this.refresh()
        }
        function ui() {
            var r = n(this).data("waiting-room-id")
              , i = t();
            r != null ? (n(".waiting-room-add-patient").show(),
            i.hideColumn("WaitingRoomId")) : (n(".waiting-room-add-patient").hide(),
            i.showColumn("WaitingRoomId"))
        }
        return siberia.waitingRoom.gridFilter = b,
        n(window).resize(function() {
            k()
        }),
        {
            init: ti,
            gridFilter: b,
            onTooltipRequestStart: ii,
            onTooltipShow: ri,
            removeWaitingRoomPatient: w
        }
    }();
    n(document).ready(siberia.waitingRoom.init)
}(jQuery),
function(n) {
    function t(n) {
        var t = !1;
        return n < 0 && (t = !0,
        n = Math.abs(n)),
        (t ? "-$" : "$") + parseFloat(n, 10).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").toString()
    }
    siberia.ensureObject("siberia.adjustmentPaymentReport");
    siberia.adjustmentPaymentReport = function() {
        function i() {
            return n("#adjustment-payment-report-grid").data("kendoGrid")
        }
        function r(r) {
            var u = r.response.AdditionalData.SumInvoiceTotal
              , f = r.response.AdditionalData.SumAmountPaid
              , e = r.response.AdditionalData.SumAmountWrittenOff;
            i().one("dataBound", function() {
                n("#adjustment-payment-report-grid .js-invoice-total").text(t(u));
                n("#adjustment-payment-report-grid .js-amount-paid").text(t(f));
                n("#adjustment-payment-report-grid .js-amount-paid-writtenOff").text(t(e))
            })
        }
        function u() {
            var n = i();
            n && n.dataSource.bind("requestEnd", r)
        }
        return {
            init: u
        }
    }();
    n(document).ready(function() {
        siberia.adjustmentPaymentReport.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.conciergeNotification");
    siberia.conciergeNotification = function() {
        function c() {
            y()
        }
        function l() {
            var v = new Date, y = f("con_startDate"), p = f("con_pauseDate"), l;
            if (y != null) {
                var w = new Date(y)
                  , o = v - w
                  , k = Math.floor(o / r)
                  , s = Math.floor(o % r / i)
                  , e = Math.floor(o % i / t)
                  , c = Math.floor(o % t / u);
                s < 10 && (s = "0" + s);
                e < 10 && (e = "0" + e);
                c < 10 && (c = "0" + c);
                document.getElementById("span_timer") != null && document.getElementById("span_timer") != undefined && (document.getElementById("span_timer").innerHTML = s + ":",
                document.getElementById("span_timer").innerHTML += e + ":",
                document.getElementById("span_timer").innerHTML += c)
            } else if (p != null) {
                var b = new Date(p)
                  , o = v - b
                  , k = Math.floor(o / r)
                  , s = Math.floor(o % r / i)
                  , e = Math.floor(o % i / t)
                  , c = Math.floor(o % t / u);
                s < 10 && (s = "0" + s);
                e < 10 && (e = "0" + e);
                c < 10 && (c = "0" + c);
                document.getElementById("span_timer") != null && document.getElementById("span_timer") != undefined && (document.getElementById("span_timer").innerHTML = s + ":",
                document.getElementById("span_timer").innerHTML += e + ":",
                document.getElementById("span_timer").innerHTML += c,
                e == "30" && (l = n("#hidden_conciergerequestId_topBar2").val(),
                (l == "" || l == null) && (l = n("#ConciergeUserRequest_Id").val()),
                clearInterval(h),
                l != "" && a(l)))
            }
        }
        function a(t) {
            n.ajax({
                type: "POST",
                url: s,
                contentType: "application/json",
                data: JSON.stringify({
                    mode: "4",
                    conciergeRequestId: t
                }),
                success: function(n) {
                    siberia.conciergeNotification.eraseCookie("con_startDate");
                    siberia.conciergeNotification.eraseCookie("con_pauseDate");
                    siberia.popup.close("#PracticeUserPopup");
                    siberia.conciergePopup.setTopBarData(n)
                }
            })
        }
        function o(n, t, i) {
            var u = "", r;
            i && (r = new Date,
            r.setTime(r.getTime() + i * 864e5),
            u = "; expires=" + r.toUTCString());
            document.cookie = n + "=" + t + u + "; path=/"
        }
        function f(n) {
            for (var t, r = n + "=", u = document.cookie.split(";"), i = 0; i < u.length; i++) {
                for (t = u[i]; t.charAt(0) == " "; )
                    t = t.substring(1, t.length);
                if (t.indexOf(r) == 0)
                    return t.substring(r.length, t.length)
            }
            return null
        }
        function v(n) {
            o(n, "", -1)
        }
        function y() {
            var i = n("#concierge-practice-request-container"), t;
            e = i.data("check-async-url");
            t = n("#hidden_conciergerequestId_topBar2").val();
            (t == "" || t == null) && (t = n("#ConciergeUserRequest_Id").val());
            (t == undefined || t == "") && (t = 0);
            n.ajax({
                type: "POST",
                url: e,
                data: {
                    transactionRequestId: t
                },
                success: function(t) {
                    t.Id != null && t.Id != undefined && (t.ConciergeTransactionStatusId == "1" ? (n("#ConciergeRequestId").val(t.Id),
                    n("#support_username").html(t.ConciergeUser.IncomingRequestUserName),
                    siberia.conciergePopup.openPracticeUser()) : t.ConciergeTransactionStatusId == "5" && (siberia.conciergeNotification.eraseCookie("con_startDate"),
                    siberia.conciergeNotification.eraseCookie("con_pauseDate"),
                    siberia.conciergePopup.setTopBarData(t),
                    n("#hidden_conciergerequestId_topBar2").val(""),
                    n("#ConciergeUserRequest_Id").val("")))
                }
            })
        }
        function p() {
            var t = n("#concierge_practiceUser_topBar")
              , i = t.data("practice-topbar-url");
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                success: function(t) {
                    t.Id != null && t.Id != undefined && n("#concierge_practiceUser_topBar").show()
                }
            })
        }
        var s = n("#PracticeUserPopup").data("practice-update-status"), e, u = 1e3, t = u * 60, i = t * 60, r = i * 24, h;
        return {
            init: c,
            showTopBarNotification: p,
            createCookie: o,
            readCookie: f,
            showRemaining: l,
            eraseCookie: v
        }
    }();
    n(document).ready(function() {})
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.editorDisabledPopup");
    siberia.editorDisabledPopup = function() {
        function s() {
            var t = n(e)
              , i = n(o);
            t.length !== 0 && i.length !== 0 && (r = f(t.val()),
            u = f(i.val()))
        }
        function h(n) {
            var t = !0
              , f = "";
            switch (n.EditorType) {
            case i.KendoHtml:
                t = r;
                f = text.global.labels.editorHtmlDisabled;
                break;
            case i.DevExpress:
                t = u;
                f = text.global.labels.editorRtfDisabled
            }
            return t || c(f),
            t
        }
        function c(i) {
            siberia.popup.create(t, {
                windowOptions: {
                    title: text.global.labels.warning,
                    width: 400
                },
                init: function() {
                    n(t + " .js-content").html(i);
                    n(".js-warning-confirm").click(function() {
                        siberia.popup.close(t)
                    })
                }
            })
        }
        var i = {
            KendoHtml: 1,
            DevExpress: 2
        }
          , e = "input#IsHtmlTemplateEnabled"
          , o = "input#IsDevExpressTemplateEnabled"
          , r = ""
          , u = ""
          , t = "#editor-disabled-warning-popup"
          , f = function(n) {
            return JSON.parse(n.toLowerCase())
        };
        return {
            init: s,
            checkEditorEnabled: h
        }
    }();
    n(document).ready(function() {
        siberia.editorDisabledPopup.init()
    })
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.demographic.verification");
    siberia.demographic.verification = function() {
        function o() {
            kendo.ui.progress(n("#ctlDemographicContainer"), !0)
        }
        function s() {
            kendo.ui.progress(n("#ctlDemographicContainer"), !1)
        }
        function h(n, t) {
            n && siberia.infoPopup.show(n, t, {
                title: text.global.titles.verificationStatuses,
                width: "550"
            })
        }
        function u(n) {
            siberia.popup.create(n, {
                windowOptions: {
                    title: text.global.titles.verification,
                    width: "450"
                }
            })
        }
        function c() {
            u(t)
        }
        function l() {
            u(i)
        }
        function a() {
            siberia.popup.close(t)
        }
        function v() {
            var t = n("#ctlDemographicContainer"), i;
            t.length <= 0 || (i = t.attr("data-demographic-refresh-url"),
            n.ajax({
                type: "GET",
                url: i,
                contentType: "application/json",
                success: function() {
                    location.reload()
                }
            }))
        }
        function y() {
            siberia.notification.showSuccessNotification(text.global.labels.patientVerifiedSuccesfully)
        }
        function f() {
            n(".js-patient-status-icon").attr("title", n("#medicareVerificationPanel").remove().html()).tooltip({
                position: {
                    my: "left top+10",
                    at: "left bottom"
                }
            })
        }
        function p() {
            var t = n("#ctlDemographicContainer .js-verification-custom-panel"), i;
            t.length <= 0 || (i = t.data("content-update-url"),
            n.ajax({
                type: "POST",
                url: i,
                contentType: "application/json",
                success: function(n) {
                    t.html(n);
                    f()
                }
            }))
        }
        function w() {
            var t = n("#DemographicDetails_VerificationRequirementStatus").val();
            return t === r.Initiate || t === r.Update
        }
        function e(t, i) {
            o();
            n.ajax({
                type: "POST",
                url: t,
                contentType: "application/json",
                timeout: 3e4,
                success: function(n) {
                    n === "OK" ? y() : h(n);
                    p()
                },
                error: function(n) {
                    n.statusText === "timeout" ? l() : v()
                },
                complete: function() {
                    i && i();
                    s()
                }
            })
        }
        function b() {
            var r, i, t;
            n.widget("ui.tooltip", n.ui.tooltip, {
                options: {
                    content: function() {
                        return n(this).prop("title")
                    }
                }
            });
            f();
            r = siberia.common.toBoolean(n("#DemographicDetails_ReadOnly").val());
            r && (i = n("#btnPatientVerify"),
            t = i.data("url"),
            i.click(function(i) {
                i.preventDefault();
                n(this).blur();
                t && e(t)
            }),
            performance.navigation.type !== 1 && w() && t && (e(t, a),
            c()))
        }
        var t = "#verification-required-warning-popup"
          , i = "#verification-timeout-warning-popup"
          , r = {
            Initiate: "Initiate",
            Update: "Update",
            Ignore: "Ignore"
        };
        return {
            init: b
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.safetyNet");
    siberia.safetyNet = function() {
        function et(r) {
            if (t = n(".safety-net-wrapper"),
            !t.length) {
                e = !1;
                return
            }
            e = !0;
            u = r;
            t.find(".js-cc-tooltip").ccTooltip();
            siberia.kendoTooltipWrapper(t, {
                cssClass: "safety-net-tooltip-kendo"
            });
            n(".safety-net-tooltip-button").click(function() {
                if (n(this).hasClass("k-state-border-down")) {
                    var i = t.data("kendoTooltip");
                    i.hide()
                }
            });
            h = n("#apply-safety-net-rebate");
            i = h.toggleButton({
                captionCheckedColor: ft
            });
            k();
            st();
            ht();
            ct();
            lt()
        }
        function k() {
            n('[name^="user-fee-payment-option"]').each(function(t, i) {
                c[i.id] = {
                    omsnAmount: parseFloat(n(i).data("original-safety-net")),
                    omsnAmountString: n(i).data("original-safety-net-string"),
                    emsnAmount: parseFloat(n(i).data("extended-safety-net")),
                    emsnAmountString: n(i).data("extended-safety-net-string")
                }
            })
        }
        function ot(r) {
            if (e && (u().trigger("change"),
            r.safetyNetTypeId)) {
                i.data("toggler").setIsChecked(!0);
                i.find("label input").trigger("change");
                n(f).filter('[value="' + r.safetyNetTypeId + '"],[data-custom-safety-net-rebate-type="' + r.safetyNetTypeId + '"]').prop("checked", !0).trigger("change");
                var o = t.find(l).filter('[data-safety-net-rebate-type="' + r.safetyNetTypeId + '"],[data-custom-safety-net-rebate-type="' + r.safetyNetTypeId + '"]');
                o.data("kendoNumericTextBox").value(r.safetyNetAmount);
                s()
            }
        }
        function st() {
            var i = t.find(l);
            n(i).ccClearInputBtn();
            n(i).each(function() {
                n(this).data("kendoNumericTextBox").bind("change", function() {
                    var n = this.value();
                    n != null && this.value(gt(n));
                    s()
                });
                n(this).change(function() {
                    n(this).blur();
                    h.trigger("safetyNetChanged")
                });
                n(this).on("input", ti)
            });
            n(i).blur(function() {
                d(this)
            })
        }
        function d(t) {
            var i = n(t).closest(".safety-net-rebate-text-box-wrapper")
              , u = n(i).find(".field-validation-valid")
              , f = n(i).find(".learn-more-tooltip");
            if (n(i).find(".safety-net-rebate-text-box").hasClass("widget-validation-error")) {
                u.text("");
                n(f).hide();
                return
            }
            var e = it()
              , o = nt(t)
              , s = n(t).data("kendoNumericTextBox").value();
            o < s && e !== r.CustomEmsn ? (u.text(text.global.labels.pleaseCheckThisValue),
            n(f).show()) : (u.text(text.global.labels.orEnterYourOwn),
            n(f).hide())
        }
        function ht() {
            i.find("label input").change(function() {
                var t = i.data("toggler").isChecked()
                  , r = u().element;
                t ? (n(".show-on-safety-net-apply").css("visibility", "visible"),
                g(r),
                s()) : (n(".show-on-safety-net-apply").css("visibility", "hidden"),
                n(f).prop("checked", !1).change(),
                pt(),
                kt(),
                dt());
                r.trigger("change");
                n(a).closest(".total-row").toggle(t).length && n(w).closest(".total-row").toggle(!t);
                h.trigger("safetyNetChanged")
            });
            i.find("label input").change()
        }
        function ct() {
            siberia.requiredIf.checkRequired(n(f));
            n(f).change(function() {
                var r, u;
                if (this.checked === !0) {
                    var i = n(this).parent().next(".safety-net-rebate-text-box-wrapper")
                      , t = i.find(l)
                      , e = t.data("kendoNumericTextBox").value();
                    e || (r = nt(t),
                    t.data("kendoNumericTextBox").value(r),
                    t.trigger("change"));
                    d(t);
                    i.show();
                    i.css("display", "flex");
                    u = n(f + ":not(:checked)");
                    n(u).each(function() {
                        n(this).parent().next(".safety-net-rebate-text-box-wrapper").hide()
                    });
                    s()
                } else
                    n(this).parent().next(".safety-net-rebate-text-box-wrapper").hide();
                h.trigger("safetyNetChanged")
            })
        }
        function lt() {
            if (e) {
                var t = n(".with-fee-message").find('input[name^="user-fee-payment-option"]');
                n(t).each(function() {
                    var t = this;
                    n(t).data("kendoNumericTextBox").bind("change", function() {
                        var r = n(t).closest(".with-fee-message").find(".private-option-safety-net-info")
                          , u = n(t).closest(".js-payment-option")
                          , f = this.value()
                          , e = tt()
                          , i = f < e;
                        r.toggle(i);
                        u.toggleClass("align-top", i)
                    })
                })
            }
        }
        function at(n) {
            e && (ut.includes(n.data("payment-option-id")) ? (t.css("visibility", "visible"),
            g(u().element),
            s()) : (i.data("toggler").setIsChecked(!1),
            i.find("label input").change(),
            t.css("visibility", "hidden")))
        }
        function vt(t) {
            var i, r, h, f, l;
            e && (i = u(),
            i) && (r = i.element,
            h = r.data("payment-option-id"),
            h === o.Private && (f = c[r.attr("id")],
            f.emsnAmount = t.amount,
            f.emsnAmountString = t.amountString,
            n("#ExtendedSafetyNet").text(t.amountString),
            l = n(v),
            l.data("kendoNumericTextBox").value(Math.max(t.amount, 0)),
            s()))
        }
        function yt() {
            e && k()
        }
        function g(t) {
            var i = c[t.attr("id")], r, u;
            n("#OriginalSafetyNet").text(i.omsnAmountString);
            n("#ExtendedSafetyNet").text(i.emsnAmountString);
            r = n(b);
            r.data("kendoNumericTextBox").value(i.omsnAmount);
            r.trigger("change");
            u = n(v);
            u.data("kendoNumericTextBox").value(i.emsnAmount);
            u.trigger("change")
        }
        function pt() {
            var t, i;
            n("#OriginalSafetyNet").text("");
            n("#ExtendedSafetyNet").text("");
            t = n(b);
            t.data("kendoNumericTextBox").value(0);
            i = n(v);
            i.data("kendoNumericTextBox").value(0)
        }
        function nt(t) {
            var f = u().element
              , e = n(t).data("safety-net-rebate-type")
              , i = c[f.attr("id")];
            return e === r.Omsn ? i.omsnAmount : i.emsnAmount
        }
        function tt() {
            var t = n('input[name^="user-fee-payment-option"][data-payment-option-id=' + o.Rebate + "]");
            return t ? n(t).data("kendoNumericTextBox").value() : null
        }
        function y() {
            var t = n(f + ":checked"), i;
            return !t || t.length === 0 ? null : (i = n(t).closest(".safety-net-option-container").find(l),
            i ? i.data("kendoNumericTextBox").value() : null)
        }
        function it() {
            var t = n(f + ":checked");
            if (!t || t.length === 0)
                return null;
            var o = parseInt(t.val())
              , i = y()
              , e = c[u().element.attr("id")];
            switch (o) {
            case r.Omsn:
                return i === e.omsnAmount ? r.Omsn : r.CustomOmsn;
            case r.Emsn:
                return i === e.emsnAmount ? r.Emsn : r.CustomEmsn;
            default:
                return null
            }
        }
        function rt() {
            var n = tt(), t;
            return n ? (t = y(),
            t ? n + t : n) : 0
        }
        function s() {
            wt();
            bt()
        }
        function wt() {
            n(p).data("kendoNumericTextBox").value(rt())
        }
        function bt() {
            var t = n(a), i, r;
            t.length && (i = n(w).data("kendoNumericTextBox").value(),
            r = Math.max(i - rt(), 0),
            t.data("kendoNumericTextBox").value(r))
        }
        function kt() {
            n(p).data("kendoNumericTextBox").value(0)
        }
        function dt() {
            var t = n(a);
            t.length && t.data("kendoNumericTextBox").value(0)
        }
        function gt(n) {
            return Math.ceil(n * 20) / 20
        }
        function ni(n) {
            return n.replace(/^\$?\s*|\s*$/g, "")
        }
        function ti() {
            var i = n(this)
              , r = ni(i.val());
            if (n.isNumeric(r)) {
                var t = r.split(".")
                  , u = t[0]
                  , f = t.length > 1 ? t[1] : ""
                  , e = i.data("input-integer-digits-max")
                  , o = i.data("input-precision-digits-max");
                u.length > e && (t[0] = u.substr(0, e));
                f.length > o && (t[1] = f.substr(0, o));
                i.val(t.join("."))
            }
        }
        var u, t, i, h, f = 'input[id$="AppliedSafetyNetRebateTypeId"]', l = 'input[id$="SelectedRebate"]', p = '[id$="SafetyNetRebateTotal"]', a = '[id$="EstimatedOutOfPocket"]', w = '[id="Total"]', b = '[id$="OmsnSelectedRebate"]', v = '[id$="EmsnSelectedRebate"]', e = !1, c = {}, o = {
            Private: 1,
            Schedule: 2,
            Rebate: 3,
            Ama: 4,
            Workcover: 5,
            Generic: 6,
            MbsSchedule: 7,
            NinetyDayGap: 8
        }, r = {
            Omsn: 1,
            Emsn: 2,
            CustomOmsn: 3,
            CustomEmsn: 4
        }, ut = [o.Private, o.Ama, o.Workcover, o.Generic], ft = "#0087C9";
        return {
            initSafetyNet: et,
            restoreUserSelection: ot,
            updateSafetyNetSection: at,
            updateExtendedSafetyNet: vt,
            discardDiscounts: yt,
            getSafetyNetRebate: y,
            getSafetyNetRebateType: it
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.passwordStrength");
    siberia.passwordStrength = function() {
        function r(t) {
            let r = n(t);
            if (r.length) {
                r.on("input", u);
                n(i.passwordToggle).click(a)
            }
        }
        function u() {
            let r = n(this).val();
            t.forEach(function(t) {
                let u = t.check(r);
                n(i.container).find(t.iconSelector).toggleClass("icon-circle-checkmark", u).toggleClass("icon-circle-checkmark-gray", !u)
            })
        }
        function f(n) {
            for (let i = 0; i < t.length; i++)
                if (!t[i].check(n))
                    return !1;
            return !0
        }
        function e() {
            t.forEach(function(t) {
                n(i.container).find(t.iconSelector).toggleClass("icon-circle-checkmark", !1).toggleClass("icon-circle-checkmark-gray", !0)
            })
        }
        function o(n) {
            return n.length >= 8
        }
        function s(n) {
            return !!n.match(/[A-Z]/)
        }
        function h(n) {
            return !!n.match(/[a-z]/)
        }
        function c(n) {
            return !!n.match(/[0-9]/)
        }
        function l(n) {
            return !!n.match(/[!,@,#,$,%,^,&,*,?,_,~,\-,+,(,)]/)
        }
        function a(t) {
            t.preventDefault();
            let i = n(this).parent().find("input");
            i.length && (i.attr("type") === "password" ? (i.attr("type", "text"),
            n(this).text(text.global.labels.hide)) : (i.attr("type", "password"),
            n(this).text(text.global.labels.show)))
        }
        const t = [{
            iconSelector: ".js-count-characters",
            check: o
        }, {
            iconSelector: ".js-capital-characters",
            check: s
        }, {
            iconSelector: ".js-lowcase-characters",
            check: h
        }, {
            iconSelector: ".js-number-characters",
            check: c
        }, {
            iconSelector: ".js-special-characters",
            check: l
        }]
          , i = {
            container: ".password-strength",
            passwordToggle: ".password-toggle"
        };
        return {
            init: r,
            check: f,
            reset: e
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.tyroIntegration");
    siberia.tyroIntegration = function() {
        function i() {
            var i = n.Deferred();
            return n.get(t).done(function(n) {
                if (n.ErrorCode)
                    i.reject(n.ErrorMessage);
                else {
                    var t = n.Result.PosProductInfo
                      , r = new TYRO.IClient(n.Result.ClientApiKey,{
                        posProductName: t.Name,
                        posProductVendor: t.Vendor,
                        posProductVersion: t.Version
                    });
                    i.resolve(r)
                }
            }).fail(function() {
                i.reject()
            }),
            i.promise()
        }
        var t = "/api/web/Tyro/GetTyroClientSettings";
        return {
            getTyroClient: i
        }
    }()
}(jQuery),
function(n) {
    siberia.ensureObject("siberia.stripePayments.invoice");
    siberia.stripePayments.invoice = function() {
        function u() {
            n(".js-invoice-container").on("click", "#stripe-pay", f);
            var t = n("#Payments_PaymentCreditCardReceived").data("kendoNumericTextBox");
            t && t.bind("change", function() {
                i(!1, "")
            })
        }
        function f(n) {
            n.preventDefault();
            siberia.invoice.saveInvoiceData(e)
        }
        function e() {
            var i = n("#Payments_PaymentCreditCardReceived").data("kendoNumericTextBox").value()
              , r = {
                InvoiceId: n("#InvoiceId").val(),
                Amount: i,
                PaymentDate: siberia.invoice.getPaymentDate(),
                PaymentLocationId: n("#Payments_PaymentLocationId").val(),
                SelectedItemsIds: siberia.invoice.getSelectedItemsIds(),
                PaymentMethodId: n("#Payments_PatientCreditCardDetails_StripePaymentMethodId").val()
            };
            t(r, !1)
        }
        function t(i, u) {
            var s = {
                InvoiceId: i.InvoiceId,
                Amount: i.Amount,
                PaymentDate: i.PaymentDate,
                PaymentLocationId: i.PaymentLocationId,
                SelectedItemsIds: i.SelectedItemsIds,
                WarningsConfirmed: u
            }, f = n(".js-global-spinner-container"), e;
            f.spinner(!0);
            e = n(".js-invoice-container form");
            n.post(r, s).done(function(n) {
                if (siberia.validation.processAjaxErrors(e, n.Errors)) {
                    if (n.Data.paymentIntentSecret) {
                        o(i.PaymentMethodId, n.Data.paymentIntentSecret, f);
                        return
                    }
                    if (f.spinner(!1),
                    n.Data.showInvoiceOverpaidWarning) {
                        siberia.confirmationPopup.open("#invoice-overpaid-confirmation-popup", function() {
                            t(i, !0)
                        });
                        return
                    }
                    if (n.Data.showItemWarning) {
                        siberia.confirmationPopup.open("#invoiceitem-confirmation-popup", function() {
                            t(i, !0)
                        });
                        return
                    }
                }
                f.spinner(!1)
            }).error(function() {
                f.spinner(!1);
                siberia.validation.showFormNetworkError(e)
            })
        }
        function o(t, r, u) {
            siberia.stripe.confirmCardPayment(r, {
                payment_method: t
            }).then(function(t) {
                if (u.spinner(!1),
                t.error)
                    i(!0, t.error.message);
                else if (t.paymentIntent && t.paymentIntent.status === "succeeded") {
                    n("#Payments_PaymentCreditCardReceived").data("kendoNumericTextBox").value(0);
                    var r = "<strong>" + text.invoices.stripePayment.success.title + "<\/strong><br/>" + text.invoices.stripePayment.success.subtitle + "<br/>" + text.invoices.stripePayment.success.message;
                    siberia.notification.showSuccessNotification(r, null, !1, null, !0)
                }
            })
        }
        function i(t, i) {
            n(".js-invoice-stripe-payment-button").toggle(!t);
            n(".js-stripe-payment-error-section").toggle(t);
            n(".js-stripe-payment-error-message").text(i || "");
            t && n("#Payments_PaymentCreditCardReceived").closest(".k-widget").addClass("stripe-payment-error");
            t || n("#Payments_PaymentCreditCardReceived").closest(".k-widget").removeClass("stripe-payment-error");
            t && n(".js-credit-card-amount-paid").addClass("stripe-payment-error");
            t || n(".js-credit-card-amount-paid").removeClass("stripe-payment-error");
            t && n("html,body").animate({
                scrollTop: n(".js-stripe-payment-error-message").offset().top
            })
        }
        var r = "/Invoice/InitiateInvoiceStripePayment";
        return {
            init: u
        }
    }();
    n(document).ready(function() {
        siberia.stripePayments.invoice.init()
    })
}(jQuery),
function(n) {
    function i(t, i) {
        var r = i.setQueryPostParams();
        return n.extend(!0, {}, r, i.getRelatedPostParams() || {})
    }
    function r(n, i) {
        i.fixServerFilter && siberia.multiSelect.clearServerFilteringState("#" + n.attr("id"));
        t(n, i).dataSource.read()
    }
    function u(n, i, r) {
        return t(n, i).element.val(r).trigger("change"),
        r
    }
    function f(n, i) {
        return t(n, i).element.val()
    }
    function t(n) {
        return n.data("kendoAutoComplete")
    }
    function e(n, i) {
        return t(n, i).dataSource
    }
    function o(n, t, i, r, u, f) {
        siberia.multiSelect.fixServerFiltering(n, t, {
            multipleFilters: i,
            forceServerFilteringCondition: r,
            extraCheckFilter: u,
            extraFilterPrefix: f
        })
    }
    function s(n, i, r) {
        var u = t(n, i), f;
        if (u && (f = u.dataItem(r.item.index()),
        i.onSelect)) {
            i.onSelect(f);
            r.preventDefault();
            u.close()
        }
    }
    function h(n, i) {
        var r = t(n, i);
        n.on("keyup", function(t) {
            var u = t.keyCode === 13;
            if (u)
                if (r.list.find(".k-state-focused").length)
                    r.close();
                else
                    i.onEnterPressed(n, t)
        });
        r.bind("select", function(t) {
            s(n, i, t)
        })
    }
    function c(n, t) {
        var i = n.sender
          , r = i.list.find(".noDataMessage");
        (i.dataSource.view()[0] || i.element.val() === "") && r.hide();
        setTimeout(function() {
            i.dataSource.view()[0] || i.element.val() === "" ? r.hide() : (r.show(),
            i.popup.open());
            t.onDataBound(n)
        }, 300);
        t.onDataBound(n)
    }
    function l(n, t) {
        t.onDataSourceError(n)
    }
    function a(n, t) {
        return n.kendoAutoComplete({
            dataSource: {
                transport: {
                    read: {
                        type: "POST",
                        url: t.dataSourceUrl,
                        data: function() {
                            return i(n, t)
                        }
                    }
                },
                schema: t.dataSourceSchema,
                serverFiltering: !0,
                error: function(n) {
                    l(n, t)
                }
            },
            dataBound: function(n) {
                c(n, t)
            },
            open: t.onOpen,
            change: t.onChange,
            close: t.onClose,
            filtering: t.onFiltering,
            dataTextField: t.dataTextField,
            template: t.customTemplate,
            highlightFirst: t.highlightFirst,
            placeholder: n.attr("placeholder"),
            headerTemplate: '<div class="cc-nodata__message noDataMessage">' + t.noDataMessage + "<\/div>"
        }).data("kendoAutoComplete")
    }
    function v(t, i) {
        var r = a(t, i);
        return i.removeStandardCss && n(r.wrapper).removeClass("k-widget k-autocomplete k-header cc-input"),
        t.closest(".cc-input__group").addClass("cc-input__group_loaded"),
        i.fixServerFilter && o("#" + t.attr("id"), i.filteringFields, i.multipleFilters, i.forceServerFilteringCondition, i.extraCheckFilter, i.extraFilterPrefix),
        h(t, i),
        t
    }
    n.fn.ccAutocomplete = function(o) {
        var s = n.extend({}, n.fn.ccAutocomplete.defaults, o);
        return this.each(function() {
            var o = v(n(this), s);
            return o.ccAutocomplete.settings = s,
            o.data("ccAutocomplete", {
                getPostParams: function() {
                    return i(o, s)
                },
                updateFilterState: function() {
                    return r(o, s)
                },
                getValue: function() {
                    return f(o, s)
                },
                getAutocomplete: function() {
                    return t(o, s)
                },
                getDataSource: function() {
                    return e(o, s)
                },
                setValue: function(n) {
                    return u(o, s, n)
                }
            }),
            o
        })
    }
    ;
    n.fn.ccAutocomplete.defaults = {
        dataSourceUrl: "",
        setQueryPostParams: function() {
            return {
                Text: input.val()
            }
        },
        getRelatedPostParams: function() {
            return {}
        },
        filteringFields: null,
        multipleFilters: !0,
        customTemplate: null,
        dataTextField: "Text",
        onSelect: null,
        fixServerFilter: !1,
        forceServerFilteringCondition: function() {
            return !1
        },
        extraCheckFilter: function() {
            return !1
        },
        extraFilterPrefix: "",
        noDataMessage: text.global.status.noResultsFound,
        removeStandardCss: !1,
        onOpen: function() {},
        onChange: function() {},
        onClose: function() {},
        onFiltering: function() {},
        onEnterPressed: function(n) {
            n.closest("form").trigger("submit")
        },
        onDataBound: function() {},
        onDataSourceError: function() {},
        dataSourceSchema: {
            data: function(n) {
                return n
            }
        }
    }
}(jQuery),
function(n) {
    function r(n) {
        return n.data("kendoDropDownList").value()
    }
    function f(n) {
        return n.data("kendoDropDownList").text()
    }
    function u(n, t) {
        var r = i(n);
        r && r.value(t)
    }
    function e(n, t) {
        o(n);
        t.onChange(r(n))
    }
    function o(i) {
        var f = JSON.parse(localStorage.getItem(t)) || {}, e = {}, r, u, o;
        e[i.attr("id")] = i.find("option:selected").val();
        r = {};
        u = {};
        r[window.location.pathname] = f[window.location.pathname];
        u[window.location.pathname] = e;
        dataForCurrentPathname = n.extend(!0, {}, r || {}, u || {});
        o = n.extend(!0, {}, f, dataForCurrentPathname || {});
        localStorage.setItem(t, JSON.stringify(o))
    }
    function s(i) {
        var u = JSON.parse(localStorage.getItem(t)) || {}, r, i;
        for (pathname in u)
            if (pathname === window.location.pathname) {
                r = u[pathname];
                for (id in r)
                    i = n("#" + id),
                    i.length && i.val(r[id])
            }
    }
    function h(t, i, r) {
        var u = n.extend({}, {
            dataTextField: t.ccDropdown.settings.dataTextField,
            dataValueField: t.ccDropdown.settings.dataValueField,
            change: e.bind(this, t, r)
        }, i);
        return t.kendoDropDownList(u).data("kendoDropDownList")
    }
    function i(n) {
        return n.data("kendoDropDownList")
    }
    function c(t) {
        t.closest(".k-dropdown").on("keyup", function(t) {
            var r = t.keyCode === 13
              , i = n(t.target).closest("form");
            r && i.length && i.trigger("submit")
        })
    }
    function l(i, r) {
        var f, e, u;
        if (i.ccDropdown.settings = r,
        f = r.kendo || {},
        i.ccDropdown.settings.saveStateInLocalStorage)
            try {
                s()
            } catch (o) {
                localStorage.removeItem(t)
            }
        return e = h(i, f, r),
        u = i.attr("placeholder") || i.ccDropdown.settings.placeholder,
        u && e.text(u),
        n("#" + i.attr("id") + "-list").addClass("cc-dropdown_list"),
        c(i, r),
        i
    }
    var t = "ccDropDownState";
    n.fn.ccDropdown = function(t) {
        var o = n.extend({}, n.fn.ccDropdown.defaults, t)
          , e = this;
        return e.getValue = function(n) {
            return r(n)
        }
        ,
        e.getText = function(n) {
            return f(n)
        }
        ,
        e.setValue = function(n, t) {
            return u(n, t)
        }
        ,
        e.clear = function(n) {
            var t = n.attr("placeholder") || n.ccDropdown.settings.placeholder;
            return u(n, null),
            t && i(n).text(t),
            n
        }
        ,
        e.getKendoControl = function(n) {
            return i(n)
        }
        ,
        e.each(function() {
            var t = l(n(this), o);
            return t.data("ccDropdown", {
                clear: e.clear.bind(this, t),
                clearAll: function() {
                    e.each(function() {
                        e.clear(n(this))
                    })
                },
                getValue: e.getValue.bind(this, t),
                getText: e.getText.bind(this, t),
                setValue: function(n) {
                    return e.setValue(t, n),
                    t
                },
                getKendoControl: e.getKendoControl.bind(this, t)
            }),
            t
        })
    }
    ;
    n.fn.ccDropdown.defaults = {
        dataTextField: "text",
        dataValueField: "value",
        onChange: function() {},
        saveStateInLocalStorage: !1,
        placeholder: ""
    }
}(jQuery),
function(n) {
    function r(t, i) {
        return i.closed.forEach(function(t) {
            var t = n('[data-expand-ui="content"][data-expand="' + t + '"]');
            t.closest(".js-expand").removeClass("cc-expand__wrapper_opened").addClass("cc-expand__wrapper_closed").end().stop().slideUp({
                easing: "easeInBack"
            })
        }),
        i.opened.forEach(function(t) {
            var t = n('[data-expand-ui="content"][data-expand="' + t + '"]');
            t.closest(".js-expand").addClass("cc-expand__wrapper_opened").removeClass("cc-expand__wrapper_closed").end().stop().slideDown({
                easing: "easeOutBack"
            })
        }),
        t
    }
    function t(r, u) {
        if (t.saveState = function() {
            var e = n('[data-expand-ui="content"]'), t = {
                opened: [],
                closed: []
            }, u, r, f;
            e.each(function() {
                var i = n(this);
                i.css("display") === "block" ? t.opened.push(i.attr("data-expand")) : t.closed.push(i.attr("data-expand"))
            });
            u = JSON.parse(localStorage.getItem(i)) || {};
            r = {};
            r[window.location.pathname] = t;
            f = n.extend(!1, {}, u || {}, r || {});
            localStorage.setItem(i, JSON.stringify(f))
        }
        ,
        t.loadState = function() {
            if (t.loadState.loaded = t.loadState.loaded || !1,
            !t.loadState.loaded) {
                var r = JSON.parse(localStorage.getItem(i)) || {};
                for (pathname in r)
                    window.location.pathname === pathname && (r[pathname].closed.forEach(function(t) {
                        var t = n('[data-expand-ui="content"][data-expand="' + t + '"]');
                        t.closest(".js-expand").removeClass("cc-expand__wrapper_opened").addClass("cc-expand__wrapper_closed").end().hide()
                    }),
                    r[pathname].opened.forEach(function(t) {
                        var t = n('[data-expand-ui="content"][data-expand="' + t + '"]');
                        t.closest(".js-expand").addClass("cc-expand__wrapper_opened").removeClass("cc-expand__wrapper_closed").end().show()
                    })),
                    t.loadState.loaded = !0
            }
        }
        ,
        u.saveStateInLocalStorage)
            try {
                t.loadState()
            } catch (f) {
                localStorage.removeItem(i)
            }
    }
    function u(i, r) {
        var u = r.relatedFields.filter(function() {
            return n(this).attr("data-expand-ui") === "content"
        });
        u.each(function() {
            var i = n(this);
            i.closest(".js-expand").toggleClass("cc-expand__wrapper_opened", !i.is(":visible")).toggleClass("cc-expand__wrapper_closed", i.is(":visible")).end().stop().slideToggle({
                easing: i.is(":visible") ? "easeInBack" : "easeOutBack",
                complete: function() {
                    r.saveStateInLocalStorage && t.saveState();
                    i.closest(".js-expand").toggleClass("cc-expand__wrapper_opened", i.is(":visible")).toggleClass("cc-expand__wrapper_closed", !i.is(":visible"));
                    i.is(":visible") && i.find("input, select").eq(0).focus()
                }
            })
        })
    }
    function f(i, r) {
        var f = i.attr("data-expand")
          , e = i.find('[data-expand="' + f + '"]')
          , r = n.extend(!0, {}, r, {
            relatedKey: f
        }, {
            relatedFields: e
        });
        i.on("click", '[data-expand="' + f + '"][data-expand-ui="toggler"]', function(n) {
            n.preventDefault();
            n.stopPropagation();
            u(i, r)
        });
        return t(i, r),
        i
    }
    var i = "ccExpandState";
    n.fn.ccExpand = function(t) {
        var i = n.extend({}, n.fn.ccExpand.defaults, t);
        return this.each(function() {
            var t = f(n(this), i);
            return t.ccExpand.settings = i,
            t.ccExpand.setDefaultState = function() {
                return r(t, i.defaultState)
            }
            ,
            t
        })
    }
    ;
    n.fn.ccExpand.defaults = {
        defaultState: {},
        saveStateInLocalStorage: !1
    }
}(jQuery),
function(n) {
    function t(t, i) {
        var r = n("")
          , u = function() {
            t.val().trim().length ? (t.addClass("cc-clear-input_right-indent"),
            r.addClass("cc-clear-input__button_visible")) : (t.removeClass("cc-clear-input_right-indent"),
            r.removeClass("cc-clear-input__button_visible"))
        };
        t.after('<a href="#" tabindex="-1" class="cc-clear-input__button">' + i.icon + "<\/a>").on("input change keyup", u);
        return r = t.next(".cc-clear-input__button").on("click", function(n) {
            n.preventDefault();
            t.val("").trigger("change").trigger("blur");
            t.data("kendoAutoComplete") && t.data("kendoAutoComplete").close()
        }),
        t
    }
    n.fn.ccClearInputBtn = function(i) {
        var r = n.extend({}, n.fn.ccClearInputBtn.defaults, i);
        return this.each(function() {
            var i = t(n(this), r);
            return i.ccClearInputBtn.settings = r,
            i
        })
    }
    ;
    n.fn.ccClearInputBtn.defaults = {
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 56 56" enable-background="new 0 0 56 56"><path d="M28.5 1.9c-14.3 0-26 11.6-26.1 25.9 0 14.4 11.6 26 25.9 26.1 14.3.1 26-11.5 26.1-25.9 0-14.3-11.5-26-25.9-26.1zm13.1 33.7c.2.2.2.5 0 .6l-5 4.9c-.2.2-.5.2-.6 0l-7.6-7.7-7.7 7.6c-.2.2-.5.2-.6 0l-4.9-5c-.2-.2-.2-.5 0-.6l7.7-7.6-7.6-7.7c-.2-.2-.2-.5 0-.6l5-4.9c.2-.2.5-.2.6 0l7.6 7.7 7.7-7.6c.2-.2.5-.2.6 0l4.9 5c.2.2.2.5 0 .6l-7.7 7.6 7.6 7.7z"/><\/svg>'
    }
}(jQuery),
function(n) {
    function u(n, r) {
        var u = r.closest(".js-cc-tooltip").find("[data-cc-tooltip-inner]")
          , f = r.attr("data-cc-tooltip-animation");
        u.is(":visible") ? t(f, u) : i(f, u)
    }
    function i(n, t) {
        r();
        n === "slide" ? t.stop().slideDown({
            easing: "easeOutBack"
        }) : n === "fade" ? t.stop().fadeIn() : t.show()
    }
    function t(n, t) {
        n === "slide" ? t.stop().slideUp({
            easing: "easeInBack"
        }) : n === "fade" ? t.stop().fadeOut() : t.hide()
    }
    function r() {
        var i = n("[data-cc-tooltip-inner]:visible")
          , r = i.closest(".js-cc-tooltip").find("[data-cc-tooltip-animation]").attr("data-cc-tooltip-animation");
        t(r, i)
    }
    function f(r) {
        r.on("click", '[data-cc-tooltip-event="click"]', function(t) {
            t.preventDefault();
            var i = n(t.target).closest("[data-cc-tooltip-event]");
            u(r, i)
        });
        r.on("mouseenter mouseleave", '[data-cc-tooltip-event="hover"]', function(r) {
            var u = n(r.target).attr("data-cc-tooltip-animation")
              , f = n(r.target).closest(".js-cc-tooltip").find("[data-cc-tooltip-inner]");
            r.type === "mouseenter" ? i(u, f) : t(u, f)
        });
        return r
    }
    n(document).on("click", function(t) {
        n(t.target).closest(".js-cc-tooltip").length || r()
    });
    n.fn.ccTooltip = function() {
        return this.each(function() {
            return $this = f(n(this))
        })
    }
}(jQuery),
function(n) {
    function i(n, t, i) {
        t.template.length && (i.isCheckbox && (i.badge = t.targetPlace.find('[data-cc-badge-group="' + t.label + '"]')),
        i.badge && i.badge.length || (i.badge = t.template.clone().removeClass(t.templateClassName).appendTo(t.targetPlace).find("[data-cc-badge-label]").text(t.label).end().find("[data-cc-badge-remove]").on("click", function(r) {
            r.preventDefault();
            f(n, t, i)
        }).end()),
        i.isCheckbox && i.badge.attr("data-cc-badge-group", t.label),
        i.exists = !0)
    }
    function r(n, t, i) {
        i.exists && (i.badge.remove(),
        i.badge = null,
        i.exists = !1)
    }
    function u(t, i, r) {
        var f = r.badge.find("[data-cc-badge-value]"), u, e;
        r.badge && r.exists && (t.data("kendoDropDownList") ? f.text(t.data("kendoDropDownList").text()) : r.multiselect ? f.text(r.multiselect.dataItems()[0].DisplayName) : t.data("kendoMaskedTextBox") ? (u = t.val().replace(/_/g, "").trim(),
        u[u.length - 1] === "-" && (u = u.slice(0, u.length - 1)),
        f.text(u)) : r.isCheckbox ? (u = "",
        e = t.closest(".cc-input__group").find("input:checked + label"),
        e.each(function(t) {
            u += n(this).text();
            t !== e.length - 1 && (u += ", ")
        }),
        f.text(u)) : f.text(t.val()))
    }
    function f(n, t, i) {
        n.data("kendoDropDownList") ? n.data("kendoDropDownList").value(null) : i.multiselect ? (i.multiselect.value(""),
        i.multiselect.refresh()) : i.isCheckbox ? n.closest(".cc-input__group").find("input").prop("checked", !1).removeAttr("checked").trigger("blur").trigger("change") : n.val("");
        n.trigger("blur").trigger("change")
    }
    function t(n, t, f) {
        var e, o = !1;
        f.isCheckbox ? o = !!n.closest(".cc-input__group").find("input:checked").length : e = f.multiselect ? f.multiselect.dataItems()[0] && f.multiselect.dataItems()[0].DisplayName : n.val().trim();
        e || o ? (i(n, t, f),
        u(n, t, f)) : f.exists && r(n, t, f)
    }
    function e(n, i, r) {
        n.on("blur", function() {
            t(n, i, r)
        });
        r.multiselect && r.multiselect.bind("change", function() {
            t(n, i, r)
        });
        i.targetPlace.on("click", function(n) {
            n.stopPropagation()
        })
    }
    function o(n, t) {
        var i = {
            exists: !1,
            id: n.attr("id"),
            badge: null,
            isCheckbox: !1,
            multiselect: n.closest(".k-multiselect").find(".js-client-multiselect").data("kendoMultiSelect")
        };
        return (n.attr("type") === "checkbox" || n.attr("type") === "radio") && (i.isCheckbox = !0),
        n.data("checked") && n.prop("checked", !0),
        e(n, t, i),
        n
    }
    n.fn.ccBadgesGenerator = function(t) {
        var i = n.extend({}, n.fn.ccBadgesGenerator.defaults, t);
        return this.each(function() {
            var t = o(n(this), i);
            return t.ccBadgesGenerator.settings = i,
            t
        })
    }
    ;
    n.fn.ccBadgesGenerator.defaults = {
        label: "",
        template: n(""),
        templateClassName: "",
        targetPlace: n("")
    }
}(jQuery),
function(n) {
    function i(n, t, i) {
        n.closest(".cc-input__group").addClass(i ? "cc-input__group_warning" : "").addClass("cc-input__group_invalid").find(t ? t : ".cc-input__validation-message").slideDown().closest(".cc-expand__wrapper_closed").find('[data-expand-ui="toggler"]').click()
    }
    function t(n, t) {
        var i = n.closest(".cc-input__group");
        i.find(t ? t : ".cc-input__validation-message").slideUp(400).promise().then(function() {
            i.find(".cc-input__validation-message:visible, .cc-input__specific-validation-message:visible").length === 0 && i.removeClass("cc-input__group_invalid cc-input__group_warning")
        })
    }
    function f(n) {
        var r = !0;
        return n.forEach(function(n) {
            var o = n.fromField
              , s = n.toField
              , u = o.add(s)
              , f = o.data("kendoDatePicker")
              , e = s.data("kendoDatePicker");
            if (new Date(f.value()) == "Invalid Date" || new Date(e.value()) == "Invalid Date" || f.value() && e.value() && new Date(f.value()) > new Date(e.value())) {
                i(u, ".js-validation-message-choose-from-before-to");
                u.one("input change", function() {
                    t(u, ".js-validation-message-choose-from-before-to")
                });
                r = !1
            }
        }),
        r
    }
    function r(r) {
        if (!r.validatedFieldSelector && !r.dependOnFieldSelectors)
            return !0;
        var u = !1;
        return r.needToValidateConditionFunc && !r.needToValidateConditionFunc() || n(r.validatedFieldSelector).filter(function() {
            return this.value
        }).length === 0 ? (t(n(r.validatedFieldSelector), ".js-validation-message-must-use-other-fields"),
        !0) : (r.dependOnFieldSelectors.forEach(function(t) {
            var i = n(t)
              , r = i.closest(".cc-input__group")
              , f = r.hasClass("cc-input__group_invalid")
              , e = r.hasClass("cc-input__group_warning");
            !i.val() || f || e || (u = !0)
        }),
        u ? t(n(r.validatedFieldSelector), ".js-validation-message-must-use-other-fields") : i(n(r.validatedFieldSelector), ".js-validation-message-must-use-other-fields"),
        u)
    }
    function e(t) {
        t.forEach(function(t) {
            var i = t.validatedFieldSelector
              , u = t.dependOnFieldSelectors;
            n(i + "," + u.join(",")).blur(function() {
                r(t)
            })
        })
    }
    function o(n) {
        var t = !0;
        return n.forEach(function(n) {
            t = t && r(n)
        }),
        t
    }
    function s(r) {
        var u = !0;
        return r.each(function() {
            var r = n(this)
              , f = r.val().trim();
            if (f && !f.match(/^[0-9]+(-[0-9]+)?$/)) {
                u = !1;
                i(r);
                r.one("input change", function() {
                    t(r)
                })
            }
        }),
        u
    }
    function h(n, t) {
        var i = !0, r;
        return t.searchInputNotSelectedWarningValidaion && v(t.searchInputNotSelectedWarningValidaion),
        t.fromToDateValidation && (r = f(t.fromToDateValidation),
        i = i && r),
        t.twoDashedSeparatedNumbersValidation.length && (r = s(t.twoDashedSeparatedNumbersValidation),
        i = i && r),
        t.mustUseWithOtherInputsValidation.length && (i = i && o(t.mustUseWithOtherInputsValidation)),
        i && n.find(".cc-input__validation-message:visible, .cc-input__specific-validation-message:visible").length === 0
    }
    function c(n, t) {
        n.on("submit", function(i) {
            i.preventDefault();
            h(n, t) ? t.validCallback() : t.invalidCallback()
        })
    }
    function l(n, t) {
        var i, r, u;
        return n ? (i = n.getValue(),
        !i) ? !0 : (r = t.data("field-value"),
        !r) ? !1 : (u = r.Text,
        i !== u) ? !1 : !0 : !0
    }
    function a(t) {
        t.each(function() {
            var t = n(this);
            t.blur(function() {
                u(t)
            })
        })
    }
    function u(n) {
        l(n.data("ccAutocomplete"), n) ? t(n) : i(n, null, !0)
    }
    function v(t) {
        t.each(function() {
            u(n(this))
        })
    }
    function y(t) {
        var i = !0;
        return t.each(function(t, r) {
            var u = n(r);
            i = i && (u.data("kendoDatePicker").value() || u.val() == "")
        }),
        i
    }
    function p(r) {
        r.on("blur", function() {
            var r = n(this).closest(".cc-advanced-search__col").find("input.cc-input__date")
              , u = y(r);
            u ? t(r, ".js-validation-message-incorrect-date") : i(r, ".js-validation-message-incorrect-date")
        });
        r.on("input change", function() {
            var i = n(this).closest(".cc-advanced-search__col").find("input.cc-input__date");
            t(i, ".js-validation-message-incorrect-date")
        })
    }
    function b(n, r) {
        n.on("blur", function() {
            var u = n.val(), f;
            u && (typeof u == "string" || u instanceof String) && (w.test(u) ? (n.parent().find(".js-validation-message-incorrect-value").length || (f = r.find(".js-validation-message-incorrect-value").first().clone(),
            n.after(f)),
            i(n, ".js-validation-message-incorrect-value")) : t(n, ".js-validation-message-incorrect-value"))
        });
        n.on("input change", function() {
            t(n, ".js-validation-message-incorrect-value")
        })
    }
    function k(t, i) {
        i.searchInputNotSelectedWarningValidaion.length && a(i.searchInputNotSelectedWarningValidaion);
        i.mustUseWithOtherInputsValidation.length && e(i.mustUseWithOtherInputsValidation);
        t.find("input").each(function() {
            var i = n(this);
            i.data("kendoDatePicker") ? p(i) : b(i, t)
        })
    }
    function d(n, t) {
        return k(n, t),
        c(n, t),
        n
    }
    var w = /(&#)|(<[a-zA-Z!/?])/;
    n.fn.ccValidator = function(t) {
        var i = n.extend({}, n.fn.ccValidator.defaults, t);
        return this.each(function() {
            var t = d(n(this), i);
            return t.ccValidator.settings = i,
            t.ccValidator.publicMethodName = function() {
                return privateFunction(t, i)
            }
            ,
            t
        })
    }
    ;
    n.fn.ccValidator.defaults = {
        validCallback: function() {},
        invalidCallback: function() {},
        twoDashedSeparatedNumbersValidation: n(null),
        searchInputNotSelectedWarningValidaion: n(null),
        mustUseWithOtherInputsValidation: [],
        fromToDateValidation: []
    }
}(jQuery),
function(n) {
    function u(n) {
        return n.match(/^(?:0[1-9]|[12][0-9]|3[01])[\/](?:0[1-9]|1[012])[\/](?:\d{4})$/mg)
    }
    function i(n, t) {
        return n.find(t.buttonsSelector).attr("disabled", !0).addClass("cc-disabled").end()
    }
    function r(n, t) {
        return n.find(t.buttonsSelector).attr("disabled", !1).removeClass("cc-disabled").end()
    }
    function t(t, f) {
        var s = t.find('input:not([type="hidden"]), select')
          , e = !1
          , o = !1;
        return s.each(function() {
            var t = n(this), i;
            t.hasClass("k-readonly") || t.closest(".k-multiselect").length && t.is("input") || (i = !!t.closest(".cc-input__group:visible").length && !!t.attr("required"),
            t.data("kendoDropDownList") ? (f.selectNeedsToBeTouched ? t.data("touched") === !0 && t.data("kendoDropDownList").value() && (e = !0) : t.data("kendoDropDownList").value() && (e = !0),
            i && !t.data("kendoDropDownList").value() && (o = !0)) : t.data("kendoMultiSelect") ? t.data("kendoMultiSelect").value().length ? e = !0 : i && (o = !0) : t.data("kendoDatePicker") ? t.data("kendoDatePicker").value() && t.val().length === 10 ? e = !0 : i && !u(t.val()) && (o = !0) : t.attr("type") === "checkbox" || t.attr("type") === "radio" ? t.is(":checked") ? e = !0 : i && t.attr("type") === "checkbox" && (o = !0) : t.data("kendoMaskedTextBox") ? t.val() !== "" && t.val() !== t.data("kendoMaskedTextBox")._emptyMask ? e = !0 : i && (o = !0) : t.val() !== "" ? e = !0 : i && (o = !0))
        }),
        o && f.checkRequiredFields || !e ? i(t, f) : r(t, f),
        t
    }
    function f(n, t) {
        return n.find(t.buttonsSelector).attr("disabled") !== "disabled"
    }
    function e(n) {
        n.data("touched", !0)
    }
    function o(n) {
        return n.find("select").data("touched", !1).end()
    }
    function s(i, r) {
        if (r.checkingOnTheFly) {
            i.find("select").each(function() {
                var u = n(this)
                  , f = u.data("kendoDropDownList")
                  , o = u.data("kendoMultiSelect");
                f && f.bind("select", function() {
                    e(u);
                    setTimeout(function() {
                        t(i, r);
                        r.onInputCallback()
                    }, 0)
                });
                o && o.bind("change", function() {
                    t(i, r);
                    r.onInputCallback()
                })
            });
            i.on("input change keyup", "input", function() {
                t(i, r);
                r.onInputCallback()
            })
        }
    }
    function h(n, i) {
        return s(n, i),
        t(n, i),
        n
    }
    n.fn.ccPokaYoka = function(u) {
        var s = n.extend({}, n.fn.ccPokaYoka.defaults, u)
          , e = this;
        return n.fn.ccPokaYoka.settings = s,
        e.enableForm = function(n) {
            return r(n, s)
        }
        ,
        e.disableForm = function(n) {
            return i(n, s)
        }
        ,
        e.checkForm = function(n) {
            return t(n, s)
        }
        ,
        e.getIsEnabledStatus = function(n) {
            return f(n, s)
        }
        ,
        e.forgetAboutTouchedDropdowns = function(n) {
            return o(n, s)
        }
        ,
        e.each(function() {
            var t = n(this);
            return t.data("ccPokaYoka", {
                enableForm: e.enableForm.bind(this, t),
                disableForm: e.disableForm.bind(this, t),
                checkForm: e.checkForm.bind(this, t),
                forgetAboutTouchedDropdowns: e.forgetAboutTouchedDropdowns.bind(this, t),
                getIsEnabledStatus: e.getIsEnabledStatus.bind(this, t)
            }),
            h(t, s)
        })
    }
    ;
    n.fn.ccPokaYoka.defaults = {
        buttonsSelector: '[type="submit"]',
        selectNeedsToBeTouched: !1,
        checkRequiredFields: !1,
        checkingOnTheFly: !0,
        onInputCallback: function() {}
    }
}(jQuery),
function(n) {
    function i(n) {
        return n.data("ccAlert").state = "hidden",
        n
    }
    function t(n, t, i, r, u) {
        var i = i || "hidden"
          , r = r || ""
          , u = u || "";
        return n.stop().slideUp(function() {
            n.removeClass("cc-alert_fail").removeClass("cc-alert_success").removeClass("cc-alert_info").find(".cc-alert__title").text(r).end().find(".cc-alert__text").text(u);
            switch (i) {
            case "fail":
                n.addClass("cc-alert_fail").slideDown({
                    queue: !1
                });
                break;
            case "success":
                n.addClass("cc-alert_success").slideDown({
                    queue: !1
                });
                break;
            case "info":
                n.addClass("cc-alert_info").slideDown({
                    queue: !1
                })
            }
        }),
        n.data("ccAlert").state = i,
        setTimeout(function() {
            f(n, t)
        }, 0),
        n
    }
    function r(i, r) {
        var u = function(f) {
            n(f.target).closest(".js-alert").length || (t(i, r),
            n(document).off("click", u))
        };
        n(document).on("click", u)
    }
    function u(n, i) {
        n.ccAlert.timeout = setTimeout(function() {
            t(n, i)
        }, i.timeout)
    }
    function f(n, t) {
        n.ccAlert.timeout = n.ccAlert.timeout || null;
        n.ccAlert.timeout && clearTimeout(n.ccAlert.timeout);
        var i = n.data("ccAlert").state || "hidden";
        t.closeOnOutsideClick.forEach(function(u) {
            u === i && r(n, t)
        });
        t.closeOnTimeout.forEach(function(r) {
            r === i && u(n, t)
        })
    }
    n.fn.ccAlert = function(r) {
        var u = n.extend({}, n.fn.ccAlert.defaults, r)
          , f = this;
        return f.setAlertState = function(n, i, r, u, f) {
            return t(n, i, r, u, f)
        }
        ,
        f.each(function() {
            var t = n(this);
            return t.ccAlert.settings = u,
            t.data("ccAlert", {
                state: "hidden",
                setState: function(n, i, r) {
                    f.setAlertState(t, u, n, i, r)
                }
            }),
            i(n(this), u)
        })
    }
    ;
    n.fn.ccAlert.defaults = {
        closeOnOutsideClick: ["fail", "info"],
        closeOnTimeout: ["success"],
        timeout: 4e3
    }
}(jQuery),
function(n) {
    function f(n, i) {
        r(n, i);
        t(n, i, 0, !0);
        e(n, i);
        i.onChange(n.data("ccCarousel").items.eq(0), n.data("ccCarousel").items.eq(0));
        return n
    }
    function e(n) {
        n.find("[data-cc-carousel-item-template]").remove();
        n.data("ccCarousel").itemTemplate.removeAttr("data-cc-carousel-item-template")
    }
    function t(n, t, i, r) {
        n.data("ccCarousel").allField.text(n.data("ccCarousel").all);
        r ? n.data("ccCarousel").currentField.text(i + 1) : n.data("ccCarousel").currentField.fadeOut(t.speed / 2, function() {
            n.data("ccCarousel").currentField.text(i + 1).fadeIn(t.speed / 2)
        });
        n.data("ccCarousel").nextBtn.add(n.data("ccCarousel").prevBtn).removeClass("disabled");
        i === 0 && n.data("ccCarousel").prevBtn.addClass("disabled");
        i === n.data("ccCarousel").all - 1 && n.data("ccCarousel").nextBtn.addClass("disabled")
    }
    function i(n, i, u, f) {
        var f = f || !1;
        if (n.data("ccCarousel").items.eq(u).length) {
            h(n, i);
            t(n, i, u);
            i.onChange(n.data("ccCarousel").items.eq(u), n.data("ccCarousel").items.eq(n.data("ccCarousel").state));
            n.data("ccCarousel").track.stop().animate({
                left: -n.data("ccCarousel").track.width() * u
            }, f ? i.speed : 0, function() {
                n.data("ccCarousel").state = u;
                r(n, i)
            })
        }
    }
    function o(n, t) {
        var r = n.data("ccCarousel").state + 1
          , u = n.data("ccCarousel").all.length;
        i(n, t, r > u ? u : r, !0)
    }
    function s(n, t) {
        var r = n.data("ccCarousel").state - 1;
        i(n, t, r <= 0 ? 0 : r, !0)
    }
    function r(n, t) {
        n.data("ccCarousel").nextBtn.on("click", function(i) {
            i.preventDefault();
            o(n, t)
        });
        n.data("ccCarousel").prevBtn.on("click", function(i) {
            i.preventDefault();
            s(n, t)
        })
    }
    function h(n) {
        n.data("ccCarousel").nextBtn.off("click");
        n.data("ccCarousel").prevBtn.off("click")
    }
    function c(n) {
        return n.data("ccCarousel").items.eq(n.data("ccCarousel").state)
    }
    function l(n, t, i) {
        var r = n.data("ccCarousel").itemTemplate.clone()
          , f = n.data("ccCarousel").track;
        t.fillTemplate(r, i);
        f.append(r);
        u(n, t, 0)
    }
    function a(n, t, i) {
        var f = n.data("ccCarousel").itemTemplate.clone(), r = n.data("ccCarousel").track, e;
        t.fillTemplate(f, i);
        r.prepend(f).css("left", parseInt(r.css("left")) - r.width());
        n.data("ccCarousel").state++;
        e = n.data("ccCarousel").state;
        u(n, t, e)
    }
    function u(n, i, r) {
        n.data("ccCarousel").items = n.find("[data-cc-carousel-track] > *");
        n.data("ccCarousel").all = n.data("ccCarousel").items.length;
        t(n, i, r);
        i.onChange(n.data("ccCarousel").items.eq(r), n.data("ccCarousel").items.eq(r))
    }
    n.fn.ccCarousel = function(t) {
        var r = n.extend({}, n.fn.ccCarousel.defaults, t)
          , u = this;
        return u.appendItem = function(n, t) {
            l(n, r, t)
        }
        ,
        u.prependItem = function(n, t) {
            a(n, r, t)
        }
        ,
        u.each(function() {
            var t = n(this);
            return t.data("ccCarousel", {
                track: t.find("[data-cc-carousel-track]"),
                items: t.find("[data-cc-carousel-track] > *"),
                nextBtn: t.find("[data-cc-carousel-next]"),
                prevBtn: t.find("[data-cc-carousel-prev]"),
                all: t.find("[data-cc-carousel-track] > *").length,
                allField: t.find("[data-cc-carousel-all]"),
                currentField: t.find("[data-cc-carousel-current]"),
                itemTemplate: t.find("[data-cc-carousel-item-template]").clone(),
                getCurrentItem: c.bind(this, t, r),
                appendItem: function(n) {
                    return u.appendItem(t, n),
                    t
                },
                prependItem: function(n) {
                    return u.prependItem(t, n),
                    t
                },
                setState: function(n, u) {
                    return i(t, r, n, u)
                },
                state: 0
            }),
            f(t, r),
            t
        })
    }
    ;
    n.fn.ccCarousel.defaults = {
        speed: 500,
        onChange: function() {},
        fillTemplate: function() {}
    }
}(jQuery),
function(n) {
    function t(n, t) {
        n.data("ccDatepicker").kendoControl && n.data("ccDatepicker").kendoControl.value(t)
    }
    function i(n) {
        return n.val()
    }
    function r(n, t) {
        return n.data("ccDatepicker").kendoControl = n.kendoDatePicker().data("kendoDatePicker"),
        t.mask && (n.kendoMaskedTextBox({
            mask: "00/00/0000"
        }),
        n.removeClass("k-textbox")),
        n
    }
    n.fn.ccDatepicker = function(u) {
        var e = n.extend({}, n.fn.ccDatepicker.defaults, u)
          , f = this;
        return f.setValue = function(n, i) {
            return t(n, i)
        }
        ,
        f.getValue = function(n) {
            return i(n)
        }
        ,
        f.clear = function(n) {
            return t(n, "")
        }
        ,
        f.each(function() {
            var t = n(this);
            return t.data("ccDatepicker", {
                clear: f.clear.bind(this, t),
                clearAll: function() {
                    f.each(function() {
                        f.clear(n(this))
                    })
                },
                setValue: function(n) {
                    f.setValue(t, n)
                },
                getValue: function() {
                    return f.getValue(t)
                },
                kendoControl: null
            }),
            r(n(this), e)
        })
    }
    ;
    n.fn.ccDatepicker.defaults = {}
}(jQuery),
function(n) {
    function i(n, t) {
        return n.kendoMultiSelect({
            dataSource: {
                serverFiltering: !0,
                transport: {
                    read: {
                        method: "POST",
                        dataType: "json",
                        url: n.attr("data-cc-datasource-url") || t.dataSource,
                        data: t.getGata || function() {
                            return {
                                text: n.data("kendoMultiSelect")._prev
                            }
                        }
                    }
                }
            },
            autoBind: !1,
            maxSelectedItems: n.attr("data-cc-max-selected-items") || t.maxSelectedItems,
            placeholder: n.attr("placeholder") || t.placeholder,
            dataTextField: n.attr("data-cc-data-text-field") || t.dataTextField,
            dataValueField: n.attr("data-cc-data-value-field") || t.dataValueField,
            template: n.attr("data-cc-template") || t.customTemplate
        }),
        n
    }
    function t(n, t, i) {
        return n.data("kendoMultiSelect").value(i),
        n
    }
    function r(n) {
        return n.data("kendoMultiSelect").value()
    }
    function u(n, i) {
        t(n, i, "")
    }
    n.fn.ccMultiselect = function(f) {
        var o = n.extend({}, n.fn.ccMultiselect.defaults, f)
          , e = this;
        return e.clear = function(n) {
            return u(n, o)
        }
        ,
        e.setValue = function(n, i) {
            return t(n, o, i)
        }
        ,
        e.getValue = function(n) {
            return r(n, o)
        }
        ,
        e.each(function() {
            var t = i(n(this), o);
            return t.ccMultiselect.settings = o,
            t.data("ccMultiselect", {
                clear: e.clear.bind(this, t),
                clearAll: function() {
                    e.each(function() {
                        e.clear(n(this))
                    })
                },
                setValue: function(n) {
                    e.setValue(t, o, n)
                },
                getValue: e.getValue.bind(this, t, o)
            }),
            t
        })
    }
    ;
    n.fn.ccMultiselect.defaults = {
        maxSelectedItems: Infinity,
        getGata: null,
        dataSource: "",
        placeholder: "",
        dataTextField: "Id",
        dataValueField: "Text",
        customTemplate: "#= Text #"
    }
}(jQuery),
function(n) {
    function t(n, t, i) {
        var i = i || function() {}
        ;
        return n.is(":visible") && (t.beforeHide(),
        n.ccFloatedTooltip.openedBy = "",
        n.stop().fadeOut({
            done: function() {
                i();
                t.onHide()
            }
        })),
        n
    }
    function i(t, i, r) {
        var f = n(i.buttons[r].anchorSelector)
          , e = f.position()
          , o = i.buttons[r].direction
          , u = t.find("[data-cc-floated-tooltip-triangle]");
        i.beforeShow.call(this);
        t.removeClass("cc-floated-tooltip_left").removeClass("cc-floated-tooltip_right").addClass("cc-floated-tooltip_" + o).css({
            top: e.top + f.outerHeight() + parseInt(u.css("border-bottom-width")) + 2,
            left: o === "right" ? e.left + f.outerWidth() / 2 - t.outerWidth() + parseInt(u.css("right")) + parseInt(u.css("border-left-width")) : e.left + f.outerWidth() / 2 - parseInt(u.css("left")) - parseInt(u.css("border-left-width"))
        }).stop().fadeIn({
            done: function() {
                t.ccFloatedTooltip.openedBy = r;
                i.onShow.call(this);
                var u = r !== 0
                  , f = n(".cc-referral__edit-inputs").is(":visible")
                  , e = t.find(".cc-floated-tooltip__close-wrapper");
                u || f ? !u && f ? e.addClass("visible") : u && f && e.removeClass("visible") : e.removeClass("visible")
            }
        })
    }
    function r(n, u, f) {
        if (n.is(":visible")) {
            if (n.ccFloatedTooltip.openedBy !== f) {
                t(n, u, function() {
                    r(n, u, f)
                });
                return
            }
        } else
            typeof u.buttons[f].callback == "function" && u.buttons[f].callback(),
            i(n, u, f)
    }
    function u(u, f) {
        f.buttons.forEach(function(t, i) {
            n(document).off("click", t.buttonSelector);
            n(document).on("click", t.buttonSelector, function(n) {
                n.preventDefault();
                n.stopPropagation();
                r(u, f, i)
            })
        });
        f.closeButton.on("click", function(n) {
            n.preventDefault();
            t(u, f)
        });
        n(window).on("resize", function() {
            u.ccFloatedTooltip.openedBy && i(u, f, u.ccFloatedTooltip.openedBy)
        });
        return u
    }
    n.fn.ccFloatedTooltip = function(i) {
        var r = n.extend({}, n.fn.ccFloatedTooltip.defaults, i)
          , f = n(this);
        return f.hideTooltip = function(n) {
            return t(n, r)
        }
        ,
        f.each(function() {
            var t = u(n(this), r);
            return t.ccFloatedTooltip.settings = r,
            t.data("ccFloatedTooltip", {
                hideTooltip: f.hideTooltip.bind(this, t)
            }),
            t
        })
    }
    ;
    n.fn.ccFloatedTooltip.defaults = {
        buttons: [],
        onShow: function() {},
        onHide: function() {},
        beforeShow: function() {},
        beforeHide: function() {},
        closeButton: n(null)
    }
}(jQuery),
function() {
    var n = function() {
        switch (window.location.pathname) {
        case "/patientlist":
            patientList();
            break;
        case "/invoice":
        case "/invoice/index/":
            referralSection();
            itemsAutosuggest(!1, {
                refreshAction: siberia.invoice.refresh
            });
            break;
        case "/quote":
            itemsAutosuggest(!1, {
                refreshAction: siberia.feeEstimate.refresh
            });
            break;
        case "/claim":
            claimingFilter(!0);
            break;
        case "/claim/eclipse":
            claimingFilter(!1)
        }
    };
    n()
}(jQuery)
